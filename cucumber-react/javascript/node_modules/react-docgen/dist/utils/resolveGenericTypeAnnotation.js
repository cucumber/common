"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveGenericTypeAnnotation;

var _isUnreachableFlowType = _interopRequireDefault(require("../utils/isUnreachableFlowType"));

var _recast = _interopRequireDefault(require("recast"));

var _resolveToValue = _interopRequireDefault(require("../utils/resolveToValue"));

var _flowUtilityTypes = require("./flowUtilityTypes");

/*
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 *
 */
const types = _recast.default.types.namedTypes;

function tryResolveGenericTypeAnnotation(path) {
  let typePath = (0, _flowUtilityTypes.unwrapUtilityType)(path);

  if (types.GenericTypeAnnotation.check(typePath.node)) {
    typePath = (0, _resolveToValue.default)(typePath.get('id'));

    if ((0, _isUnreachableFlowType.default)(typePath)) {
      return;
    }

    return tryResolveGenericTypeAnnotation(typePath.get('right'));
  }

  return typePath;
}
/**
 * Given an React component (stateless or class) tries to find the
 * flow type for the props. If not found or not one of the supported
 * component types returns undefined.
 */


function resolveGenericTypeAnnotation(path) {
  if (!path) return;
  const typePath = tryResolveGenericTypeAnnotation(path);
  if (!typePath || typePath === path) return;
  return typePath;
}