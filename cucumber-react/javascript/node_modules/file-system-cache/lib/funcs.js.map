{"version":3,"sources":["../src/funcs.js"],"names":[],"mappings":"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","file":"funcs.js","sourcesContent":["import R from 'ramda';\nimport fs from 'fs-extra';\nimport fsPath from 'path';\nimport crypto from 'crypto';\nimport Promise from 'bluebird';\n\n\nexport const isNothing = (value) => R.isNil(value) || R.isEmpty(value);\nexport const isString = R.is(String);\nexport const compact = R.pipe(R.flatten, R.reject(R.isNil));\nexport const toStringArray = R.pipe(compact, R.map(R.toString));\nexport const toAbsolutePath = (path) => path.startsWith('.') ? fsPath.resolve(path) : path;\nexport const ensureString = R.curry(\n  (defaultValue, text) => R.is(String, text) ? text : defaultValue\n);\n\n\nexport const isFileSync = (path) => {\n  if (fs.existsSync(path)) {\n    return fs.lstatSync(path).isFile();\n  }\n  return false;\n};\n\n\nexport const readFileSync = (path) => {\n  if (fs.existsSync(path)) {\n    return fs.readFileSync(path).toString();\n  }\n};\n\n\nexport const existsP = (path) => new Promise((resolve) => {\n  fs.exists(path, (exists) => resolve(exists));\n});\n\n\nexport const removeFileP = (path) => new Promise((resolve, reject) => {\n  existsP(path)\n    .then((exists) => {\n      if (exists) {\n        fs.remove(path, (err) => {\n          if (err) { reject(err); } else { resolve(); }\n        });\n      } else {\n        resolve();\n      }\n    });\n});\n\n\nexport const filePathsP = (basePath, ns) => new Promise((resolve, reject) => {\n  existsP(basePath)\n    .then(exists => {\n      if (!exists) { resolve([]); return; }\n      fs.readdir(basePath, (err, fileNames) => {\n        if (err) {\n          reject(err);\n        } else {\n          const paths = R.pipe(\n            compact,\n            R.filter((name) => ns ? name.startsWith(ns) : true),\n            R.filter((name) => !ns ? !R.contains('-')(name) : true),\n            R.map(name => `${ basePath }/${ name }`)\n          )(fileNames);\n          resolve(paths);\n        }\n      });\n    });\n});\n\n\n/**\n * Turns a set of values into a HEX hash code.\n * @param values: The set of values to hash.\n * @return {String} or undefined.\n */\nexport const hash = (...values) => {\n  if (R.pipe(compact, R.isEmpty)(values)) { return undefined; }\n  const resultHash = crypto.createHash('md5');\n  const addValue = value => resultHash.update(value);\n  const addValues = R.forEach(addValue);\n  R.pipe(\n    toStringArray,\n    addValues\n  )(values);\n  return resultHash.digest('hex');\n};\n"]}