{"version":3,"file":"index.js","sources":["../src/tokenizer/types.js","../src/util/scopeflags.js","../src/plugins/estree.js","../src/util/whitespace.js","../src/tokenizer/context.js","../src/util/identifier.js","../src/plugins/flow.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/util/scope.js","../src/plugins/typescript/scope.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/location.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/parser/util.js","../src/parser/node.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(prevType: TokenType) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 2),\n  logicalAND: createBinop(\"&&\", 3),\n  bitwiseOR: createBinop(\"|\", 4),\n  bitwiseXOR: createBinop(\"^\", 5),\n  bitwiseAND: createBinop(\"&\", 6),\n  equality: createBinop(\"==/!=/===/!==\", 7),\n  relational: createBinop(\"</>/<=/>=\", 8),\n  bitShift: createBinop(\"<</>>/>>>\", 9),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 10, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: new TokenType(\"%\", { beforeExpr, binop: 11, startsExpr }),\n  star: createBinop(\"*\", 11),\n  slash: createBinop(\"/\", 11),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 12,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 8 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 8 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b0000000000,\n             SCOPE_PROGRAM      = 0b0000000001,\n             SCOPE_FUNCTION     = 0b0000000010,\n             SCOPE_ASYNC        = 0b0000000100,\n             SCOPE_GENERATOR    = 0b0000001000,\n             SCOPE_ARROW        = 0b0000010000,\n             SCOPE_SIMPLE_CATCH = 0b0000100000,\n             SCOPE_SUPER        = 0b0001000000,\n             SCOPE_DIRECT_SUPER = 0b0010000000,\n             SCOPE_CLASS        = 0b0100000000,\n             SCOPE_TS_MODULE    = 0b1000000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ASYNC\n  | typeof SCOPE_GENERATOR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS;\n\nexport function functionFlags(isAsync: boolean, isGenerator: boolean) {\n  return (\n    SCOPE_FUNCTION |\n    (isAsync ? SCOPE_ASYNC : 0) |\n    (isGenerator ? SCOPE_GENERATOR : 0)\n  );\n}\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE           = 0b00000_0000_01,\n             BIND_KIND_TYPE            = 0b00000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR            = 0b00000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL        = 0b00000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION       = 0b00000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE        = 0b00000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE           = 0b00001_0000_00,\n             BIND_FLAGS_CLASS          = 0b00010_0000_00,\n             BIND_FLAGS_TS_ENUM        = 0b00100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM  = 0b01000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY = 0b10000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\n\nfunction isSimpleProperty(node: N.Node): boolean {\n  return (\n    node != null &&\n    node.type === \"Property\" &&\n    node.kind === \"init\" &&\n    node.method === false\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    estreeParseRegExpLiteral({ pattern, flags }: N.RegExpLiteral): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    estreeParseLiteral(value: any): N.Node {\n      return this.parseLiteral(value, \"Literal\");\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.value;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (isSimpleProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      const prop = ((method: any): N.EstreeProperty | N.EstreeMethodDefinition);\n      const paramCount = prop.kind === \"get\" ? 0 : 1;\n      const start = prop.start;\n      if (prop.value.params.length !== paramCount) {\n        if (prop.kind === \"get\") {\n          this.raise(start, \"getter must not have any formal parameters\");\n        } else {\n          this.raise(start, \"setter must have exactly one formal parameter\");\n        }\n      } else if (\n        prop.kind === \"set\" &&\n        prop.value.params[0].type === \"RestElement\"\n      ) {\n        this.raise(\n          start,\n          \"setter function argument must not be a rest parameter\",\n        );\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n      disallowLetBinding?: boolean,\n    ): void {\n      switch (expr.type) {\n        case \"ObjectPattern\":\n          expr.properties.forEach(prop => {\n            this.checkLVal(\n              prop.type === \"Property\" ? prop.value : prop,\n              bindingType,\n              checkClashes,\n              \"object destructuring pattern\",\n              disallowLetBinding,\n            );\n          });\n          break;\n        default:\n          super.checkLVal(\n            expr,\n            bindingType,\n            checkClashes,\n            contextDescription,\n            disallowLetBinding,\n          );\n      }\n    }\n\n    checkDuplicatedProto(\n      prop: N.ObjectMember | N.SpreadElement,\n      protoRef: { used: boolean, start?: number },\n    ): void {\n      if (\n        prop.type === \"SpreadElement\" ||\n        prop.computed ||\n        prop.method ||\n        // $FlowIgnore\n        prop.shorthand\n      ) {\n        return;\n      }\n\n      const key = prop.key;\n      // It is either an Identifier or a String/NumericLiteral\n      const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n      if (name === \"__proto__\" && prop.kind === \"init\") {\n        // Store the first redefinition's position\n        if (protoRef.used && !protoRef.start) {\n          protoRef.start = key.start;\n        }\n\n        protoRef.used = true;\n      }\n    }\n\n    isStrictBody(node: { body: N.BlockStatement }): boolean {\n      const isBlockStatement = node.body.type === \"BlockStatement\";\n\n      if (isBlockStatement && node.body.body.length > 0) {\n        for (const directive of node.body.body) {\n          if (\n            directive.type === \"ExpressionStatement\" &&\n            directive.expression.type === \"Literal\"\n          ) {\n            if (directive.expression.value === \"use strict\") return true;\n          } else {\n            // Break for the first non literal expression\n            break;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        (!stmt.expression.extra || !stmt.expression.extra.parenthesized)\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const directive = super.stmtToDirective(stmt);\n      const value = stmt.expression.value;\n\n      // Reset value to the actual value as in estree mode we want\n      // the stmt to have the real value and not the raw value\n      directive.value.value = value;\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: ?boolean,\n      topLevel: boolean,\n      end: TokenType,\n    ): void {\n      super.parseBlockBody(node, allowDirectives, topLevel, end);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parseExprAtom(refShorthandDefaultPos?: ?Pos): N.Expression {\n      switch (this.state.type) {\n        case tt.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case tt.num:\n        case tt.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case tt._null:\n          return this.estreeParseLiteral(null);\n\n        case tt._true:\n          return this.estreeParseLiteral(true);\n\n        case tt._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          return super.parseExprAtom(refShorthandDefaultPos);\n      }\n    }\n\n    parseLiteral<T: N.Literal>(\n      value: any,\n      type: /*T[\"kind\"]*/ string,\n      startPos?: number,\n      startLoc?: Position,\n    ): T {\n      const node = super.parseLiteral(value, type, startPos, startLoc);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n\n      type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n      return this.finishNode(node, type);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      containsEsc: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refShorthandDefaultPos: ?Pos,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refShorthandDefaultPos,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    toAssignable(\n      node: N.Node,\n      isBinding: ?boolean,\n      contextDescription: string,\n    ): N.Node {\n      if (isSimpleProperty(node)) {\n        this.toAssignable(node.value, isBinding, contextDescription);\n\n        return node;\n      }\n\n      return super.toAssignable(node, isBinding, contextDescription);\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isBinding: ?boolean,\n      isLast: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        throw this.raise(\n          prop.key.start,\n          \"Object pattern can't contain getter or setter\",\n        );\n      } else if (prop.method) {\n        throw this.raise(\n          prop.key.start,\n          \"Object pattern can't contain methods\",\n        );\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isBinding, isLast);\n      }\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nimport { types as tt } from \"./types\";\nimport { lineBreak } from \"../util/whitespace\";\n\nexport class TokContext {\n  constructor(\n    token: string,\n    isExpr?: boolean,\n    preserveSpace?: boolean,\n    override?: ?Function, // Takes a Tokenizer as a this-parameter, and returns void.\n  ) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n  token: string;\n  isExpr: boolean;\n  preserveSpace: boolean;\n  override: ?Function;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false),\n};\n\n// Token-specific context update code\n\ntt.parenR.updateContext = tt.braceR.updateContext = function() {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntt.name.updateContext = function(prevType) {\n  let allowed = false;\n  if (prevType !== tt.dot) {\n    if (\n      (this.state.value === \"of\" && !this.state.exprAllowed) ||\n      (this.state.value === \"yield\" && this.scope.inGenerator)\n    ) {\n      allowed = true;\n    }\n  }\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntt.braceL.updateContext = function(prevType) {\n  this.state.context.push(\n    this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.dollarBraceL.updateContext = function() {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntt.parenL.updateContext = function(prevType) {\n  const statementParens =\n    prevType === tt._if ||\n    prevType === tt._for ||\n    prevType === tt._with ||\n    prevType === tt._while;\n  this.state.context.push(\n    statementParens ? types.parenStatement : types.parenExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntt._function.updateContext = tt._class.updateContext = function(prevType) {\n  if (\n    prevType.beforeExpr &&\n    prevType !== tt.semi &&\n    prevType !== tt._else &&\n    !(\n      prevType === tt._return &&\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) &&\n    !(\n      (prevType === tt.colon || prevType === tt.braceL) &&\n      this.curContext() === types.b_stat\n    )\n  ) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntt.backQuote.updateContext = function() {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n  this.state.exprAllowed = false;\n};\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { keywords } from \"../tokenizer/types\";\n\nconst reservedWords = {\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\n\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport const isReservedWord = (word: string, inModule: boolean): boolean => {\n  return (inModule && word === \"await\") || word === \"enum\";\n};\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 0x80.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: $ReadOnlyArray<number>): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type Parser from \"../parser\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport type { Options } from \"../options\";\nimport type { Pos, Position } from \"../util/location\";\nimport type State from \"../tokenizer/state\";\nimport { types as tc } from \"../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../util/identifier\";\nimport {\n  functionFlags,\n  type BindingTypes,\n  BIND_NONE,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_ARROW,\n  SCOPE_OTHER,\n} from \"../util/scopeflags\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: State): boolean {\n  return (\n    (state.type === tt.name || !!state.type.keyword) && state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\";\n\n    constructor(options: ?Options, input: string) {\n      super(options, input);\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(tt.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (\n        moduloLoc.line !== checksLoc.line ||\n        moduloLoc.column !== checksLoc.column - 1\n      ) {\n        this.raise(\n          moduloPos,\n          \"Spaces between ´%´ and ´checks´ are not allowed here.\",\n        );\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              this.state.lastTokStart,\n              \"`declare module` cannot be used inside another `declare module`\",\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            \"Only declares and type imports are allowed inside declare module\",\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      const errorMessage =\n        \"Found both `declare module.exports` and `declare export` in the same module. \" +\n        \"Modules can only have 1 since they are either an ES module or they are a CommonJS module\";\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(bodyElement.start, errorMessage);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              \"Duplicate `declare module.exports` statement\",\n            );\n          }\n          if (kind === \"ES\") this.raise(bodyElement.start, errorMessage);\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n          this.unexpected(\n            this.state.start,\n            `\\`declare export ${label}\\` is not supported. Use \\`${suggestion}\\` instead`,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          this.state.start,\n          \"`_` is only allowed as a type argument to call or new\",\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      if (declaration) {\n        this.raise(startLoc, `Cannot overwrite reserved type ${word}`);\n        return;\n      }\n\n      this.raise(startLoc, `Unexpected reserved type ${word}`);\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(\n            nodeStart,\n            // eslint-disable-next-line max-len\n            \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n          );\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            \"Explicit inexact syntax must appear at the end of an inexact object\",\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in objec types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              \"Explicit inexact syntax cannot appear in class or interface definitions\",\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              this.state.lastTokStart,\n              \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n            );\n          }\n          if (variance) {\n            this.raise(\n              variance.start,\n              \"Explicit inexact syntax cannot have variance\",\n            );\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            this.state.lastTokStart,\n            \"Spread operator cannot appear in class or interface definitions\",\n          );\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, \"Spread properties cannot have variance\");\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, \"getter must not have any formal parameters\");\n        } else {\n          this.raise(start, \"setter must have exactly one formal parameter\");\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(\n          start,\n          \"setter function argument must not be a rest parameter\",\n        );\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        name = this.parseIdentifier();\n        if (this.eat(tt.question)) {\n          optional = true;\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(\n      params: N.FlowFunctionTypeParam[] = [],\n    ): { params: N.FlowFunctionTypeParam[], rest: ?N.FlowFunctionTypeParam } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n      return { params, rest };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              `Unexpected token, expected \"number\" or \"bigint\"`,\n            );\n          }\n\n          this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start,\n        startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      while (this.match(tt.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(tt.bracketL);\n        this.expect(tt.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      // Ensure that a brace after a function generic type annotation is a\n      // statement, except in arrow functions (noAnonFunctionType)\n      this.state.exprAllowed =\n        this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      } else {\n        const stmt = super.parseStatement(context, topLevel);\n        // We will parse a flow pragma in any comment before the first statement.\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n        return stmt;\n      }\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      // only use the expensive \"tryParse\" method if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() =>\n          super.parseConditional(expr, noIn, startPos, startLoc),\n        );\n\n        if (!result.node) {\n          // $FlowIgnore\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(\n            state.start,\n            \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n          );\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(noIn, undefined, undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssign();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        true,\n        \"arrow function parameters\",\n        node.extra?.trailingComma,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(functionFlags(false, false) | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\": {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type === \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          });\n        }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(\n      node: N.Node,\n      isBinding: ?boolean,\n      contextDescription: string,\n    ): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(\n          this.typeCastToParameter(node),\n          isBinding,\n          contextDescription,\n        );\n      } else {\n        return super.toAssignable(node, isBinding, contextDescription);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      isBinding: ?boolean,\n      contextDescription: string,\n      trailingCommaPos?: ?number,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr && expr.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(\n        exprList,\n        isBinding,\n        contextDescription,\n        trailingCommaPos,\n      );\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          (!expr.extra || !expr.extra.parenthesized) &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(\n            expr.typeAnnotation.start,\n            \"The type cast expression is expected to be wrapped with parenthesis\",\n          );\n        }\n      }\n\n      return exprList;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(\n          expr,\n          bindingType,\n          checkClashes,\n          contextDescription,\n        );\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      refShorthandDefaultPos: ?Pos,\n      containsEsc: boolean,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\")) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        refShorthandDefaultPos,\n        containsEsc,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(\n            param.start,\n            \"A binding pattern parameter cannot be optional in an implementation signature.\",\n          );\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          \"Type annotations must come before default assignments, \" +\n            \"e.g. instead of `age = 25: number` use `age: number = 25`\",\n        );\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        contextDescription,\n      );\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseIdentifier(true);\n\n      let specifierTypeKind = null;\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !this.state.type.keyword\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (\n        specifierTypeKind !== null &&\n        (this.match(tt.name) || this.state.type.keyword)\n      ) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          firstIdentLoc,\n          \"The `type` and `typeof` keywords on named imports can only be used on regular \" +\n            \"`import` statements. It cannot be used with `import type` or `import typeof` statements\",\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        \"import specifier\",\n      );\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      noIn?: ?boolean,\n      refShorthandDefaultPos?: ?Pos,\n      afterLeftParse?: Function,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () =>\n            super.parseMaybeAssign(\n              noIn,\n              refShorthandDefaultPos,\n              afterLeftParse,\n              refNeedsArrowPos,\n            ),\n          state,\n        );\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === tc.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if ((jsx && jsx.error) || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(() => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () =>\n              super.parseMaybeAssign(\n                noIn,\n                refShorthandDefaultPos,\n                afterLeftParse,\n                refNeedsArrowPos,\n              ),\n          );\n          arrowExpression.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(arrowExpression, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        const arrowExpression: ?N.ArrowFunctionExpression =\n          arrow.node && arrow.node.type === \"ArrowFunctionExpression\"\n            ? arrow.node\n            : null;\n\n        if (!arrow.error && arrowExpression) return arrowExpression;\n\n        // If we are here, both JSX and Flow parsing attemps failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx && jsx.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx && jsx.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          \"Expected an arrow function after this type parameter declaration\",\n        );\n      }\n\n      return super.parseMaybeAssign(\n        noIn,\n        refShorthandDefaultPos,\n        afterLeftParse,\n        refNeedsArrowPos,\n      );\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadRelational(\"<\")) {\n        this.expectPlugin(\"optionalChaining\");\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, \"Unterminated flow-comment\");\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(\n            null,\n            \"Cannot have a flow comment inside another flow comment\",\n          );\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, \"Unterminated comment\");\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, \"Unterminated comment\");\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` ` +\n          `or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using ` +\n          `\\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used ` +\n          `before in enum \\`${enumName}\\`.`,\n      );\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or ` +\n          `consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n      );\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      const suggestion =\n        `Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in ` +\n        `enum \\`${enumName}\\`.`;\n      const message =\n        suppliedType === null\n          ? `Supplied enum type is not valid. ${suggestion}`\n          : `Enum type \\`${suppliedType}\\` is not valid. ${suggestion}`;\n      return this.raise(pos, message);\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message =\n            `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of ` +\n            `\\`${memberName}\\` needs to be a ${explicitType} literal.`;\n          break;\n        case \"symbol\":\n          message =\n            `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in ` +\n            `enum \\`${enumName}\\`.`;\n          break;\n        default:\n          // null\n          message =\n            `The enum member initializer for \\`${memberName}\\` needs to be a literal (either ` +\n            `a boolean, number, or string) in enum \\`${enumName}\\`.`;\n      }\n      return this.raise(pos, message);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        `String enum members need to consistently either all use initializers, or use no initializers, ` +\n          `in enum \\`${enumName}\\`.`,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral();\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      booleanMembers: Array<N.Node>,\n      numberMembers: Array<N.Node>,\n      stringMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      while (!this.match(tt.braceR)) {\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return members;\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const members = this.flowEnumMembers({ enumName, explicitType });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport { TokenType, types as tt } from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Pos, Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore this contexts and tokens do always exist.\ntc.j_oTag = new TokContext(\"<tag\", false);\ntc.j_cTag = new TokContext(\"</tag\", false);\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntt.jsxName = new TokenType(\"jsxName\");\ntt.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntt.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntt.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntt.jsxTagStart.updateContext = function() {\n  this.state.context.push(tc.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(tc.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntt.jsxTagEnd.updateContext = function(prevType) {\n  const out = this.state.context.pop();\n  if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === tc.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, \"Unterminated JSX contents\");\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, \"Unterminated string constant\");\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(\n              node.start,\n              \"JSX attributes must only be assigned a non-empty expression\",\n            );\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(\n            this.state.start,\n            \"JSX value should be either an expression or a quoted JSX text\",\n          );\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        node.expression = this.parseExpression();\n      }\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            \"Expected corresponding JSX closing tag for <>\",\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            \"Expected corresponding JSX closing tag for <\" +\n              getQualifiedJSXName(openingElement.name) +\n              \">\",\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              \"Expected corresponding JSX closing tag for <\" +\n                getQualifiedJSXName(openingElement.name) +\n                \">\",\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          \"Adjacent JSX elements must be wrapped in an enclosing tag. \" +\n            \"Did you want a JSX fragment <>...</>?\",\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refShortHandDefaultPos: ?Pos): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refShortHandDefaultPos);\n      }\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (this.match(tt.braceL)) {\n        const curContext = this.curContext();\n        if (curContext === tc.j_oTag) {\n          this.state.context.push(tc.braceExpression);\n        } else if (curContext === tc.j_expr) {\n          this.state.context.push(tc.templateQuasi);\n        } else {\n          super.updateContext(prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(tt.slash) && prevType === tt.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(tc.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_ASYNC,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_GENERATOR,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlags;\n  // A list of var-declared names in the current lexical scope\n  var: string[] = [];\n  // A list of lexically-declared names in the current lexical scope\n  lexical: string[] = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: string[] = [];\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\ntype raiseFunction = (number, string) => void;\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  raise: raiseFunction;\n  inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get inGenerator() {\n    return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;\n  }\n  get inAsync() {\n    return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  +createScope: (flags: ScopeFlags) => IScope;\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, `Identifier '${name}' has already been declared`);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        scope.functions.indexOf(name) > -1 ||\n        scope.var.indexOf(name) > -1\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        (!this.treatFunctionsAsVarInScope(scope) &&\n          scope.var.indexOf(name) > -1)\n      );\n    }\n\n    return (\n      (scope.lexical.indexOf(name) > -1 &&\n        !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name)) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        scope.functions.indexOf(name) > -1)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1 &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      this.scopeStack[0].functions.indexOf(id.name) === -1\n    ) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (\n        (scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) &&\n        !(scope.flags & SCOPE_ARROW)\n      ) {\n        return scope;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: string[] = [];\n\n  // enums (which are also in .types)\n  enums: string[] = [];\n\n  // const enums (which are also in .enums and .types)\n  constEnums: string[] = [];\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: string[] = [];\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: string[] = [];\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.push(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].types.indexOf(id.name) === -1 &&\n      this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Pos, Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"public\"\n  | \"private\"\n  | \"protected\";\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return (\n        !this.hasPrecedingLineBreak() &&\n        !this.match(tt.parenL) &&\n        !this.match(tt.parenR) &&\n        !this.match(tt.colon) &&\n        !this.match(tt.eq) &&\n        !this.match(tt.question) &&\n        !this.match(tt.bang)\n      );\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(allowedModifiers: T[]): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (\n        allowedModifiers.indexOf(modifier) !== -1 &&\n        this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))\n      ) {\n        return modifier;\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers([\"public\"]);\n     *    this.tsParseModifiers([\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers<T: TsModifier>(\n      allowedModifiers: T[],\n    ): { [key: TsModifier]: ?true, __proto__: null } {\n      const modifiers = Object.create(null);\n\n      while (true) {\n        const startPos = this.state.start;\n        const modifier: ?T = this.tsParseModifier(allowedModifiers);\n\n        if (!modifier) break;\n\n        if (Object.hasOwnProperty.call(modifiers, modifier)) {\n          this.raise(startPos, `Duplicate modifier: '${modifier}'`);\n        }\n        modifiers[modifier] = true;\n      }\n\n      return modifiers;\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      while (true) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(\n          this.state.start,\n          \"Argument in a type import must be a string literal\",\n        );\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern,\" +\n                `instead got ${pattern.type}`,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma)) {\n        this.semicolon();\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (!readonly && (this.match(tt.parenL) || this.isRelational(\"<\"))) {\n        const method: N.TsMethodSignature = nodeAny;\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      const readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        if (readonly) node.readonly = true;\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      return this.tsParsePropertyOrMethodSignature(node, readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure:\n      //   No mandatory elements may follow optional elements\n      //   If there's a rest element, it must be at the end of the tuple\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        if (elementNode.type === \"TSOptionalType\") {\n          seenOptionalElement = true;\n        } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n          this.raise(\n            elementNode.start,\n            \"A required element cannot follow an optional element.\",\n          );\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType {\n      // parses `...TsType[]`\n      if (this.match(tt.ellipsis)) {\n        const restNode: N.TsRestType = this.startNode();\n        this.next(); // skips ellipsis\n        restNode.typeAnnotation = this.tsParseType();\n        if (\n          this.match(tt.comma) &&\n          this.lookaheadCharCode() !== charCodes.rightSquareBracket\n        ) {\n          this.raiseRestNotLast(this.state.start);\n        }\n        return this.finishNode(restNode, \"TSRestType\");\n      }\n\n      const type = this.tsParseType();\n      // parses `TsType?`\n      if (this.eat(tt.question)) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        this.expect(tt._new);\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      const templateNode = this.parseTemplate(false);\n      if (templateNode.expressions.length > 0) {\n        this.raise(\n          templateNode.expressions[0].start,\n          \"Template literal types cannot have any substitution\",\n        );\n      }\n      node.literal = templateNode;\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            if (this.lookahead().type !== tt.num) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(\n            node.start,\n            \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n          );\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.parseIdentifierName(typeParameter.start);\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      this.eat(operator);\n      let type = parseConstituentType();\n      if (this.match(operator)) {\n        const types = [type];\n        while (this.eat(operator)) {\n          types.push(parseConstituentType());\n        }\n        const node: N.TsUnionType | N.TsIntersectionType = this.startNodeAtNode(\n          type,\n        );\n        node.types = types;\n        type = this.finishNode(node, kind);\n      }\n      return type;\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const asserts = this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            const node: N.TsTypePredicate = this.startNodeAtNode(t);\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          const node: N.TsTypePredicate = this.startNodeAtNode(t);\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        const node = this.startNodeAtNode(t);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (\n        !this.match(tt.name) ||\n        this.state.value !== \"asserts\" ||\n        this.hasPrecedingLineBreak()\n      ) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          \"Escape sequence in keyword asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, `'${descriptor}' list cannot be empty.`);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_TS_INTERFACE,\n        undefined,\n        \"typescript interface declaration\",\n      );\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsExpectThenParseType(tt.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssign();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n        undefined,\n        \"typescript enum declaration\",\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          BIND_TS_NAMESPACE,\n          null,\n          \"module or namespace declaration\",\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        node.body = this.tsParseModuleBlock();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        node.body = this.tsParseModuleBlock();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_LEXICAL,\n        undefined,\n        \"import equals declaration\",\n      );\n      this.expect(tt.eq);\n      node.moduleReference = this.tsParseModuleReference();\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      switch (starttype) {\n        case tt._function:\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        case tt._class:\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to now how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        case tt._const:\n          if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n          }\n        // falls through\n        case tt._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n        case tt.name: {\n          const value = this.state.value;\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, /* next */ true);\n          }\n        }\n      }\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      switch (value) {\n        case \"abstract\":\n          if (this.tsCheckLineTerminatorAndMatch(tt._class, next)) {\n            const cls: N.ClassDeclaration = node;\n            cls.abstract = true;\n            if (next) {\n              this.next();\n              if (!this.match(tt._class)) {\n                this.unexpected(null, tt._class);\n              }\n            }\n            return this.parseClass(\n              cls,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (next) this.next();\n          if (this.match(tt.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminatorAndMatch(tokenType: TokenType, next: boolean) {\n      return (next || this.match(tokenType)) && !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      // This reads the next token after the `>` too, so do this in the enclosing context.\n      // But be sure not to parse a regex in the jsx expression `<C<number> />`, so set exprAllowed = false\n      this.state.exprAllowed = false;\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      if (allowModifiers) {\n        accessibility = this.parseAccessModifier();\n        readonly = !!this.tsParseModifier([\"readonly\"]);\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(\n            pp.start,\n            \"A parameter property may not be declared using a binding pattern.\",\n          );\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsync(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n              node.typeParameters = typeArguments;\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              return this.parseTaggedTemplateExpression(\n                startPos,\n                startLoc,\n                base,\n                state,\n                typeArguments,\n              );\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n      noIn: ?boolean,\n    ) {\n      if (\n        nonNull(tt._in.binop) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      if (this.match(tt.name) && this.lookahead().type === tt.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n      return super.parseImport(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.expect(tt._import);\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        this.parseClass(cls, true, true);\n        cls.abstract = true;\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const result = this.tsParseDeclaration(\n          this.startNode(),\n          this.state.value,\n          true,\n        );\n\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: { hadConstructor: boolean },\n      constructorAllowsSuper: boolean,\n    ): void {\n      const accessibility = this.parseAccessModifier();\n      if (accessibility) member.accessibility = accessibility;\n\n      super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: { hadConstructor: boolean },\n      isStatic: boolean,\n      constructorAllowsSuper: boolean,\n    ): void {\n      const modifiers = this.tsParseModifiers([\n        \"abstract\",\n        \"readonly\",\n        \"declare\",\n      ]);\n\n      Object.assign(member, modifiers);\n\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if (modifiers.abstract) {\n          this.raise(\n            member.start,\n            \"Index signatures cannot have the 'abstract' modifier\",\n          );\n        }\n        if (isStatic) {\n          this.raise(\n            member.start,\n            \"Index signatures cannot have the 'static' modifier\",\n          );\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            `Index signatures cannot have an accessibility modifier ('${\n              (member: any).accessibility\n            }')`,\n          );\n        }\n\n        return;\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member,\n        state,\n        isStatic,\n        constructorAllowsSuper,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(\n          methodOrProp.start,\n          \"Class methods cannot have the 'readonly' modifier\",\n        );\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(\n          methodOrProp.start,\n          \"Class methods cannot have the 'declare' modifier\",\n        );\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!refNeedsArrowPos || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          noIn,\n          startPos,\n          startLoc,\n          refNeedsArrowPos,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, noIn, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        // $FlowIgnore\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (node.declare && this.match(tt.equal)) {\n        this.raise(\n          this.state.start,\n          \"'declare' class fields cannot have an initializer\",\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(\n          node.start,\n          \"Private elements cannot have the 'abstract' modifier.\",\n        );\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          `Private elements cannot have an accessibility modifier ('${node.accessibility}')`,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (this.match(tt.jsxTagStart)) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!(jsx && jsx.error) && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          (expr.extra && expr.extra.parenthesized)\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters && typeParameters.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx && jsx.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast && typeCast.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx && jsx.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast && typeCast.thrown) throw typeCast.error;\n\n      throw (jsx && jsx.error) || arrow.error || (typeCast && typeCast.error);\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refShorthandDefaultPos?: ?Pos): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refShorthandDefaultPos);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(\n            param.start,\n            \"A binding pattern parameter cannot be optional in an implementation signature.\",\n          );\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    toAssignable(\n      node: N.Node,\n      isBinding: ?boolean,\n      contextDescription: string,\n    ): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(\n            this.typeCastToParameter(node),\n            isBinding,\n            contextDescription,\n          );\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isBinding, contextDescription);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(\n            node.expression,\n            isBinding,\n            contextDescription,\n          );\n          return node;\n        default:\n          return super.toAssignable(node, isBinding, contextDescription);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(\n            expr.parameter,\n            bindingType,\n            checkClashes,\n            \"parameter property\",\n          );\n          return;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          this.checkLVal(\n            expr.expression,\n            bindingType,\n            checkClashes,\n            contextDescription,\n          );\n          return;\n        default:\n          super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          \"Type annotations must come before default assignments, \" +\n            \"e.g. instead of `age = 25: number` use `age: number = 25`\",\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    toAssignableList(\n      exprList: N.Expression[],\n      isBinding: ?boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!isBinding) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(\n                expr.start,\n                \"Unexpected type cast in parameter position.\",\n              );\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr._exprListItem &&\n          expr.type === \"TsTypeCastExpression\"\n        ) {\n          this.raise(expr.start, \"Did not expect a type annotation here.\");\n        }\n      }\n\n      return exprList;\n    }\n\n    shouldParseArrow() {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const firstParam = method.params[0];\n      const hasContextParam =\n        firstParam &&\n        firstParam.type === \"Identifier\" &&\n        firstParam.name === \"this\";\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\n\ntt.placeholder = new TokenType(\"%%\", { startsExpr: true });\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, \"A class name is required\");\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers && specifiers.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { types as tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (\n    hasPlugin(plugins, \"pipelineOperator\") &&\n    !PIPELINE_PROPOSALS.includes(\n      getPluginOption(plugins, \"pipelineOperator\", \"proposal\"),\n    )\n  ) {\n    throw new Error(\n      \"'pipelineOperator' requires 'proposal' option whose value should be one of: \" +\n        PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> = Object.keys(\n  mixinPlugins,\n);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  options: Options;\n  inModule: boolean;\n  scope: ScopeHandler<*>;\n  plugins: PluginsMap;\n  filename: ?string;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  input: string;\n  length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\n\nfunction last<T>(stack: $ReadOnlyArray<T>): T {\n  return stack[stack.length - 1];\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(\n    node: Node,\n    elements: (Node | null)[],\n    // When the current node is followed by a token which hasn't a respective AST node, we\n    // need to take all the trailing comments to prevent them from being attached to an\n    // unrelated node. e.g. in\n    //     var { x } /* cmt */ = { y }\n    // we don't want /* cmt */ to be attached to { y }.\n    // On the other hand, in\n    //     fn(x) [new line] /* cmt */ [new line] y\n    // /* cmt */ is both a trailing comment of fn(x) and a leading comment of y\n    takeAllComments?: boolean,\n  ) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (\n        this.state.leadingComments[j].end < this.state.commentPreviousNode.end\n      ) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        // Perf: we don't need to splice if we are going to reset the array anyway\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n        node.trailingComments.push(leadingComment);\n      }\n    }\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node: Node): void {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n\n    const stack = this.state.commentStack;\n\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      // If the first comment in trailingComments comes after the\n      // current node, then we're good - all comments in the array will\n      // come after the node and so it's safe to add them as official\n      // trailingComments.\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        // Otherwise, if the first comment doesn't come after the\n        // current node, that means we have a mix of leading and trailing\n        // comments in the array and that leadingComments contains the\n        // same items as trailingComments. Reset trailingComments to\n        // zero items and we'll handle this by evaluating leadingComments\n        // later.\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n      if (\n        lastInStack.trailingComments &&\n        lastInStack.trailingComments[0].start >= node.end\n      ) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    // Eating the stack.\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    // Adjust comments that follow a trailing comma on the last element in a\n    // comma separated list of nodes to be the trailing comments on the last\n    // element\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (\n      this.state.commentPreviousNode &&\n      ((this.state.commentPreviousNode.type === \"ImportSpecifier\" &&\n        node.type !== \"ImportSpecifier\") ||\n        (this.state.commentPreviousNode.type === \"ExportSpecifier\" &&\n          node.type !== \"ExportSpecifier\"))\n    ) {\n      this.adjustCommentsAfterTrailingComma(\n        node,\n        [this.state.commentPreviousNode],\n        true,\n      );\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (\n          lastChild !== node &&\n          lastChild.leadingComments.length > 0 &&\n          last(lastChild.leadingComments).end <= node.start\n        ) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n          // so this takes back the leading comment.\n          // See also: https://github.com/eslint/espree/issues/158\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (\n              this.state.leadingComments[j].end <\n              this.state.commentPreviousNode.end\n            ) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        // https://github.com/eslint/espree/issues/2\n        //\n        // In special cases, such as return (without a value) and\n        // debugger, all comments will end up as leadingComments and\n        // will otherwise be eliminated. This step runs when the\n        // commentStack is empty and there are comments left\n        // in leadingComments.\n        //\n        // This loop figures out the stopping point between the actual\n        // leading and trailing comments by finding the location of the\n        // first comment that comes after the given node.\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        // Split the array based on the location of the first comment\n        // that comes after the node. Keep in mind that this could\n        // result in an empty array, and if so, the array must be\n        // deleted.\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        // Similarly, trailing comments are attached later. The variable\n        // must be reset to null if there are no trailing comments.\n        trailingComments = this.state.leadingComments.slice(i);\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (\n        trailingComments.length &&\n        trailingComments[0].start >= node.start &&\n        last(trailingComments).end <= node.end\n      ) {\n        node.innerComments = trailingComments;\n      } else {\n        node.trailingComments = trailingComments;\n      }\n    }\n\n    stack.push(node);\n  }\n}\n","// @flow\n\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\nexport default class LocationParser extends CommentsParser {\n  +isLookahead: boolean;\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(\n    pos: number,\n    message: string,\n    {\n      missingPluginNames,\n      code,\n    }: {\n      missingPluginNames?: Array<string>,\n      code?: string,\n    } = {},\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n\n    message += ` (${loc.line}:${loc.column})`;\n    // $FlowIgnore\n    const err: SyntaxError & { pos: number, loc: Position } = new SyntaxError(\n      message,\n    );\n    err.pos = pos;\n    err.loc = loc;\n    if (missingPluginNames) {\n      err.missingPlugin = missingPluginNames;\n    }\n    if (code !== undefined) {\n      err.code = code;\n    }\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport type { Token } from \"./index\";\nimport { types as tt, type TokenType } from \"./types\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: SyntaxError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  inParameters: boolean = false;\n  maybeInArrowParameters: boolean = false;\n  inPipeline: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  inClassProperty: boolean = false;\n  hasFlowComment: boolean = false;\n  isIterator: boolean = false;\n\n  // For the smartPipelines plugin:\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F# plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Check whether we are in a (nested) class or not.\n  classLevel: number = 0;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  yieldPos: number = -1;\n  awaitPos: number = -1;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  // Comment store.\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  trailingComments: Array<N.Comment> = [];\n  leadingComments: Array<N.Comment> = [];\n  commentStack: Array<{\n    start: number,\n    leadingComments: ?Array<N.Comment>,\n    trailingComments: ?Array<N.Comment>,\n    type: string,\n  }> = [];\n  // $FlowIgnore this is initialized when the parser starts.\n  commentPreviousNode: N.Node = null;\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  context: Array<TokContext> = [ct.braceStatement];\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // TODO\n  containsOctal: boolean = false;\n  octalPosition: ?number = null;\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  exportedIdentifiers: Array<string> = [];\n\n  invalidTemplateEscapePosition: ?number = null;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport { types as tt, keywords as keywordTypes, type TokenType } from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport LocationParser from \"../parser/location\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreak,\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  type: TokenType;\n  value: any;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends LocationParser {\n  // Forward-declarations\n  // parser/util.js\n  +unexpected: (pos?: ?number, messageOrType?: string | TokenType) => empty;\n\n  isLookahead: boolean;\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n      if (this.options.tokens) {\n        this.state.tokens.push(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  // TODO\n\n  lookahead(): State {\n    const old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    const thisTokEnd = this.state.pos;\n    skipWhiteSpace.lastIndex = thisTokEnd;\n    const skip = skipWhiteSpace.exec(this.input);\n    // $FlowIgnore: The skipWhiteSpace ensures to match any string\n    return thisTokEnd + skip[0].length;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (!this.match(tt.num) && !this.match(tt.string)) return;\n    this.state.pos = this.state.start;\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart =\n        this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n    this.nextToken();\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n    this.state.containsOctal = false;\n    this.state.octalPosition = null;\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    if (curContext.override) {\n      curContext.override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(\n    block: boolean,\n    text: string,\n    start: number,\n    end: number,\n    startLoc: Position,\n    endLoc: Position,\n  ): void {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc),\n    };\n\n    if (this.options.tokens) this.state.tokens.push(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment(): void {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, \"Unterminated comment\");\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n    while (\n      (match = lineBreakG.exec(this.input)) &&\n      match.index < this.state.pos\n    ) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      true,\n      this.input.slice(start + 2, end),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  skipLineComment(startSkip: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      false,\n      this.input.slice(start + startSkip, this.state.pos),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk:\n              this.skipBlockComment();\n              break;\n\n            case charCodes.slash:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, \"Unexpected digit after hash token\");\n    }\n\n    if (\n      (this.hasPlugin(\"classPrivateProperties\") ||\n        this.hasPlugin(\"classPrivateMethods\")) &&\n      this.state.classLevel > 0\n    ) {\n      ++this.state.pos;\n      this.finishToken(tt.hash);\n      return;\n    } else if (\n      this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\"\n    ) {\n      this.finishOp(tt.hash, 1);\n    } else {\n      throw this.raise(this.state.pos, \"Unexpected character '#'\");\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    // '/'\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    let ch = this.input.charCodeAt(this.state.pos);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !exprAllowed) {\n      width++;\n      type = tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (\n        next === charCodes.dash &&\n        !this.inModule &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan &&\n        (this.state.lastTokEnd === 0 ||\n          lineBreak.test(\n            this.input.slice(this.state.lastTokEnd, this.state.pos),\n          ))\n      ) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (\n      next === charCodes.exclamationMark &&\n      code === charCodes.lessThan &&\n      !this.inModule &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dash &&\n      this.input.charCodeAt(this.state.pos + 3) === charCodes.dash\n    ) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark && !this.state.inType) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketL);\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceL);\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float.\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      `Unexpected character '${String.fromCodePoint(code)}'`,\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.pos;\n    let escaped, inClass;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, \"Unterminated regular expression\");\n      }\n      const ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, \"Unterminated regular expression\");\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, \"Duplicate regular expression flag\");\n        }\n      } else if (\n        isIdentifierChar(charCode) ||\n        charCode === charCodes.backslash\n      ) {\n        this.raise(this.state.pos + 1, \"Invalid regular expression flag\");\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        if (code === charCodes.underscore) {\n          const prev = this.input.charCodeAt(this.state.pos - 1);\n          const next = this.input.charCodeAt(this.state.pos + 1);\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(\n              this.state.pos,\n              \"A numeric separator is only allowed between two digits\",\n            );\n          } else if (\n            forbiddenSiblings.indexOf(prev) > -1 ||\n            forbiddenSiblings.indexOf(next) > -1 ||\n            Number.isNaN(next)\n          ) {\n            this.raise(\n              this.state.pos,\n              \"A numeric separator is only allowed between two digits\",\n            );\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(\n              this.state.pos,\n              \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n            );\n          }\n\n          // Ignore this _ character\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(\n            this.state.start + i + 2,\n            \"Expected number in radix \" + radix,\n          );\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, \"Expected number in radix \" + radix);\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (this.input.charCodeAt(this.state.pos) === charCodes.lowercaseN) {\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, \"Identifier directly after number\");\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isNonOctalDecimalInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, \"Invalid number\");\n    }\n    let octal =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n    if (octal) {\n      if (this.state.strict) {\n        this.raise(\n          start,\n          \"Legacy octal literals are not allowed in strict mode\",\n        );\n      }\n      if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n        octal = false;\n        isNonOctalDecimalInt = true;\n      }\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !octal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    // disallow numeric separators in non octal decimals and legacy octal likes\n    if (this.hasPlugin(\"numericSeparator\") && (octal || isNonOctalDecimalInt)) {\n      const underscorePos = this.input\n        .slice(start, this.state.pos)\n        .indexOf(\"_\");\n      if (underscorePos > 0) {\n        this.raise(\n          underscorePos + start,\n          \"Numeric separator can not be used after leading 0\",\n        );\n      }\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (next === charCodes.lowercaseN) {\n        // disallow floats, legacy octal syntax and non octal decimals\n        // new style octal (\"0o\") is handled in this.readRadixNumber\n        if (isFloat || octal || isNonOctalDecimalInt) {\n          this.raise(start, \"Invalid BigIntLiteral\");\n        }\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, \"Identifier directly after number\");\n    }\n\n    // remove \"_\" for numeric literal separator, and \"n\" for BigInts\n    const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    const val = octal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code === null) {\n        // $FlowFixMe (is this always non-null?)\n        --this.state.invalidTemplateEscapePosition; // to point to the '\\'' instead of the 'u'\n      } else if (code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, \"Code point out of bounds\");\n        } else {\n          this.state.invalidTemplateEscapePosition = codePos - 2;\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, \"Unterminated string constant\");\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, \"Unterminated string constant\");\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, \"Unterminated template\");\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          const codePos = this.state.pos - 1;\n\n          this.state.invalidTemplateEscapePosition = codePos;\n          return null;\n        }\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          // $FlowFixMe\n          let octalStr = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/)[0];\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              this.state.invalidTemplateEscapePosition = codePos;\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, \"Octal literal in strict mode\");\n            } else if (!this.state.containsOctal) {\n              // These properties are only used to throw an error for an octal which occurs\n              // in a directive which occurs prior to a \"use strict\" directive.\n              this.state.containsOctal = true;\n              this.state.octalPosition = codePos;\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, \"Bad character escape sequence\");\n      } else {\n        this.state.pos = codePos - 1;\n        this.state.invalidTemplateEscapePosition = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  readWord1(): string {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === charCodes.atSign) {\n        ++this.state.pos;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(\n            this.state.pos,\n            \"Expecting Unicode escape sequence \\\\uXXXX\",\n          );\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, \"Invalid Unicode escape\");\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word: string): boolean {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(): void {\n    const word = this.readWord1();\n    const type = keywordTypes.get(word) || tt.name;\n\n    // Allow @@iterator and @@asyncIterator as a identifier only inside type\n    if (\n      this.state.isIterator &&\n      (!this.isIterator(word) || !this.state.inType)\n    ) {\n      this.raise(this.state.pos, `Invalid identifier ${word}`);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const kw = this.state.type.keyword;\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, `Escape sequence in keyword ${kw}`);\n    }\n  }\n\n  braceIsBlock(prevType: TokenType): boolean {\n    const parent = this.curContext();\n    if (parent === ct.functionExpression || parent === ct.functionStatement) {\n      return true;\n    }\n    if (\n      prevType === tt.colon &&\n      (parent === ct.braceStatement || parent === ct.braceExpression)\n    ) {\n      return !parent.isExpr;\n    }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (\n      prevType === tt._return ||\n      (prevType === tt.name && this.state.exprAllowed)\n    ) {\n      return lineBreak.test(\n        this.input.slice(this.state.lastTokEnd, this.state.start),\n      );\n    }\n\n    if (\n      prevType === tt._else ||\n      prevType === tt.semi ||\n      prevType === tt.eof ||\n      prevType === tt.parenR ||\n      prevType === tt.arrow\n    ) {\n      return true;\n    }\n\n    if (prevType === tt.braceL) {\n      return parent === ct.braceStatement;\n    }\n\n    if (\n      prevType === tt._var ||\n      prevType === tt._const ||\n      prevType === tt.name\n    ) {\n      return false;\n    }\n\n    if (prevType === tt.relational) {\n      // `class C<T> { ... }`\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType: TokenType): void {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === tt.dot || prevType === tt.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if ((update = type.updateContext)) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpace } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport * as charCodes from \"charcodes\";\n\nconst literal = /^('|\")((?:\\\\?.)*?)\\1/;\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  isLookaheadRelational(op: \"<\" | \">\"): boolean {\n    const next = this.nextTokenStart();\n    if (this.input.charAt(next) === op) {\n      if (next + 1 === this.input.length) {\n        return true;\n      }\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== op.charCodeAt(0) && afterNext !== charCodes.equalsTo;\n    }\n    return false;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // eat() for relational operators.\n\n  eatRelational(op: \"<\" | \">\"): boolean {\n    if (this.isRelational(op)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    return (\n      this.input.slice(nameStart, nameEnd) === name &&\n      (nameEnd === this.input.length ||\n        !isIdentifierChar(this.input.charCodeAt(nameEnd)))\n    );\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, message?: string): void {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(): void {\n    if (!this.isLineTerminator()) this.unexpected(null, tt.semi);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: string | TokenType = \"Unexpected token\",\n  ): empty {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raise(\n        pos != null ? pos : this.state.start,\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n        { missingPluginNames: [name] },\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raise(\n        pos != null ? pos : this.state.start,\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n        { missingPluginNames: names },\n      );\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (\n      this.state.yieldPos !== -1 &&\n      (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)\n    ) {\n      this.raise(\n        this.state.yieldPos,\n        \"Yield cannot be used as name inside a generator function\",\n      );\n    }\n    if (this.state.awaitPos !== -1) {\n      this.raise(\n        this.state.awaitPos,\n        \"Await cannot be used as name inside an async function\",\n      );\n    }\n  }\n\n  strictDirective(start: number): boolean {\n    for (;;) {\n      // Try to find string literal.\n      skipWhiteSpace.lastIndex = start;\n      // $FlowIgnore\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      const match = literal.exec(this.input.slice(start));\n      if (!match) break;\n      if (match[2] === \"use strict\") return true;\n      start += match[0].length;\n\n      // Skip semicolon, if any.\n      skipWhiteSpace.lastIndex = start;\n      // $FlowIgnore\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      if (this.input[start] === \";\") {\n        start++;\n      }\n    }\n\n    return false;\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, SyntaxError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: SyntaxError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser && parser.options.ranges) this.range = [pos, 0];\n    if (parser && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n  range: [number, number];\n  leadingComments: Array<Comment>;\n  trailingComments: Array<Comment>;\n  innerComments: Array<Comment>;\n  extra: { [key: string]: any };\n\n  __clone(): this {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // $FlowIgnore\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  ObjectExpression,\n  ObjectPattern,\n  Pattern,\n  RestElement,\n  SpreadElement,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssign: (\n    noIn?: ?boolean,\n    refShorthandDefaultPos?: ?Pos,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObj: <T: ObjectPattern | ObjectExpression>(\n    isPattern: boolean,\n    refShorthandDefaultPos?: ?Pos,\n  ) => T;\n  // Forward-declaration: defined in statement.js\n  +parseDecorator: () => Decorator;\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n  // NOTE: There is a corresponding \"isAssignable\" method in flow.js.\n  // When this one is updated, please check if also that one needs to be updated.\n\n  toAssignable(\n    node: Node,\n    isBinding: ?boolean,\n    contextDescription: string,\n  ): Node {\n    if (node) {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          break;\n\n        case \"ObjectExpression\":\n          node.type = \"ObjectPattern\";\n          for (\n            let i = 0, length = node.properties.length, last = length - 1;\n            i < length;\n            i++\n          ) {\n            const prop = node.properties[i];\n            const isLast = i === last;\n            this.toAssignableObjectExpressionProp(prop, isBinding, isLast);\n\n            if (\n              isLast &&\n              prop.type === \"RestElement\" &&\n              node.extra?.trailingComma\n            ) {\n              this.raiseRestNotLast(node.extra.trailingComma);\n            }\n          }\n          break;\n\n        case \"ObjectProperty\":\n          this.toAssignable(node.value, isBinding, contextDescription);\n          break;\n\n        case \"SpreadElement\": {\n          this.checkToRestConversion(node);\n\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isBinding, contextDescription);\n          break;\n        }\n\n        case \"ArrayExpression\":\n          node.type = \"ArrayPattern\";\n          this.toAssignableList(\n            node.elements,\n            isBinding,\n            contextDescription,\n            node.extra?.trailingComma,\n          );\n          break;\n\n        case \"AssignmentExpression\":\n          if (node.operator !== \"=\") {\n            this.raise(\n              node.left.end,\n              \"Only '=' operator can be used for specifying default value.\",\n            );\n          }\n\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          this.toAssignable(node.left, isBinding, contextDescription);\n          break;\n\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(\n            node.expression,\n            isBinding,\n            contextDescription,\n          );\n          break;\n\n        case \"MemberExpression\":\n          if (!isBinding) break;\n\n        default:\n        // We don't know how to deal with this node. It will\n        // be reported by a later call to checkLVal\n      }\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isBinding: ?boolean,\n    isLast: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? \"Object pattern can't contain getter or setter\"\n          : \"Object pattern can't contain methods\";\n\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isBinding, \"object destructuring pattern\");\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    isBinding: ?boolean,\n    contextDescription: string,\n    trailingCommaPos?: ?number,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last && last.type === \"RestElement\") {\n        --end;\n      } else if (last && last.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg, isBinding, contextDescription);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isBinding, contextDescription);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): $ReadOnlyArray<?Expression> {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr && expr.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n\n    return exprList;\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refShorthandDefaultPos: ?Pos,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(\n      false,\n      refShorthandDefaultPos,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObj(true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(\n            this.state.start,\n            \"Stage 2 decorators cannot be used to decorate parameters\",\n          );\n        }\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  checkLVal(\n    expr: Expression,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?{ [key: string]: boolean },\n    contextDescription: string,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(expr.name, this.inModule)\n            : isStrictBindOnlyReservedWord(expr.name))\n        ) {\n          this.raise(\n            expr.start,\n            `${bindingType === BIND_NONE ? \"Assigning to\" : \"Binding\"} '${\n              expr.name\n            }' in strict mode`,\n          );\n        }\n\n        if (checkClashes) {\n          // we need to prefix this with an underscore for the cases where we have a key of\n          // `__proto__`. there's a bug in old V8 where the following wouldn't work:\n          //\n          //   > var obj = Object.create(null);\n          //   undefined\n          //   > obj.__proto__\n          //   null\n          //   > obj.__proto__ = true;\n          //   true\n          //   > obj.__proto__\n          //   null\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, \"Argument name clash\");\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(\n            expr.start,\n            \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n          );\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, \"Binding member expression\");\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (prop.type === \"ObjectProperty\") prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (prop.type === \"ObjectMethod\") continue;\n\n          this.checkLVal(\n            prop,\n            bindingType,\n            checkClashes,\n            \"object destructuring pattern\",\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              bindingType,\n              checkClashes,\n              \"array destructuring pattern\",\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          bindingType,\n          checkClashes,\n          \"assignment pattern\",\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          bindingType,\n          checkClashes,\n          \"rest element\",\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          bindingType,\n          checkClashes,\n          \"parenthesized expression\",\n        );\n        break;\n\n      default: {\n        const message =\n          (bindingType === BIND_NONE\n            ? \"Invalid\"\n            : /* istanbul ignore next */ \"Binding invalid\") +\n          \" left-hand side\" +\n          (contextDescription\n            ? \" in \" + contextDescription\n            : /* istanbul ignore next */ \"expression\");\n        this.raise(expr.start, message);\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, \"Invalid rest operator's argument\");\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, `Rest element must be last element`);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, `Unexpected trailing comma after rest element`);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport { types as ct } from \"../tokenizer/context\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport type { Pos, Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  functionFlags,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n} from \"../util/scopeflags\";\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n\n  // Check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  checkDuplicatedProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    protoRef: { used: boolean, start?: number },\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      prop.computed ||\n      prop.kind ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\") {\n      // Store the first redefinition's position\n      if (protoRef.used && !protoRef.start) {\n        protoRef.start = key.start;\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression {\n    this.scope.enter(SCOPE_PROGRAM);\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initialization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n  parseExpression(noIn?: boolean, refShorthandDefaultPos?: Pos): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(\n          this.parseMaybeAssign(noIn, refShorthandDefaultPos),\n        );\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  parseMaybeAssign(\n    noIn?: ?boolean,\n    refShorthandDefaultPos?: ?Pos,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.scope.inGenerator) {\n        let left = this.parseYield(noIn);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      } else {\n        // The tokenizer will assume an expression is allowed after\n        // `yield`, but this isn't that kind of yield\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let failOnShorthandAssign;\n    if (refShorthandDefaultPos) {\n      failOnShorthandAssign = false;\n    } else {\n      refShorthandDefaultPos = { start: 0 };\n      failOnShorthandAssign = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(\n      noIn,\n      refShorthandDefaultPos,\n      refNeedsArrowPos,\n    );\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"nullishCoalescingOperator\");\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      node.left = this.match(tt.eq)\n        ? this.toAssignable(left, undefined, \"assignment expression\")\n        : left;\n\n      if (refShorthandDefaultPos.start >= node.left.start) {\n        refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n\n      const maybePattern = unwrapParenthesizedExpression(left);\n\n      let patternErrorMsg;\n      if (maybePattern.type === \"ObjectPattern\") {\n        patternErrorMsg = \"`({a}) = 0` use `({a} = 0)`\";\n      } else if (maybePattern.type === \"ArrayPattern\") {\n        patternErrorMsg = \"`([a]) = 0` use `([a] = 0)`\";\n      }\n\n      if (\n        patternErrorMsg &&\n        ((left.extra && left.extra.parenthesized) ||\n          left.type === \"ParenthesizedExpression\")\n      ) {\n        this.raise(\n          maybePattern.start,\n          `You're trying to assign to a parenthesized expression, eg. instead of ${patternErrorMsg}`,\n        );\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  parseMaybeConditional(\n    noIn: ?boolean,\n    refShorthandDefaultPos: Pos,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(noIn, refShorthandDefaultPos);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n\n    return this.parseConditional(\n      expr,\n      noIn,\n      startPos,\n      startLoc,\n      refNeedsArrowPos,\n    );\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    noIn: ?boolean,\n    startPos: number,\n    startLoc: Position,\n    // FIXME: Disabling this for now since can't seem to get it to play nicely\n    // eslint-disable-next-line no-unused-vars\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n\n  parseExprOps(noIn: ?boolean, refShorthandDefaultPos: Pos): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refShorthandDefaultPos);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const prec = this.state.type.binop;\n    if (prec != null && (!noIn || !this.match(tt._in))) {\n      if (prec > minPrec) {\n        const operator = this.state.value;\n        if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n          return left;\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = operator;\n        if (\n          operator === \"**\" &&\n          left.type === \"UnaryExpression\" &&\n          (this.options.createParenthesizedExpressions ||\n            !(left.extra && left.extra.parenthesized))\n        ) {\n          this.raise(\n            left.argument.start,\n            \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n          );\n        }\n\n        const op = this.state.type;\n\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        } else if (op === tt.nullishCoalescing) {\n          this.expectPlugin(\"nullishCoalescingOperator\");\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.scope.inAsync\n          ) {\n            throw this.raise(\n              this.state.start,\n              `Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal`,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec, noIn);\n\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * b && c => This is considered as a logical expression in the ast tree\n         * a => Identifier\n         * so for ?? operator we need to check in this case the right expression to have parenthesis\n         * second case a && b ?? c\n         * here a && b => This is considered as a logical expression in the ast tree\n         * c => identifier\n         * so now here for ?? operator we need to check the left expression to have parenthesis\n         * if the parenthesis is missing we raise an error and throw it\n         */\n        if (op === tt.nullishCoalescing) {\n          if (\n            left.type === \"LogicalExpression\" &&\n            left.operator !== \"??\" &&\n            !(left.extra && left.extra.parenthesized)\n          ) {\n            throw this.raise(\n              left.start,\n              `Nullish coalescing operator(??) requires parens when mixing with logical operators`,\n            );\n          } else if (\n            node.right.type === \"LogicalExpression\" &&\n            node.right.operator !== \"??\" &&\n            !(node.right.extra && node.right.extra.parenthesized)\n          ) {\n            throw this.raise(\n              node.right.start,\n              `Nullish coalescing operator(??) requires parens when mixing with logical operators`,\n            );\n          }\n        }\n\n        this.finishNode(\n          node,\n          op === tt.logicalOR ||\n            op === tt.logicalAND ||\n            op === tt.nullishCoalescing\n            ? \"LogicalExpression\"\n            : \"BinaryExpression\",\n        );\n\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(\n                this.parseExprOpBaseRightExpr(op, prec, noIn),\n                startPos,\n                startLoc,\n              );\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec, noIn);\n            });\n        }\n      // falls through\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec, noIn);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      op.rightAssociative ? prec - 1 : prec,\n      noIn,\n    );\n  }\n\n  // Parse unary operators, both prefix and postfix.\n\n  parseMaybeUnary(refShorthandDefaultPos: ?Pos): N.Expression {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    } else if (this.state.type.prefix) {\n      const node = this.startNode();\n      const update = this.match(tt.incDec);\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (node.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      this.next();\n\n      node.argument = this.parseMaybeUnary();\n\n      if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n        this.unexpected(refShorthandDefaultPos.start);\n      }\n\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && node.operator === \"delete\") {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, \"Deleting local variable in strict mode\");\n        } else if (\n          arg.type === \"MemberExpression\" &&\n          arg.property.type === \"PrivateName\"\n        ) {\n          this.raise(node.start, \"Deleting a private field is not allowed\");\n        }\n      }\n\n      return this.finishNode(\n        node,\n        update ? \"UpdateExpression\" : \"UnaryExpression\",\n      );\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refShorthandDefaultPos);\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  parseExprSubscripts(refShorthandDefaultPos: ?Pos): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refShorthandDefaultPos);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsync(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(\n        this.finishNode(node, \"BindExpression\"),\n        startPos,\n        startLoc,\n        noCalls,\n      );\n    } else if (this.match(tt.questionDot)) {\n      this.expectPlugin(\"optionalChaining\");\n      state.optionalChainMember = true;\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        state.stop = true;\n        return base;\n      }\n      this.next();\n\n      const node = this.startNodeAt(startPos, startLoc);\n\n      if (this.eat(tt.bracketL)) {\n        node.object = base;\n        node.property = this.parseExpression();\n        node.computed = true;\n        node.optional = true;\n        this.expect(tt.bracketR);\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else if (this.eat(tt.parenL)) {\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else {\n        node.object = base;\n        node.property = this.parseIdentifier(true);\n        node.computed = false;\n        node.optional = true;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n    } else if (this.eat(tt.dot)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseMaybePrivateName();\n      node.computed = false;\n      if (\n        node.property.type === \"PrivateName\" &&\n        node.object.type === \"Super\"\n      ) {\n        this.raise(startPos, \"Private fields can't be accessed on super\");\n      }\n      if (state.optionalChainMember) {\n        node.optional = false;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n      return this.finishNode(node, \"MemberExpression\");\n    } else if (this.eat(tt.bracketL)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseExpression();\n      node.computed = true;\n      this.expect(tt.bracketR);\n      if (state.optionalChainMember) {\n        node.optional = false;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n      return this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.match(tt.parenL)) {\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n\n      this.next();\n\n      let node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        state.maybeAsyncArrow,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n      );\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow()) {\n        state.stop = true;\n\n        node = this.parseAsyncArrowFromCallExpression(\n          this.startNodeAt(startPos, startLoc),\n          node,\n        );\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n\n        // We keep the old value if it isn't null, for cases like\n        //   (x = async(yield)) => {}\n        //\n        // Hi developer of the future :) If you are implementing generator\n        // arrow functions, please read the note below about \"await\" and\n        // verify if the same logic is needed for yield.\n        if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n        // Await is trickier than yield. When parsing a possible arrow function\n        // (e.g. something starting with `async(`) we don't know if its possible\n        // parameters will actually be inside an async arrow function or if it is\n        // a normal call expression.\n        // If it ended up being a call expression, if we are in a context where\n        // await expression are disallowed (and thus \"await\" is an identifier)\n        // we must be careful not to leak this.state.awaitPos to an even outer\n        // context, where \"await\" could not be an identifier.\n        // For example, this code is valid because \"await\" isn't directly inside\n        // an async function:\n        //\n        //     async function a() {\n        //       function b(param = async (await)) {\n        //       }\n        //     }\n        //\n        if (\n          (!this.isAwaitAllowed() && !oldMaybeInArrowParameters) ||\n          oldAwaitPos !== -1\n        ) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      return node;\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        startPos,\n        startLoc,\n        base,\n        state,\n      );\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseTaggedTemplateExpression(\n    startPos: number,\n    startLoc: Position,\n    base: N.Expression,\n    state: N.ParseSubscriptState,\n    typeArguments?: ?N.TsTypeParameterInstantiation,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (typeArguments) node.typeParameters = typeArguments;\n    if (state.optionalChainMember) {\n      this.raise(\n        startPos,\n        \"Tagged Template Literals are not allowed in optionalChain\",\n      );\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsync(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      this.input.slice(base.start, base.end) === \"async\"\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, \"import() requires exactly one argument\");\n      } else {\n        const importArg = node.arguments[0];\n        if (importArg && importArg.type === \"SpreadElement\") {\n          this.raise(importArg.start, \"... is not allowed in import()\");\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    possibleAsyncArrow: boolean,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (dynamicImport) {\n            this.raise(\n              this.state.lastTokStart,\n              \"Trailing comma is disallowed inside import(...) arguments\",\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      // we need to make sure that if this is an async arrow functions,\n      // that we don't allow inner parens inside the params\n      if (this.match(tt.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(\n        this.parseExprListItem(\n          false,\n          possibleAsyncArrow ? { start: 0 } : undefined,\n          possibleAsyncArrow ? { start: 0 } : undefined,\n          allowPlaceholder,\n        ),\n      );\n    }\n\n    // we found an async arrow function so let's not allow any inner parens\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  parseExprAtom(refShorthandDefaultPos?: ?Pos): N.Expression {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.state.type === tt.slash) this.readRegexp();\n\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        node = this.startNode();\n        this.next();\n        if (\n          this.match(tt.parenL) &&\n          !this.scope.allowDirectSuper &&\n          !this.options.allowSuperOutsideMethod\n        ) {\n          this.raise(\n            node.start,\n            \"super() is only valid inside a class constructor of a subclass. \" +\n              \"Maybe a typo in the method name ('constructor') or not extending another class?\",\n          );\n        } else if (\n          !this.scope.allowSuper &&\n          !this.options.allowSuperOutsideMethod\n        ) {\n          this.raise(\n            node.start,\n            \"super is only allowed in object methods and classes\",\n          );\n        }\n\n        if (\n          !this.match(tt.parenL) &&\n          !this.match(tt.bracketL) &&\n          !this.match(tt.dot)\n        ) {\n          this.raise(\n            node.start,\n            \"super can only be used with function calls (i.e. super()) or \" +\n              \"in property accesses (i.e. super.prop or super[prop])\",\n          );\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        this.expectPlugin(\"dynamicImport\", node.start);\n\n        if (!this.match(tt.parenL)) {\n          this.unexpected(null, tt.parenL);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        node = this.startNode();\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt._function) &&\n          !this.canInsertSemicolon()\n        ) {\n          const last = this.state.context.length - 1;\n          if (this.state.context[last] !== ct.functionStatement) {\n            // Since \"async\" is an identifier and normally identifiers\n            // can't be followed by expression, the tokenizer assumes\n            // that \"function\" starts a statement.\n            // Fixing it in the tokenizer would mean tracking not only the\n            // previous token (\"async\"), but also the one before to know\n            // its beforeExpr value.\n            // It's easier and more efficient to adjust the context here.\n            throw new Error(\"Internal error\");\n          }\n          this.state.context[last] = ct.functionExpression;\n\n          this.next();\n          return this.parseFunction(node, undefined, true);\n        } else if (\n          canBeArrow &&\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt.name) &&\n          !this.canInsertSemicolon()\n        ) {\n          const params = [this.parseIdentifier()];\n          this.expect(tt.arrow);\n          // let foo = async bar => {};\n          this.parseArrowExpression(node, params, true);\n          return node;\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          this.parseArrowExpression(node, [id], false);\n          return node;\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        this.expectPlugin(\"doExpressions\");\n        const node = this.startNode();\n        this.next();\n        const oldLabels = this.state.labels;\n        this.state.labels = [];\n        node.body = this.parseBlock();\n        this.state.labels = oldLabels;\n        return this.finishNode(node, \"DoExpression\");\n      }\n\n      case tt.regexp: {\n        const value = this.state.value;\n        node = this.parseLiteral(value.value, \"RegExpLiteral\");\n        node.pattern = value.pattern;\n        node.flags = value.flags;\n        return node;\n      }\n\n      case tt.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case tt.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case tt.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case tt._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case tt._true:\n      case tt._false:\n        return this.parseBooleanLiteral();\n\n      case tt.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case tt.bracketL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        node = this.startNode();\n        this.next();\n        node.elements = this.parseExprList(\n          tt.bracketR,\n          true,\n          refShorthandDefaultPos,\n          node,\n        );\n        if (!this.state.maybeInArrowParameters) {\n          // This could be an array pattern:\n          //   ([a: string, b: string]) => {}\n          // In this case, we don't have to call toReferencedList. We will\n          // call it, if needed, when we are sure that it is a parenthesized\n          // expression by calling toReferencedListDeep.\n          this.toReferencedList(node.elements);\n        }\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return this.finishNode(node, \"ArrayExpression\");\n      }\n      case tt.braceL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        const ret = this.parseObj(false, refShorthandDefaultPos);\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return ret;\n      }\n      case tt._function:\n        return this.parseFunctionExpression();\n\n      case tt.at:\n        this.parseDecorators();\n\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNew();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(\n            callee.start,\n            \"Binding should be performed on object property.\",\n          );\n        }\n      }\n\n      case tt.hash: {\n        if (this.state.inPipeline) {\n          node = this.startNode();\n\n          if (\n            this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\"\n          ) {\n            this.raise(\n              node.start,\n              \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n            );\n          }\n\n          this.next();\n\n          if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n            this.raise(\n              node.start,\n              `Topic reference was used in a lexical context without topic binding`,\n            );\n          }\n\n          this.registerTopicReference();\n          return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n        }\n      }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBooleanLiteral(): N.BooleanLiteral {\n    const node = this.startNode();\n    node.value = this.match(tt._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionExpression(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionExpression\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"function\");\n\n    if (this.scope.inGenerator && this.eat(tt.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        `The only valid meta property for ${meta.name} is ${meta.name}.${propertyName}`,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.expect(tt.dot);\n\n    if (this.isContextual(\"meta\")) {\n      this.expectPlugin(\"importMeta\");\n\n      if (!this.inModule) {\n        this.raise(\n          id.start,\n          `import.meta may appear only with 'sourceType: \"module\"'`,\n          { code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\" },\n        );\n      }\n      this.sawUnambiguousESM = true;\n    } else if (!this.hasPlugin(\"importMeta\")) {\n      this.raise(\n        id.start,\n        `Dynamic imports require a parameter: import('a.js')`,\n      );\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral<T: N.Literal>(\n    value: any,\n    type: /*T[\"kind\"]*/ string,\n    startPos?: number,\n    startLoc?: Position,\n  ): T {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.expect(tt.parenL);\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refShorthandDefaultPos = { start: 0 };\n    const refNeedsArrowPos = { start: 0 };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma, refNeedsArrowPos.start || null);\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssign(\n            false,\n            refShorthandDefaultPos,\n            this.parseParenItem,\n            refNeedsArrowPos,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.start;\n    const innerEndLoc = this.state.startLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow() &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      for (const param of exprList) {\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    // We keep the old value if it isn't null, for cases like\n    //   (x = (yield)) => {}\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    if (refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  parseNew(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"new\");\n\n    if (this.eat(tt.dot)) {\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.state.inClassProperty) {\n        let error = \"new.target can only be used in functions\";\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, \"Cannot use new with import(...)\");\n    } else if (\n      node.callee.type === \"OptionalMemberExpression\" ||\n      node.callee.type === \"OptionalCallExpression\"\n    ) {\n      this.raise(\n        this.state.lastTokEnd,\n        \"constructors in/after an Optional Chain are not allowed\",\n      );\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(\n        this.state.start,\n        \"constructors in/after an Optional Chain are not allowed\",\n      );\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        // TODO: fix this\n        this.raise(\n          this.state.invalidTemplateEscapePosition || 0,\n          \"Invalid escape sequence in template\",\n        );\n      } else {\n        this.state.invalidTemplateEscapePosition = null;\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // Parse an object literal or binding pattern.\n\n  parseObj<T: N.ObjectPattern | N.ObjectExpression>(\n    isPattern: boolean,\n    refShorthandDefaultPos?: ?Pos,\n  ): T {\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(tt.braceR)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parseObjectMember(isPattern, refShorthandDefaultPos);\n      // $FlowIgnore RestElement will never be returned if !isPattern\n      if (!isPattern) this.checkDuplicatedProto(prop, propHash);\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    if (!this.match(tt.eq) && propHash.start !== undefined) {\n      this.raise(propHash.start, \"Redefinition of __proto__ property\");\n    }\n\n    return this.finishNode(\n      node,\n      isPattern ? \"ObjectPattern\" : \"ObjectExpression\",\n    );\n  }\n\n  isAsyncProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      prop.key.name === \"async\" &&\n      (this.match(tt.name) ||\n        this.match(tt.num) ||\n        this.match(tt.string) ||\n        this.match(tt.bracketL) ||\n        this.state.type.keyword ||\n        this.match(tt.star)) &&\n      !this.hasPrecedingLineBreak()\n    );\n  }\n\n  parseObjectMember(\n    isPattern: boolean,\n    refShorthandDefaultPos: ?Pos,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(\n          this.state.start,\n          \"Stage 2 decorators disallow object literal property decorators\",\n        );\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refShorthandDefaultPos) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop);\n\n    if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.eat(tt.star);\n      this.parsePropertyName(prop);\n    } else {\n      isAsync = false;\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      refShorthandDefaultPos,\n      containsEsc,\n    );\n\n    return prop;\n  }\n\n  isGetterOrSetterMethod(prop: N.ObjectMethod, isPattern: boolean): boolean {\n    return (\n      !isPattern &&\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n      (this.match(tt.string) || // get \"string\"() {}\n      this.match(tt.num) || // get 1() {}\n      this.match(tt.bracketL) || // get [\"string\"]() {}\n      this.match(tt.name) || // get foo() {}\n        !!this.state.type.keyword) // get debugger() {}\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, \"getter must not have any formal parameters\");\n      } else {\n        this.raise(start, \"setter must have exactly one formal parameter\");\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      method.params[method.params.length - 1].type === \"RestElement\"\n    ) {\n      this.raise(\n        start,\n        \"setter function argument must not be a rest parameter\",\n      );\n    }\n  }\n\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    containsEsc: boolean,\n  ): ?N.ObjectMethod {\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop);\n      this.parseMethod(\n        prop,\n        /* isGenerator */ false,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  }\n\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refShorthandDefaultPos: ?Pos,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssign(false, refShorthandDefaultPos);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else if (this.match(tt.eq) && refShorthandDefaultPos) {\n        if (!refShorthandDefaultPos.start) {\n          refShorthandDefaultPos.start = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else {\n        prop.value = prop.key.__clone();\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    refShorthandDefaultPos: ?Pos,\n    containsEsc: boolean,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refShorthandDefaultPos,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      (prop: $FlowFixMe).key =\n        this.match(tt.num) || this.match(tt.string)\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName();\n\n      if (prop.key.type !== \"PrivateName\") {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      functionFlags(isAsync, node.generator) |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.scope.exit();\n\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(functionFlags(isAsync, false) | SCOPE_ARROW);\n    this.initFunction(node, isAsync);\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n\n    if (params) this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    this.parseFunctionBody(node, true);\n\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(\n      params,\n      true,\n      \"arrow function parameters\",\n      trailingCommaPos,\n    );\n  }\n\n  isStrictBody(node: { body: N.BlockStatement }): boolean {\n    const isBlockStatement = node.body.type === \"BlockStatement\";\n\n    if (isBlockStatement && node.body.directives.length) {\n      for (const directive of node.body.directives) {\n        if (directive.value.value === \"use strict\") {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    const oldStrict = this.state.strict;\n    let useStrict = false;\n\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const nonSimple = !this.isSimpleParamList(node.params);\n      if (!oldStrict || nonSimple) {\n        useStrict = this.strictDirective(this.state.end);\n        // If this is a strict mode function, verify that argument names\n        // are not repeated, and it does not try to bind the words `eval`\n        // or `arguments`.\n        if (useStrict && nonSimple) {\n          // This logic is here to align the error location with the estree plugin\n          const errorPos =\n            // $FlowIgnore\n            (node.kind === \"method\" || node.kind === \"constructor\") &&\n            // $FlowIgnore\n            !!node.key\n              ? node.key.end\n              : node.start;\n          this.raise(\n            errorPos,\n            \"Illegal 'use strict' directive in function with non-simple parameter list\",\n          );\n        }\n      }\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      if (useStrict) this.state.strict = true;\n      // Add the params to varDeclaredNames to ensure that an error is thrown\n      // if a let/const declaration in the function clashes with one of the params.\n      this.checkParams(\n        node,\n        !oldStrict && !useStrict && !allowExpression && !isMethod && !nonSimple,\n        allowExpression,\n        !oldStrict && useStrict,\n      );\n      node.body = this.parseBlock(true, false);\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    if (this.state.strict && node.id) {\n      this.checkLVal(\n        node.id,\n        BIND_OUTSIDE,\n        undefined,\n        \"function name\",\n        undefined,\n        !oldStrict && useStrict,\n      );\n    }\n    this.state.strict = oldStrict;\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    // $FlowIssue\n    const nameHash: {} = Object.create(null);\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(\n        node.params[i],\n        BIND_VAR,\n        allowDuplicates ? null : nameHash,\n        \"function parameter list\",\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refShorthandDefaultPos?: ?Pos,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refShorthandDefaultPos: ?Pos,\n    refNeedsArrowPos: ?Pos,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (allowEmpty && this.match(tt.comma)) {\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(\n        this.parseSpread(refShorthandDefaultPos, refNeedsArrowPos),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, \"Unexpected argument placeholder\");\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssign(\n        false,\n        refShorthandDefaultPos,\n        this.parseParenItem,\n        refNeedsArrowPos,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    if (this.match(tt.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n\n      // `class` and `function` keywords push new context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed\n      // as an identifier such as a property name.\n      // If the previous token is a dot, this does not apply because the\n      // context-managing code already ignored the keyword\n      if (\n        (name === \"class\" || name === \"function\") &&\n        (this.state.lastTokEnd !== this.state.lastTokStart + 1 ||\n          this.input.charCodeAt(this.state.lastTokStart) !== charCodes.dot)\n      ) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(\n        name,\n        this.state.start,\n        !!this.state.type.keyword,\n        false,\n      );\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    if (this.scope.inGenerator && word === \"yield\") {\n      this.raise(\n        startLoc,\n        \"Can not use 'yield' as identifier inside a generator\",\n      );\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.scope.inAsync) {\n        this.raise(\n          startLoc,\n          \"Can not use 'await' as identifier inside an async function\",\n        );\n        return;\n      }\n      if (\n        this.state.awaitPos === -1 &&\n        (this.state.maybeInArrowParameters || this.isAwaitAllowed())\n      ) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (\n      this.scope.inClass &&\n      !this.scope.inNonArrowFunction &&\n      word === \"arguments\"\n    ) {\n      this.raise(\n        startLoc,\n        \"'arguments' is not allowed in class field initializer\",\n      );\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, `Unexpected keyword '${word}'`);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.scope.inAsync && word === \"await\") {\n        this.raise(\n          startLoc,\n          \"Can not use keyword 'await' outside an async function\",\n        );\n      } else {\n        this.raise(startLoc, `Unexpected reserved word '${word}'`);\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.scope.inFunction) return this.scope.inAsync;\n    if (this.options.allowAwaitOutsideFunction) return true;\n    if (this.hasPlugin(\"topLevelAwait\")) return this.inModule;\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(): N.AwaitExpression {\n    const node = this.startNode();\n\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(\n        node.start,\n        \"await is not allowed in async function parameters\",\n      );\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n    if (this.eat(tt.star)) {\n      this.raise(\n        node.start,\n        \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n      );\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (\n        this.hasPrecedingLineBreak() ||\n        // All the following expressions are ambiguous:\n        //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n        this.match(tt.plusMin) ||\n        this.match(tt.parenL) ||\n        this.match(tt.bracketL) ||\n        this.match(tt.backQuote) ||\n        // Sometimes the tokenizer generates tt.slash for regexps, and this is\n        // handler by parseExprAtom\n        this.match(tt.regexp) ||\n        this.match(tt.slash) ||\n        // This code could be parsed both as a modulo operator or as an intrinsic:\n        //   await %x(0)\n        (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n      ) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(noIn?: ?boolean): N.YieldExpression {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, \"yield is not allowed in generator parameters\");\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n    if (\n      this.match(tt.semi) ||\n      (!this.match(tt.star) && !this.state.type.startsExpr) ||\n      this.hasPrecedingLineBreak()\n    ) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tt.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(\n          leftStartPos,\n          `Pipeline head should not be a comma-separated sequence expression`,\n        );\n      }\n    }\n  }\n\n  parseSmartPipelineBody(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n\n    this.checkSmartPipelineBodyEarlyErrors(\n      childExpression,\n      pipelineStyle,\n      startPos,\n    );\n\n    return this.parseSmartPipelineBodyInStyle(\n      childExpression,\n      pipelineStyle,\n      startPos,\n      startLoc,\n    );\n  }\n\n  checkSmartPipelineBodyEarlyErrors(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n  ): void {\n    if (this.match(tt.arrow)) {\n      // If the following token is invalidly `=>`, then throw a human-friendly error\n      // instead of something like 'Unexpected token, expected \";\"'.\n      throw this.raise(\n        this.state.start,\n        `Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized`,\n      );\n    } else if (\n      pipelineStyle === \"PipelineTopicExpression\" &&\n      childExpression.type === \"SequenceExpression\"\n    ) {\n      this.raise(\n        startPos,\n        `Pipeline body may not be a comma-separated sequence expression`,\n      );\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    switch (pipelineStyle) {\n      case \"PipelineBareFunction\":\n        bodyNode.callee = childExpression;\n        break;\n      case \"PipelineBareConstructor\":\n        bodyNode.callee = childExpression.callee;\n        break;\n      case \"PipelineBareAwaitedFunction\":\n        bodyNode.callee = childExpression.argument;\n        break;\n      case \"PipelineTopicExpression\":\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          this.raise(\n            startPos,\n            `Pipeline is in topic style but does not use topic reference`,\n          );\n        }\n        bodyNode.expression = childExpression;\n        break;\n      default:\n        throw new Error(\n          `Internal @babel/parser error: Unknown pipeline style (${pipelineStyle})`,\n        );\n    }\n    return this.finishNode(bodyNode, pipelineStyle);\n  }\n\n  checkSmartPipelineBodyStyle(expression: N.Expression): N.PipelineStyle {\n    switch (expression.type) {\n      default:\n        return this.isSimpleReference(expression)\n          ? \"PipelineBareFunction\"\n          : \"PipelineTopicExpression\";\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Enable topic references from outer contexts within smart pipeline bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicPermittingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // Disable topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicForbiddingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Disable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 0,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  // Register the use of a primary topic reference (`#`) within the current\n  // topic context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number, noIn: ?boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      prec,\n      noIn,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport {\n  isIdentifierChar,\n  isIdentifierStart,\n  keywordRelationalOperator,\n} from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  functionFlags,\n  SCOPE_CLASS,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    program.sourceType = this.options.sourceType;\n\n    program.interpreter = this.parseInterpreterDirective();\n\n    this.parseBlockBody(program, true, true, tt.eof);\n\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, `Export '${name}' is not defined`);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = this.state.tokens;\n\n    return this.finishNode(file, \"File\");\n  }\n\n  // TODO\n\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const expr = stmt.expression;\n\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n\n    directive.value = this.finishNodeAt(\n      directiveLiteral,\n      \"DirectiveLiteral\",\n      expr.end,\n      expr.loc.end,\n    );\n\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === charCodes.leftSquareBracket) return true;\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        // $FlowFixMe\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(\n              this.state.start,\n              \"In strict mode code, functions can only be declared at top level or inside a block\",\n            );\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(\n              this.state.start,\n              \"In non-strict mode code, functions can only be declared at top level, \" +\n                \"inside a block, or as the body of an if statement\",\n            );\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(\n            this.state.start,\n            \"Lexical declaration cannot appear in a single-statement context\",\n          );\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._export:\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis ||\n          nextTokenCharCode === charCodes.dot\n        ) {\n          break;\n        }\n\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(\n            this.state.start,\n            \"'import' and 'export' may only appear at the top level\",\n          );\n        }\n\n        this.next();\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              \"Async functions can only be declared at the top level or inside a block\",\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(\n        node.start,\n        `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n        {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n        },\n      );\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(\n          this.state.start,\n          \"Using the export keyword between a decorator and a class is not allowed. \" +\n            \"Please use `export @dec class` instead.\",\n        );\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(\n        this.state.start,\n        \"Leading decorators must be attached to a class declaration\",\n      );\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ): N.BreakStatement | N.ContinueStatement {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ) {\n    const isBreak = keyword === \"break\";\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(node.start, \"Unsyntactic \" + keyword);\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    const refShorthandDefaultPos = { start: 0 };\n    const init = this.parseExpression(true, refShorthandDefaultPos);\n    if (this.match(tt._in) || this.isContextual(\"of\")) {\n      const description = this.isContextual(\"of\")\n        ? \"for-of statement\"\n        : \"for-in statement\";\n      this.toAssignable(init, undefined, description);\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else if (refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.scope.inFunction && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, \"'return' outside of function\");\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, \"Multiple default clauses\");\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) {\n      this.raise(this.state.lastTokEnd, \"Illegal newline after throw\");\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseBindingAtom();\n        const simple = clause.param.type === \"Identifier\";\n        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the function body. They are permitted in function\n        // default-parameter expressions, which are part of the outer context,\n        // outside of the function body.\n        this.withTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n      this.scope.exit();\n\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, \"Missing catch or finally clause\");\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, \"'with' in strict mode\");\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the function body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the function body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, `Label '${maybeName}' is already declared`);\n      }\n    }\n\n    const kind = this.state.type.isLoop\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(node, allowDirectives, false, tt.braceR);\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n  ): void {\n    let parsedNonDirective = false;\n    let oldStrict;\n    let octalPosition;\n\n    while (!this.eat(end)) {\n      if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {\n        octalPosition = this.state.octalPosition;\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (oldStrict === undefined && directive.value.value === \"use strict\") {\n          oldStrict = this.state.strict;\n          this.setStrict(true);\n\n          if (octalPosition) {\n            this.raise(octalPosition, \"Octal literal in strict mode\");\n          }\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (oldStrict === false) {\n      this.setStrict(false);\n    }\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.expect(tt.semi);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.expect(tt.semi);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        `${\n          isForIn ? \"for-in\" : \"for-of\"\n        } loop variable declaration may not have an initializer`,\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, \"Invalid left-hand side in for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            \"Complex binding patterns require an initialization value\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      \"variable declaration\",\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(\n        this.state.start,\n        \"Generators can only be declared at the top level or inside a block\",\n      );\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInClassProperty = this.state.inClassProperty;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.inClassProperty = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(functionFlags(node.async, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in test\n    // expressions, outside of the function body.\n    this.withTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inClassProperty = oldInClassProperty;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n\n    this.expect(tt.parenL);\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass);\n\n    this.state.strict = oldStrict;\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  parseClassBody(constructorAllowsSuper: boolean): N.ClassBody {\n    this.state.classLevel++;\n\n    const state = { hadConstructor: false };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body. They are permitted in test expressions,\n    // outside of the class body.\n    this.withTopicForbiddingContext(() => {\n      while (!this.eat(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              this.state.lastTokEnd,\n              \"Decorators must not be followed by a semicolon\",\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(\n            member.start,\n            \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n          );\n        }\n      }\n    });\n\n    if (decorators.length) {\n      throw this.raise(\n        this.state.start,\n        \"You have trailing decorators with no method\",\n      );\n    }\n\n    this.state.classLevel--;\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    constructorAllowsSuper: boolean,\n  ): void {\n    let isStatic = false;\n    const containsEsc = this.state.containsEsc;\n\n    if (this.match(tt.name) && this.state.value === \"static\") {\n      const key = this.parseIdentifier(true); // eats 'static'\n\n      if (this.isClassMethod()) {\n        const method: N.ClassMethod = (member: any);\n\n        // a method named 'static'\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(\n          classBody,\n          method,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n        return;\n      } else if (this.isClassProperty()) {\n        const prop: N.ClassProperty = (member: any);\n\n        // a property named 'static'\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return;\n      } else if (containsEsc) {\n        throw this.unexpected();\n      }\n\n      // otherwise something static\n      isStatic = true;\n    }\n\n    this.parseClassMemberWithIsStatic(\n      classBody,\n      member,\n      state,\n      isStatic,\n      constructorAllowsSuper,\n    );\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    isStatic: boolean,\n    constructorAllowsSuper: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, \"Constructor can't be a generator\");\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassPropertyName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    // Check the key is not a computed expression or string literal.\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, \"Duplicate constructor in the same class\");\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isSimple &&\n      key.name === \"async\" &&\n      !containsEsc &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      this.parseClassPropertyName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(\n            publicMethod.key.start,\n            \"Constructor can't be an async function\",\n          );\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isSimple &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !containsEsc &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(\n            publicMethod.key.start,\n            \"Constructor can't have get/set modifier\",\n          );\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassPropertyName(member: N.ClassMember): N.Expression | N.Identifier {\n    const key = this.parsePropertyName(member);\n\n    if (\n      !member.computed &&\n      member.static &&\n      ((key: $FlowSubtype<N.Identifier>).name === \"prototype\" ||\n        (key: $FlowSubtype<N.StringLiteral>).value === \"prototype\")\n    ) {\n      this.raise(\n        key.start,\n        \"Classes may not have static property named prototype\",\n      );\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(\n        key.start,\n        \"Classes may not have a private field named '#constructor'\",\n      );\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(\n        prop.key.start,\n        \"Classes may not have a field named 'constructor'\",\n      );\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    classBody.body.push(this.parseClassPrivateProperty(prop));\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ClassPrivateMethod\",\n        true,\n      ),\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // Overridden in typescript.js\n  parseAccessModifier(): ?N.Accessibility {\n    return undefined;\n  }\n\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.state.inClassProperty = true;\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.state.inClassProperty = false;\n\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.state.inClassProperty = true;\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n\n    if (this.match(tt.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n    this.semicolon();\n    this.state.inClassProperty = false;\n\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    }\n  }\n\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        const next = this.nextTokenStart();\n\n        // export async;\n        if (!this.isUnparsedContextual(next, \"function\")) {\n          this.unexpected(next, `Unexpected token, expected \"function\"`);\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(\n          this.state.start,\n          \"Decorators must be placed *before* the 'export' keyword.\" +\n            \" You can set the 'decoratorsBeforeExport' option to false to use\" +\n            \" the 'export @decorator class {}' syntax\",\n        );\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(\n        this.state.start,\n        \"Only expressions, functions or classes are allowed as the `default` export.\",\n      );\n    } else {\n      const res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      return this.state.value !== \"async\" && this.state.value !== \"let\";\n    }\n\n    if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    return (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      this.isUnparsedContextual(next, \"from\")\n    );\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    if (this.match(tt.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(\n            this.state.start,\n            \"Decorators must be placed *before* the 'export' keyword.\" +\n              \" You can set the 'decoratorsBeforeExport' option to false to use\" +\n              \" the 'export @decorator class {}' syntax\",\n          );\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      this.state.type.keyword === \"var\" ||\n      this.state.type.keyword === \"const\" ||\n      this.state.type.keyword === \"function\" ||\n      this.state.type.keyword === \"class\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            // check for keywords used as local names\n            this.checkReservedWord(\n              specifier.local.name,\n              specifier.local.start,\n              true,\n              false,\n            );\n            // check if export is defined\n            // $FlowIgnore\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (currentContextDecorators.length) {\n      const isClass =\n        node.declaration &&\n        (node.declaration.type === \"ClassDeclaration\" ||\n          node.declaration.type === \"ClassExpression\");\n      if (!node.declaration || !isClass) {\n        throw this.raise(\n          node.start,\n          \"You can only use decorators on an export when exporting a class\",\n        );\n      }\n      this.takeDecorators(node.declaration);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? \"Only one default export allowed per module.\"\n          : `\\`${name}\\` has already been exported. Exported identifiers must be unique.`,\n      );\n    }\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\")\n        ? this.parseIdentifier(true)\n        : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // Parses import declaration.\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      contextDescription,\n    );\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(\n            this.state.start,\n            \"ES2015 named imports do not destructure. \" +\n              \"Use another statement for destructuring after the import.\",\n          );\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(\n        specifier.imported.name,\n        specifier.start,\n        true,\n        true,\n      );\n      specifier.local = specifier.imported.__clone();\n    }\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      \"import specifier\",\n    );\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File, JSXOpeningElement } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    const ScopeHandler = this.getScopeHandler();\n\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.scope.enter(SCOPE_PROGRAM);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { types as tokTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options && options.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexport { tokTypes };\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","regexp","string","eof","bracketL","bracketR","braceL","braceBarL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ASYNC","SCOPE_GENERATOR","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","functionFlags","isAsync","isGenerator","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_SCOPE_OUTSIDE","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","isSimpleProperty","node","type","kind","method","superClass","estreeParseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","value","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","start","loc","expression","raw","extra","finishNodeAt","end","slice","initFunction","checkDeclaration","checkGetterSetterParams","prop","paramCount","params","length","raise","checkLVal","expr","bindingType","checkClashes","contextDescription","disallowLetBinding","properties","forEach","checkDuplicatedProto","protoRef","computed","shorthand","key","String","used","isStrictBody","isBlockStatement","body","isValidDirective","parenthesized","stmtToDirective","parseBlockBody","allowDirectives","topLevel","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parseExprAtom","refShorthandDefaultPos","state","tt","startPos","startLoc","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","finishNode","parseObjectMethod","isPattern","containsEsc","parseObjectProperty","toAssignable","isBinding","toAssignableObjectExpressionProp","isLast","lineBreak","lineBreakG","source","isNewLine","code","skipWhiteSpace","isWhitespace","TokContext","isExpr","preserveSpace","override","braceStatement","braceExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","pop","curContext","prevType","allowed","scope","inGenerator","isIterator","braceIsBlock","statementParens","test","input","lastTokEnd","b_stat","reservedWords","strict","strictBind","reservedWordsStrictSet","Set","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","pos","i","isIdentifierStart","fromCharCode","isIteratorStart","current","next","isIdentifierChar","reservedTypes","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","undefined","shouldParseTypes","getPluginOption","shouldParseEnums","finishToken","val","addComment","comment","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","moduloPos","checksLoc","expectContextual","line","column","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","match","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","id","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","lastTokStart","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","declareName","enter","bodyNode","parseImport","exit","hasModuleExport","errorMessage","default","isLet","suggestion","parseExport","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","optional","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","lh","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","canInsertSemicolon","elementType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","noIn","refNeedsArrowPos","result","tryParse","error","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","disallowInvalid","stack","arrows","finishArrowValidation","every","isAssignable","toAssignableList","trailingComma","checkParams","parse","indexOf","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","specifiers","parseExportSpecifiers","parseExportFrom","eatExportStar","arguments","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","getTokenFromCode","charCodeAt","finishOp","readWord","last","elements","element","operator","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","parsePropertyName","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","hasPlugin","tc","j_oTag","j_expr","arrowExpression","resetStartLocationFromNode","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","base","noCalls","callee","parseCallExpressionArguments","abort","parseAsyncArrowWithTypeParameters","aborted","parseSubscript","subscriptState","isLookaheadRelational","expectPlugin","optionalChainMember","stop","typeArguments","finishCallExpression","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","message","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","add","flowEnumStringMembers","initializedMembers","member","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","lineStart","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","lastTokEndLoc","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","refShortHandDefaultPos","inPropertyName","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","inFunction","currentVarScope","inAsync","allowSuper","currentThisScope","inClass","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","keywordTypeFromName","getScopeHandler","tsIsIdentifier","tsNextTokenCanFollowModifier","hasPrecedingLineBreak","tsParseModifier","allowedModifiers","modifier","tsTryParse","bind","tsParseModifiers","modifiers","Object","create","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","startNodeAtNode","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","restNode","tsParseType","lookaheadCharCode","raiseRestNotLast","optionalTypeNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","tsParseTemplateLiteralType","templateNode","parseTemplate","expressions","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","tsParseArrayTypeOrHigher","objectType","indexType","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","asserts","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","isLineTerminator","starttype","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminatorAndMatch","cls","abstract","tokenType","tsTryParseGenericAsyncArrowFunction","tsIsDeclarationStart","parseAssignableListItem","decorators","accessibility","parseAccessModifier","elt","pp","parameter","bodilessType","registerFunctionStatementId","nonNullExpression","atPossibleAsync","asyncArrowFn","parseTaggedTemplateExpression","args","parseExprOp","leftStartPos","leftStartLoc","minPrec","checkKeywords","checkDuplicateExports","isAbstractClass","parseStatementContent","ahead","parseClassMember","constructorAllowsSuper","parseClassMemberWithIsStatic","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","equal","typeCast","ct","parseBindingAtom","parseMaybeDecoratorArguments","isInParens","_exprListItem","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","placeholder","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","parseClassBody","exported","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","identifier","plugins","some","plugin","Array","isArray","option","PIPELINE_PROPOSALS","validatePlugins","decoratorsBeforeExport","join","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","errorRecovery","getOptions","opts","Position","col","SourceLocation","getLineInfo","offset","lastIndex","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","get","CommentsParser","filename","trailingComments","leadingComments","adjustCommentsAfterTrailingComma","takeAllComments","lastElement","j","commentPreviousNode","splice","newTrailingComments","leadingComment","processComment","commentStack","firstChild","lastChild","lastInStack","innerComments","LocationParser","getLocationForPosition","lastTokStartLoc","endLoc","missingPluginNames","err","SyntaxError","missingPlugin","isLookahead","errors","State","potentialArrowAt","inParameters","maybeInArrowParameters","inPipeline","inClassProperty","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","classLevel","labels","decoratorStack","yieldPos","awaitPos","comments","containsOctal","octalPosition","exportedIdentifiers","invalidTemplateEscapePosition","curPosition","skipArrays","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","checkKeywordEscapes","old","curr","nextTokenStart","thisTokEnd","skip","setStrict","lastIndexOf","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","readToken_lt_gt","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","replace","startsWithDot","isFloat","isNonOctalDecimalInt","octal","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","n","readWord1","escStart","identifierCheck","esc","keywordTypes","parent","update","UtilParser","addExtra","op","afterNext","eatRelational","isUnparsedContextual","nameStart","nameEnd","messageOrType","expectOnePlugin","names","checkYieldAwaitInDefaultParams","strictDirective","fn","oldState","abortSignal","Node","parser","range","NodeUtils","locationNode","LValParser","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","parseRestBinding","parseObj","close","closeCharCode","allowEmpty","elts","first","checkCommaAfterRest","parseDecorator","strictModeChanged","elem","unwrapParenthesizedExpression","ExpressionParser","getExpression","parseYield","failOnShorthandAssign","parseMaybeConditional","maybePattern","patternErrorMsg","parseExprOps","prec","checkPipelineAtInfixOperator","parseExprOpRightExpr","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","isAwaitAllowed","parseAwait","parseExprSubscripts","maybeAsyncArrow","parseNoCallExpr","parseMaybePrivateName","oldMaybeInArrowParameters","oldYieldPos","oldAwaitPos","tag","quasi","importArg","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","innerParenStart","oldInFSharpPipelineDirectBody","parseExprListItem","parseImportMetaProperty","parseFunction","oldLabels","parseExprList","ret","parseFunctionExpression","parseDecorators","parseNew","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenStart","metaProp","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","parseObjectMember","isAsyncProp","isGetterOrSetterMethod","oldInPropertyName","generator","async","isExpression","oldStrict","useStrict","oldInParameters","nonSimple","isSimpleParamList","errorPos","nameHash","identifierName","reservedTest","delegate","childExpression","pipelineStyle","checkSmartPipelineBodyStyle","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","topicReferenceWasUsedInCurrentTopicContext","isSimpleReference","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","StatementParser","interpreter","parseInterpreterDirective","from","nextCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","handler","clause","simple","finalizer","statementStart","createNewLexicalScope","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","oldInClassProperty","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassPropertyName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","checkNames","isDefault","isFrom","nodes","parseNext","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}