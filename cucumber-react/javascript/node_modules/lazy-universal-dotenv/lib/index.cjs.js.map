{"version":3,"file":"index.cjs.js","sources":["../src/index.js"],"sourcesContent":["import fs from \"fs\"\nimport path from \"path\"\nimport appRoot from \"app-root-dir\"\nimport dotenv from \"dotenv\"\nimport expand from \"dotenv-expand\"\n\nconst dotEnvBase = path.join(appRoot.get(), \".env\")\n\nexport function getEnvironment({ nodeEnv, buildTarget } = {}) {\n  let raw = {}\n  const stringified = {}\n  const webpack = { \"process.env\": stringified }\n\n  // Cache Node environment at load time. We have to do it to make\n  // sure that the serialization, which might happen later, is in sync\n  // with the parsing of the conditional NODE_ENV files now.\n  const NODE_ENV = typeof nodeEnv === \"undefined\" ? process.env.NODE_ENV : nodeEnv\n\n  // Either \"client\" or \"server\"\n  const BUILD_TARGET = typeof nodeEnv === \"undefined\" ? process.env.BUILD_TARGET : buildTarget\n\n  // https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use\n  // Don't include `.env.local` for `test` environment\n  // since normally you expect tests to produce the same\n  // results for everyone\n  const dotenvFiles = [\n    BUILD_TARGET && NODE_ENV && `${dotEnvBase}.${BUILD_TARGET}.${NODE_ENV}.local`,\n    BUILD_TARGET && NODE_ENV && `${dotEnvBase}.${BUILD_TARGET}.${NODE_ENV}`,\n    BUILD_TARGET && NODE_ENV !== \"test\" && `${dotEnvBase}.${BUILD_TARGET}.local`,\n    BUILD_TARGET && `${dotEnvBase}.${BUILD_TARGET}`,\n    NODE_ENV && `${dotEnvBase}.${NODE_ENV}.local`,\n    NODE_ENV && `${dotEnvBase}.${NODE_ENV}`,\n    NODE_ENV !== \"test\" && `${dotEnvBase}.local`,\n    dotEnvBase\n  ].filter(Boolean)\n\n  // Load environment variables from .env* files. Suppress warnings using silent\n  // if this file is missing. dotenv will never modify any environment variables\n  // that have already been set. Variable expansion is supported in .env files.\n  // https://github.com/motdotla/dotenv\n  // https://github.com/motdotla/dotenv-expand\n  dotenvFiles.forEach((dotenvFile) => {\n    if (fs.existsSync(dotenvFile)) {\n      const config = dotenv.config({\n        path: dotenvFile\n      })\n\n      raw = Object.assign({}, raw, expand(config).parsed)\n    }\n  })\n\n  Object.keys(raw).forEach((key) => {\n    stringified[key] = JSON.stringify(raw[key])\n  })\n\n  return { raw, stringified, webpack }\n}\n"],"names":["dotEnvBase","path","join","appRoot","get","getEnvironment","nodeEnv","buildTarget","raw","stringified","NODE_ENV","process","env","BUILD_TARGET","dotenvFiles","filter","Boolean","forEach","dotenvFile","fs","existsSync","config","dotenv","Object","assign","expand","parsed","keys","key","JSON","stringify","webpack"],"mappings":";;;;;;;;;;;;;;;;;;;AAMA,IAAMA,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,MAAzB,CAAnB;AAEA,AAAO,SAASC,cAAT,QAAuD;gCAAJ,EAAI;MAA7BC,OAA6B,QAA7BA,OAA6B;MAApBC,WAAoB,QAApBA,WAAoB;MACxDC,GAAG,GAAG,EADkD;MAEtDC,WAAW,GAAG,EAFwC;MAQtDC,QAAQ,GAAG,OAAOJ,OAAP,IAAmB,WAAnB,GAAiCK,OAAO,CAACC,GAAR,CAAYF,QAA7C,GAAwDJ,OARb;MAWtDO,YAAY,GAAG,OAAOP,OAAP,IAAmB,WAAnB,GAAiCK,OAAO,CAACC,GAAR,CAAYC,YAA7C,GAA4DN,WAXrB;MAiBtDO,WAAW,GAAG,CAClBD,YAAY,IAAIH,QAAhB,IAA+BV,UAA/B,SAA6Ca,YAA7C,SAA6DH,QAA7D,WADkB,EAElBG,YAAY,IAAIH,QAAhB,IAA+BV,UAA/B,SAA6Ca,YAA7C,SAA6DH,QAF3C,EAGlBG,YAAY,IAAIH,QAAQ,KAAK,MAA7B,IAA0CV,UAA1C,SAAwDa,YAAxD,WAHkB,EAIlBA,YAAY,IAAOb,UAAP,SAAqBa,YAJf,EAKlBH,QAAQ,IAAOV,UAAP,SAAqBU,QAArB,WALU,EAMlBA,QAAQ,IAAOV,UAAP,SAAqBU,QANX,EAOlBA,QAAQ,KAAK,MAAb,IAA0BV,UAA1B,WAPkB,EAQlBA,UARkB,EASlBe,MATkB,CASXC,OATW,CAjBwC;;EAiC5DF,WAAW,CAACG,OAAZ,CAAoB,UAACC,UAAD,EAAgB;QAC9BC,EAAE,CAACC,UAAH,CAAcF,UAAd,CAAJ,EAA+B;UACvBG,MAAM,GAAGC,MAAM,CAACD,MAAP,CAAc;QAC3BpB,IAAI,EAAEiB;OADO,CAAf;MAIAV,GAAG,GAAGe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,GAAlB,EAAuBiB,MAAM,CAACJ,MAAD,CAAN,CAAeK,MAAtC,CAAN;;GANJ;EAUAH,MAAM,CAACI,IAAP,CAAYnB,GAAZ,EAAiBS,OAAjB,CAAyB,UAACW,GAAD,EAAS;IAChCnB,WAAW,CAACmB,GAAD,CAAX,GAAmBC,IAAI,CAACC,SAAL,CAAetB,GAAG,CAACoB,GAAD,CAAlB,CAAnB;GADF;SAIO;IAAEpB,GAAG,EAAHA,GAAF;IAAOC,WAAW,EAAXA,WAAP;IAAoBsB,OAAO,EA5ClB;qBAAiBtB;;GA4CjC;;;;;"}