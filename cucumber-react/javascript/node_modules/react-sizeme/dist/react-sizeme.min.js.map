{"version":3,"file":"react-sizeme.min.js","sources":["../src/resize-detector.js","../src/with-size.js","../src/component.js","../src/index.js"],"sourcesContent":["import createResizeDetector from 'element-resize-detector'\n\nconst instances = {}\n\n// Lazily require to not cause bug\n// https://github.com/ctrlplusb/react-sizeme/issues/6\nfunction resizeDetector(strategy = 'scroll') {\n  if (!instances[strategy]) {\n    instances[strategy] = createResizeDetector({\n      strategy,\n    })\n  }\n\n  return instances[strategy]\n}\n\nexport default resizeDetector\n","/* eslint-disable react/no-multi-comp */\n/* eslint-disable react/require-default-props */\n/* eslint-disable react/no-find-dom-node */\n\nimport React, { Children, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\nimport invariant from 'invariant'\nimport { debounce, throttle } from 'throttle-debounce'\nimport resizeDetector from './resize-detector'\n\nconst errMsg =\n  'react-sizeme: an error occurred whilst stopping to listen to node size changes'\n\nconst defaultConfig = {\n  monitorWidth: true,\n  monitorHeight: false,\n  monitorPosition: false,\n  refreshRate: 16,\n  refreshMode: 'throttle',\n  noPlaceholder: false,\n  resizeDetectorStrategy: 'scroll',\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component'\n}\n\n/**\n * This is a utility wrapper component that will allow our higher order\n * component to get a ref handle on our wrapped components html.\n * @see https://gist.github.com/jimfb/32b587ee6177665fb4cf\n */\nclass ReferenceWrapper extends Component {\n  static displayName = 'SizeMeReferenceWrapper'\n\n  render() {\n    return Children.only(this.props.children)\n  }\n}\nReferenceWrapper.propTypes = { children: PropTypes.element.isRequired }\n\nfunction Placeholder({ className, style }) {\n  // Lets create the props for the temp element.\n  const phProps = {}\n\n  // We will use any provided className/style or else make the temp\n  // container take the full available space.\n  if (!className && !style) {\n    phProps.style = { width: '100%', height: '100%' }\n  } else {\n    if (className) {\n      phProps.className = className\n    }\n    if (style) {\n      phProps.style = style\n    }\n  }\n\n  return <div {...phProps} />\n}\nPlaceholder.displayName = 'SizeMePlaceholder'\nPlaceholder.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n}\n\n/**\n * As we need to maintain a ref on the root node that is rendered within our\n * SizeMe component we need to wrap our entire render in a sub component.\n * Without this, we lose the DOM ref after the placeholder is removed from\n * the render and the actual component is rendered.\n * It took me forever to figure this out, so tread extra careful on this one!\n */\nconst renderWrapper = WrappedComponent => {\n  function SizeMeRenderer(props) {\n    const {\n      explicitRef,\n      className,\n      style,\n      size,\n      disablePlaceholder,\n      onSize,\n      ...restProps\n    } = props\n\n    const noSizeData =\n      size == null ||\n      (size.width == null && size.height == null && size.position == null)\n\n    const renderPlaceholder = noSizeData && !disablePlaceholder\n\n    const renderProps = {\n      className,\n      style,\n    }\n\n    if (size != null) {\n      renderProps.size = size\n    }\n\n    const toRender = renderPlaceholder ? (\n      <Placeholder className={className} style={style} />\n    ) : (\n      <WrappedComponent {...renderProps} {...restProps} />\n    )\n\n    return <ReferenceWrapper ref={explicitRef}>{toRender}</ReferenceWrapper>\n  }\n\n  SizeMeRenderer.displayName = `SizeMeRenderer(${getDisplayName(\n    WrappedComponent,\n  )})`\n\n  SizeMeRenderer.propTypes = {\n    explicitRef: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    style: PropTypes.object, // eslint-disable-line react/forbid-prop-types\n    size: PropTypes.shape({\n      width: PropTypes.number, // eslint-disable-line react/no-unused-prop-types\n      height: PropTypes.number, // eslint-disable-line react/no-unused-prop-types\n      position: PropTypes.object,\n    }),\n    disablePlaceholder: PropTypes.bool,\n    onSize: PropTypes.func,\n  }\n\n  return SizeMeRenderer\n}\n\n/**\n * :: config -> Component -> WrappedComponent\n *\n * Higher order component that allows the wrapped component to become aware\n * of it's size, by receiving it as an object within it's props.\n *\n * @param  monitorWidth\n *   Default true, whether changes in the element's width should be monitored,\n *   causing a size property to be broadcast.\n * @param  monitorHeight\n *   Default false, whether changes in the element's height should be monitored,\n *   causing a size property to be broadcast.\n *\n * @return The wrapped component.\n */\nfunction withSize(config = defaultConfig) {\n  const {\n    monitorWidth = defaultConfig.monitorWidth,\n    monitorHeight = defaultConfig.monitorHeight,\n    monitorPosition = defaultConfig.monitorPosition,\n    refreshRate = defaultConfig.refreshRate,\n    refreshMode = defaultConfig.refreshMode,\n    noPlaceholder = defaultConfig.noPlaceholder,\n    resizeDetectorStrategy = defaultConfig.resizeDetectorStrategy,\n  } = config\n\n  invariant(\n    monitorWidth || monitorHeight || monitorPosition,\n    'You have to monitor at least one of the width, height, or position when using \"sizeMe\"',\n  )\n\n  invariant(\n    refreshRate >= 16,\n    \"It is highly recommended that you don't put your refreshRate lower than \" +\n      '16 as this may cause layout thrashing.',\n  )\n\n  invariant(\n    refreshMode === 'throttle' || refreshMode === 'debounce',\n    'The refreshMode should have a value of \"throttle\" or \"debounce\"',\n  )\n\n  const refreshDelayStrategy = refreshMode === 'throttle' ? throttle : debounce\n\n  return function WrapComponent(WrappedComponent) {\n    const SizeMeRenderWrapper = renderWrapper(WrappedComponent)\n\n    class SizeAwareComponent extends React.Component {\n      static displayName = `SizeMe(${getDisplayName(WrappedComponent)})`\n\n      static propTypes = {\n        onSize: PropTypes.func,\n      }\n\n      domEl = null\n\n      state = {\n        width: undefined,\n        height: undefined,\n        position: undefined,\n      }\n\n      componentDidMount() {\n        this.detector = resizeDetector(resizeDetectorStrategy)\n        this.determineStrategy(this.props)\n        this.handleDOMNode()\n      }\n\n      componentDidUpdate() {\n        this.determineStrategy(this.props)\n        this.handleDOMNode()\n      }\n\n      componentWillUnmount() {\n        // Change our size checker to a noop just in case we have some\n        // late running events.\n        this.hasSizeChanged = () => undefined\n        this.checkIfSizeChanged = () => undefined\n        this.uninstall()\n      }\n\n      uninstall = () => {\n        if (this.domEl) {\n          try {\n            this.detector.uninstall(this.domEl)\n          } catch (err) {\n            // eslint-disable-next-line no-console\n            console.warn(errMsg)\n          }\n          this.domEl = null\n        }\n      }\n\n      determineStrategy = props => {\n        if (props.onSize) {\n          if (!this.callbackState) {\n            this.callbackState = {\n              ...this.state,\n            }\n          }\n          this.strategy = 'callback'\n        } else {\n          this.strategy = 'render'\n        }\n      }\n\n      strategisedSetState = state => {\n        if (this.strategy === 'callback') {\n          this.callbackState = state\n          this.props.onSize(state)\n        }\n        this.setState(state)\n      }\n\n      strategisedGetState = () =>\n        this.strategy === 'callback' ? this.callbackState : this.state\n\n      handleDOMNode() {\n        const found = this.element && ReactDOM.findDOMNode(this.element)\n\n        if (!found) {\n          // If we previously had a dom node then we need to ensure that\n          // we remove any existing listeners to avoid memory leaks.\n          this.uninstall()\n          return\n        }\n\n        if (!this.domEl) {\n          this.domEl = found\n          this.detector.listenTo(this.domEl, this.checkIfSizeChanged)\n        } else if (\n          (this.domEl.isSameNode && !this.domEl.isSameNode(found)) ||\n          this.domEl !== found\n        ) {\n          this.uninstall()\n          this.domEl = found\n          this.detector.listenTo(this.domEl, this.checkIfSizeChanged)\n        } else {\n          // Do nothing 👍\n        }\n      }\n\n      refCallback = element => {\n        this.element = element\n      }\n\n      hasSizeChanged = (current, next) => {\n        const c = current\n        const n = next\n        const cp = c.position || {}\n        const np = n.position || {}\n\n        return (\n          (monitorWidth && c.width !== n.width) ||\n          (monitorHeight && c.height !== n.height) ||\n          (monitorPosition &&\n            (cp.top !== np.top ||\n              cp.left !== np.left ||\n              cp.bottom !== np.bottom ||\n              cp.right !== np.right))\n        )\n      }\n\n      checkIfSizeChanged = refreshDelayStrategy(refreshRate, el => {\n        const {\n          width,\n          height,\n          right,\n          left,\n          top,\n          bottom,\n        } = el.getBoundingClientRect()\n\n        const next = {\n          width: monitorWidth ? width : null,\n          height: monitorHeight ? height : null,\n          position: monitorPosition ? { right, left, top, bottom } : null,\n        }\n\n        if (this.hasSizeChanged(this.strategisedGetState(), next)) {\n          this.strategisedSetState(next)\n        }\n      })\n\n      render() {\n        const disablePlaceholder =\n          withSize.enableSSRBehaviour ||\n          withSize.noPlaceholders ||\n          noPlaceholder ||\n          this.strategy === 'callback'\n\n        const size = { ...this.state }\n\n        return (\n          <SizeMeRenderWrapper\n            explicitRef={this.refCallback}\n            size={this.strategy === 'callback' ? null : size}\n            disablePlaceholder={disablePlaceholder}\n            {...this.props}\n          />\n        )\n      }\n    }\n\n    SizeAwareComponent.WrappedComponent = WrappedComponent\n\n    return SizeAwareComponent\n  }\n}\n\n/**\n * Allow SizeMe to run within SSR environments.  This is a \"global\" behaviour\n * flag that should be set within the initialisation phase of your application.\n *\n * Warning: don't set this flag unless you need to as using it may cause\n * extra render cycles to happen within your components depending on the logic\n * contained within them around the usage of the `size` data.\n *\n * DEPRECATED: Please use the global noPlaceholders\n */\nwithSize.enableSSRBehaviour = false\n\n/**\n * Global configuration allowing to disable placeholder rendering for all\n * sizeMe components.\n */\nwithSize.noPlaceholders = false\n\nexport default withSize\n","import React, { Component } from 'react'\nimport isShallowEqual from 'shallowequal'\nimport PropTypes from 'prop-types'\nimport withSize from './with-size'\n\nexport default class SizeMe extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    render: PropTypes.func,\n  }\n\n  static defaultProps = {\n    children: undefined,\n    render: undefined,\n  }\n\n  constructor(props) {\n    super(props)\n    const { children, render, ...sizeMeConfig } = props\n    this.createComponent(sizeMeConfig)\n    this.state = {\n      size: {\n        width: undefined,\n        height: undefined,\n      },\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      children: prevChildren,\n      render: prevRender,\n      ...currentSizeMeConfig\n    } = this.props\n    const {\n      children: nextChildren,\n      render: nextRender,\n      ...prevSizeMeConfig\n    } = prevProps\n    if (!isShallowEqual(currentSizeMeConfig, prevSizeMeConfig)) {\n      this.createComponent(currentSizeMeConfig)\n    }\n  }\n\n  createComponent = config => {\n    this.SizeAware = withSize(config)(({ children }) => children)\n  }\n\n  onSize = size => this.setState({ size })\n\n  render() {\n    const { SizeAware } = this\n    const render = this.props.children || this.props.render\n    return (\n      <SizeAware onSize={this.onSize}>\n        {render({ size: this.state.size })}\n      </SizeAware>\n    )\n  }\n}\n","import withSize from './with-size'\nimport SizeMe from './component'\n\nwithSize.SizeMe = SizeMe\nwithSize.withSize = withSize\n\nexport default withSize\n"],"names":["instances","resizeDetector","strategy","createResizeDetector","errMsg","defaultConfig","getDisplayName","WrappedComponent","displayName","name","ReferenceWrapper","Children","only","this","props","children","Component","Placeholder","className","style","phProps","width","height","React","propTypes","PropTypes","element","isRequired","string","object","renderWrapper","SizeMeRenderer","explicitRef","size","disablePlaceholder","restProps","onSize","renderPlaceholder","position","renderProps","toRender","ref","func","shape","number","bool","withSize","config","monitorWidth","monitorHeight","monitorPosition","refreshRate","refreshMode","noPlaceholder","resizeDetectorStrategy","refreshDelayStrategy","throttle","debounce","SizeMeRenderWrapper","SizeAwareComponent","domEl","state","undefined","uninstall","_this2","detector","err","warn","determineStrategy","callbackState","strategisedSetState","setState","strategisedGetState","refCallback","hasSizeChanged","current","next","c","n","cp","np","top","left","bottom","right","checkIfSizeChanged","el","getBoundingClientRect","handleDOMNode","found","ReactDOM","findDOMNode","isSameNode","listenTo","enableSSRBehaviour","noPlaceholders","SizeMe","render","sizeMeConfig","createComponent","prevProps","currentSizeMeConfig","prevSizeMeConfig","isShallowEqual","SizeAware","defaultProps"],"mappings":"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"}