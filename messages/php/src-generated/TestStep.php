<?php declare(strict_types=1);

/**
 * This code was auto-generated by {this script}[https://github.com/cucumber/common/blob/main/messages/jsonschema/scripts/codegen.rb]
 */

namespace Cucumber\Messages;

use \JsonSerializable;

/**
 * Represents the TestStep message in Cucumber's message protocol
 * @see https://github.com/cucumber/common/tree/main/messages#readme
 *
 * A `TestStep` is derived from either a `PickleStep`
 * combined with a `StepDefinition`, or from a `Hook`. */
final class TestStep implements JsonSerializable
{
    use JsonEncodingTrait;

    private function __construct(

        /**
         * Pointer to the `Hook` (if derived from a Hook)
         */
        public readonly ?string $hookId,

        public readonly string $id,

        /**
         * Pointer to the `PickleStep` (if derived from a `PickleStep`)
         */
        public readonly ?string $pickleStepId,

        /**
         * Pointer to all the matching `StepDefinition`s (if derived from a `PickleStep`)
         * @param ?list<string> $stepDefinitionIds
         */
        public readonly ?array $stepDefinitionIds,

        /**
         * A list of list of StepMatchArgument (if derived from a `PickleStep`).
         * Each element represents a matching step definition. A size of 0 means `UNDEFINED`,
         * and a size of 2+ means `AMBIGUOUS`
         * @param ?list<StepMatchArgumentsList> $stepMatchArgumentsLists
         */
        public readonly ?array $stepMatchArgumentsLists,

    ){}

    /**
     * @throws SchemaViolationException
     *
     * @internal
     */
    public static function fromArray(array $arr) : self
    {
        self::ensureId($arr);
        self::ensureStepDefinitionIds($arr);
        self::ensureStepMatchArgumentsLists($arr);

        return new self(
            isset($arr['hookId']) ? (string) $arr['hookId'] : null,
            (string) $arr['id'],
            isset($arr['pickleStepId']) ? (string) $arr['pickleStepId'] : null,
            isset($arr['stepDefinitionIds']) ? array_map(fn(mixed $member) => (string) $member , $arr['stepDefinitionIds']) : null,
            isset($arr['stepMatchArgumentsLists']) ? array_map(fn(array $member) => StepMatchArgumentsList::fromArray($member) , $arr['stepMatchArgumentsLists']) : null,
        );
    }

    /**
     * Check that the type of 'id' matches expectations
     *
     * @psalm-assert array{id: mixed} $arr
     */
    private static function ensureId(array $arr): void
    {
        if (!array_key_exists('id', $arr)) {
            throw new SchemaViolationException('Property \'id\' is required but was not found');
        }
    }

    /**
     * Check that the type of 'stepDefinitionIds' matches expectations
     *
     * @psalm-assert array{stepDefinitionIds?: array} $arr
     */
    private static function ensureStepDefinitionIds(array $arr): void
    {
        if (array_key_exists('stepDefinitionIds', $arr) && !is_array($arr['stepDefinitionIds'])) {
            throw new SchemaViolationException('Property \'stepDefinitionIds\' was not array');
        }
    }

    /**
     * Check that the type of 'stepMatchArgumentsLists' matches expectations
     *
     * @psalm-assert array{stepMatchArgumentsLists?: array} $arr
     */
    private static function ensureStepMatchArgumentsLists(array $arr): void
    {
        if (array_key_exists('stepMatchArgumentsLists', $arr) && !is_array($arr['stepMatchArgumentsLists'])) {
            throw new SchemaViolationException('Property \'stepMatchArgumentsLists\' was not array');
        }
    }
}
