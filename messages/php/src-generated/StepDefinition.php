<?php declare(strict_types=1);

/**
 * This code was auto-generated by {this script}[https://github.com/cucumber/common/blob/main/messages/jsonschema/scripts/codegen.rb]
 */

namespace Cucumber\Messages;

use \JsonSerializable;

/**
 * Represents the StepDefinition message in Cucumber's message protocol
 * @see https://github.com/cucumber/common/tree/main/messages#readme
 *
 */
final class StepDefinition implements JsonSerializable
{
    use JsonEncodingTrait;

    private function __construct(

        public readonly string $id,

        public readonly StepDefinitionPattern $pattern,

        public readonly SourceReference $sourceReference,

    ){}

    /**
     * @throws SchemaViolationException
     *
     * @internal
     */
    public static function fromArray(array $arr) : self
    {
        self::ensureId($arr);
        self::ensurePattern($arr);
        self::ensureSourceReference($arr);

        return new self(
            (string) $arr['id'],
            StepDefinitionPattern::fromArray($arr['pattern']),
            SourceReference::fromArray($arr['sourceReference']),
        );
    }

    /**
     * Check that the type of 'id' matches expectations
     *
     * @psalm-assert array{id: mixed} $arr
     */
    private static function ensureId(array $arr): void
    {
        if (!array_key_exists('id', $arr)) {
            throw new SchemaViolationException('Property \'id\' is required but was not found');
        }
    }

    /**
     * Check that the type of 'pattern' matches expectations
     *
     * @psalm-assert array{pattern: array} $arr
     */
    private static function ensurePattern(array $arr): void
    {
        if (!array_key_exists('pattern', $arr)) {
            throw new SchemaViolationException('Property \'pattern\' is required but was not found');
        }
        if (array_key_exists('pattern', $arr) && !is_array($arr['pattern'])) {
            throw new SchemaViolationException('Property \'pattern\' was not array');
        }
    }

    /**
     * Check that the type of 'sourceReference' matches expectations
     *
     * @psalm-assert array{sourceReference: array} $arr
     */
    private static function ensureSourceReference(array $arr): void
    {
        if (!array_key_exists('sourceReference', $arr)) {
            throw new SchemaViolationException('Property \'sourceReference\' is required but was not found');
        }
        if (array_key_exists('sourceReference', $arr) && !is_array($arr['sourceReference'])) {
            throw new SchemaViolationException('Property \'sourceReference\' was not array');
        }
    }
}
