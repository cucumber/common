<?php declare(strict_types=1);

/**
 * This code was auto-generated by {this script}[https://github.com/cucumber/common/blob/main/messages/jsonschema/scripts/codegen.rb]
 */

namespace Cucumber\Messages;

use \JsonSerializable;

/**
 * Represents the TableCell message in Cucumber's message protocol
 * @see https://github.com/cucumber/common/tree/main/messages#readme
 *
 * A cell in a `TableRow` */
final class TableCell implements JsonSerializable
{
    use JsonEncodingTrait;

    private function __construct(

        /**
         * The location of the cell
         */
        public readonly Location $location,

        /**
         * The value of the cell
         */
        public readonly string $value,

    ){}

    /**
     * @throws SchemaViolationException
     *
     * @internal
     */
    public static function fromArray(array $arr) : self
    {
        self::ensureLocation($arr);
        self::ensureValue($arr);

        return new self(
            Location::fromArray($arr['location']),
            (string) $arr['value'],
        );
    }

    /**
     * Check that the type of 'location' matches expectations
     *
     * @psalm-assert array{location: array} $arr
     */
    private static function ensureLocation(array $arr): void
    {
        if (!array_key_exists('location', $arr)) {
            throw new SchemaViolationException('Property \'location\' is required but was not found');
        }
        if (array_key_exists('location', $arr) && !is_array($arr['location'])) {
            throw new SchemaViolationException('Property \'location\' was not array');
        }
    }

    /**
     * Check that the type of 'value' matches expectations
     *
     * @psalm-assert array{value: mixed} $arr
     */
    private static function ensureValue(array $arr): void
    {
        if (!array_key_exists('value', $arr)) {
            throw new SchemaViolationException('Property \'value\' is required but was not found');
        }
    }
}
