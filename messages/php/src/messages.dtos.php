<?php declare(strict_types=1);

/**
 * This code was auto-generated by {this script}[https://github.com/cucumber/common/blob/main/messages/jsonschema/scripts/codegen.rb]
 */

namespace Cucumber\Messages;

/**
 * Represents the Attachment message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * //// Attachments (parse errors, execution errors, screenshots, links...)
 * 
 * *
 *  An attachment represents any kind of data associated with a line in a
 *  [Source](#io.cucumber.messages.Source) file. It can be used for:
 * 
 *  * Syntax errors during parse time
 *  * Screenshots captured and attached during execution
 *  * Logs captured and attached during execution
 * 
 *  It is not to be used for runtime errors raised/thrown during execution. This
 *  is captured in `TestResult`.
 */
final class Attachment
{
    public function __construct(
        /**
         * *
         *  The body of the attachment. If `contentEncoding` is `IDENTITY`, the attachment
         *  is simply the string. If it's `BASE64`, the string should be Base64 decoded to
         *  obtain the attachment.
         */
        public readonly string $body,

        /**
         * *
         *  Whether to interpret `body` "as-is" (IDENTITY) or if it needs to be Base64-decoded (BASE64).
         * 
         *  Content encoding is *not* determined by the media type, but rather by the type
         *  of the object being attached:
         * 
         *  - string => IDENTITY
         *  - byte array => BASE64
         *  - stream => BASE64
         */
        public readonly Attachment\ContentEncoding $contentEncoding,

        /**
         * *
         *  Suggested file name of the attachment. (Provided by the user as an argument to `attach`)
         */
        public readonly string $fileName,

        /**
         * *
         *  The media type of the data. This can be any valid
         *  [IANA Media Type](https://www.iana.org/assignments/media-types/media-types.xhtml)
         *  as well as Cucumber-specific media types such as `text/x.cucumber.gherkin+plain`
         *  and `text/x.cucumber.stacktrace+plain`
         */
        public readonly string $mediaType,

        public readonly Source $source,

        public readonly string $testCaseStartedId,

        public readonly string $testStepId,

        /**
         * *
         *  A URL where the attachment can be retrieved. This field should not be set by Cucumber.
         *  It should be set by a program that reads a message stream and does the following for
         *  each Attachment message:
         * 
         *  - Writes the body (after base64 decoding if necessary) to a new file.
         *  - Sets `body` and `contentEncoding` to `null`
         *  - Writes out the new attachment message
         * 
         *  This will result in a smaller message stream, which can improve performance and
         *  reduce bandwidth of message consumers. It also makes it easier to process and download attachments
         *  separately from reports.
         */
        public readonly string $url,

    ){}
}


/**
 * Represents the Duration message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * The structure is pretty close of the Timestamp one. For clarity, a second type
 *  of message is used.
 */
final class Duration
{
    public function __construct(
        public readonly int $seconds,

        /**
         * Non-negative fractions of a second at nanosecond resolution. Negative
         *  second values with fractions must still have non-negative nanos values
         *  that count forward in time. Must be from 0 to 999,999,999
         *  inclusive.
         */
        public readonly int $nanos,

    ){}
}


/**
 * Represents the Envelope message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * When removing a field, replace it with reserved, rather than deleting the line.
 *  When adding a field, add it to the end and increment the number by one.
 *  See https://developers.google.com/protocol-buffers/docs/proto#updating for details
 * 
 * *
 *  All the messages that are passed between different components/processes are Envelope
 *  messages.
 */
final class Envelope
{
    public function __construct(
        public readonly Attachment $attachment,

        public readonly GherkinDocument $gherkinDocument,

        public readonly Hook $hook,

        public readonly Meta $meta,

        public readonly ParameterType $parameterType,

        public readonly ParseError $parseError,

        public readonly Pickle $pickle,

        public readonly Source $source,

        public readonly StepDefinition $stepDefinition,

        public readonly TestCase $testCase,

        public readonly TestCaseFinished $testCaseFinished,

        public readonly TestCaseStarted $testCaseStarted,

        public readonly TestRunFinished $testRunFinished,

        public readonly TestRunStarted $testRunStarted,

        public readonly TestStepFinished $testStepFinished,

        public readonly TestStepStarted $testStepStarted,

        public readonly UndefinedParameterType $undefinedParameterType,

    ){}
}


/**
 * Represents the GherkinDocument message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * *
 *  The [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree) of a Gherkin document.
 *  Cucumber implementations should *not* depend on `GherkinDocument` or any of its
 *  children for execution - use [Pickle](#io.cucumber.messages.Pickle) instead.
 * 
 *  The only consumers of `GherkinDocument` should only be formatters that produce
 *  "rich" output, resembling the original Gherkin document.
 */
final class GherkinDocument
{
    public function __construct(
        /**
         * *
         *  The [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)
         *  of the source, typically a file path relative to the root directory
         */
        public readonly string $uri,

        public readonly Feature $feature,

        /**
         * All the comments in the Gherkin document
         */
        public readonly array $comments,

    ){}
}


/**
 * Represents the Background message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class Background
{
    public function __construct(
        /**
         * The location of the `Background` keyword
         */
        public readonly Location $location,

        public readonly string $keyword,

        public readonly string $name,

        public readonly string $description,

        public readonly array $steps,

        public readonly string $id,

    ){}
}


/**
 * Represents the Comment message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * *
 *  A comment in a Gherkin document
 */
final class Comment
{
    public function __construct(
        /**
         * The location of the comment
         */
        public readonly Location $location,

        /**
         * The text of the comment
         */
        public readonly string $text,

    ){}
}


/**
 * Represents the DataTable message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class DataTable
{
    public function __construct(
        public readonly Location $location,

        public readonly array $rows,

    ){}
}


/**
 * Represents the DocString message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class DocString
{
    public function __construct(
        public readonly Location $location,

        public readonly string $mediaType,

        public readonly string $content,

        public readonly string $delimiter,

    ){}
}


/**
 * Represents the Examples message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class Examples
{
    public function __construct(
        /**
         * The location of the `Examples` keyword
         */
        public readonly Location $location,

        public readonly array $tags,

        public readonly string $keyword,

        public readonly string $name,

        public readonly string $description,

        public readonly TableRow $tableHeader,

        public readonly array $tableBody,

        public readonly string $id,

    ){}
}


/**
 * Represents the Feature message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class Feature
{
    public function __construct(
        /**
         * The location of the `Feature` keyword
         */
        public readonly Location $location,

        /**
         * All the tags placed above the `Feature` keyword
         */
        public readonly array $tags,

        /**
         * The [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language code of the Gherkin document
         */
        public readonly string $language,

        /**
         * The text of the `Feature` keyword (in the language specified by `language`)
         */
        public readonly string $keyword,

        /**
         * The name of the feature (the text following the `keyword`)
         */
        public readonly string $name,

        /**
         * The line(s) underneath the line with the `keyword` that are used as description
         */
        public readonly string $description,

        /**
         * Zero or more children
         */
        public readonly array $children,

    ){}
}


/**
 * Represents the FeatureChild message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * *
 *  A child node of a `Feature` node
 */
final class FeatureChild
{
    public function __construct(
        public readonly Rule $rule,

        public readonly Background $background,

        public readonly Scenario $scenario,

    ){}
}


/**
 * Represents the Rule message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class Rule
{
    public function __construct(
        /**
         * The location of the `Rule` keyword
         */
        public readonly Location $location,

        /**
         * All the tags placed above the `Rule` keyword
         */
        public readonly array $tags,

        public readonly string $keyword,

        public readonly string $name,

        public readonly string $description,

        public readonly array $children,

        public readonly string $id,

    ){}
}


/**
 * Represents the RuleChild message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * *
 *  A child node of a `Rule` node
 */
final class RuleChild
{
    public function __construct(
        public readonly Background $background,

        public readonly Scenario $scenario,

    ){}
}


/**
 * Represents the Scenario message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class Scenario
{
    public function __construct(
        /**
         * The location of the `Scenario` keyword
         */
        public readonly Location $location,

        public readonly array $tags,

        public readonly string $keyword,

        public readonly string $name,

        public readonly string $description,

        public readonly array $steps,

        public readonly array $examples,

        public readonly string $id,

    ){}
}


/**
 * Represents the Step message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * A step
 */
final class Step
{
    public function __construct(
        /**
         * The location of the steps' `keyword`
         */
        public readonly Location $location,

        public readonly string $keyword,

        public readonly string $text,

        public readonly DocString $docString,

        public readonly DataTable $dataTable,

        /**
         * Unique ID to be able to reference the Step from PickleStep
         */
        public readonly string $id,

    ){}
}


/**
 * Represents the TableCell message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * A cell in a `TableRow`
 */
final class TableCell
{
    public function __construct(
        /**
         * The location of the cell
         */
        public readonly Location $location,

        /**
         * The value of the cell
         */
        public readonly string $value,

    ){}
}


/**
 * Represents the TableRow message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * A row in a table
 */
final class TableRow
{
    public function __construct(
        /**
         * The location of the first cell in the row
         */
        public readonly Location $location,

        /**
         * Cells in the row
         */
        public readonly array $cells,

        public readonly string $id,

    ){}
}


/**
 * Represents the Tag message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * *
 *  A tag
 */
final class Tag
{
    public function __construct(
        /**
         * Location of the tag
         */
        public readonly Location $location,

        /**
         * The name of the tag (including the leading `@`)
         */
        public readonly string $name,

        /**
         * Unique ID to be able to reference the Tag from PickleTag
         */
        public readonly string $id,

    ){}
}


/**
 * Represents the Hook message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class Hook
{
    public function __construct(
        public readonly string $id,

        public readonly SourceReference $sourceReference,

        public readonly string $tagExpression,

    ){}
}


/**
 * Represents the Location message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * *
 *  Points to a line and a column in a text file
 */
final class Location
{
    public function __construct(
        public readonly int $line,

        public readonly int $column,

    ){}
}


/**
 * Represents the Meta message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * *
 *  This message contains meta information about the environment. Consumers can use
 *  this for various purposes.
 */
final class Meta
{
    public function __construct(
        /**
         * *
         *  The [SEMVER](https://semver.org/) version number of the protocol
         */
        public readonly string $protocolVersion,

        /**
         * SpecFlow, Cucumber-JVM, Cucumber.js, Cucumber-Ruby, Behat etc.
         */
        public readonly Product $implementation,

        /**
         * Java, Ruby, Node.js etc
         */
        public readonly Product $runtime,

        /**
         * Windows, Linux, MacOS etc
         */
        public readonly Product $os,

        /**
         * 386, arm, amd64 etc
         */
        public readonly Product $cpu,

        public readonly Ci $ci,

    ){}
}


/**
 * Represents the Ci message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * CI environment
 */
final class Ci
{
    public function __construct(
        /**
         * Name of the CI product, e.g. "Jenkins", "CircleCI" etc.
         */
        public readonly string $name,

        /**
         * Link to the build
         */
        public readonly string $url,

        /**
         * The build number. Some CI servers use non-numeric build numbers, which is why this is a string
         */
        public readonly string $buildNumber,

        public readonly Git $git,

    ){}
}


/**
 * Represents the Git message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * Information about Git, provided by the Build/CI server as environment
 *  variables.
 */
final class Git
{
    public function __construct(
        public readonly string $remote,

        public readonly string $revision,

        public readonly string $branch,

        public readonly string $tag,

    ){}
}


/**
 * Represents the Product message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * Used to describe various properties of Meta
 */
final class Product
{
    public function __construct(
        /**
         * The product name
         */
        public readonly string $name,

        /**
         * The product version
         */
        public readonly string $version,

    ){}
}


/**
 * Represents the ParameterType message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class ParameterType
{
    public function __construct(
        /**
         * The name is unique, so we don't need an id.
         */
        public readonly string $name,

        public readonly array $regularExpressions,

        public readonly bool $preferForRegularExpressionMatch,

        public readonly bool $useForSnippets,

        public readonly string $id,

    ){}
}


/**
 * Represents the ParseError message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class ParseError
{
    public function __construct(
        public readonly SourceReference $source,

        public readonly string $message,

    ){}
}


/**
 * Represents the Pickle message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * //// Pickles
 * 
 * *
 *  A `Pickle` represents a template for a `TestCase`. It is typically derived
 *  from another format, such as [GherkinDocument](#io.cucumber.messages.GherkinDocument).
 *  In the future a `Pickle` may be derived from other formats such as Markdown or
 *  Excel files.
 * 
 *  By making `Pickle` the main data structure Cucumber uses for execution, the
 *  implementation of Cucumber itself becomes simpler, as it doesn't have to deal
 *  with the complex structure of a [GherkinDocument](#io.cucumber.messages.GherkinDocument).
 * 
 *  Each `PickleStep` of a `Pickle` is matched with a `StepDefinition` to create a `TestCase`
 */
final class Pickle
{
    public function __construct(
        /**
         * *
         *  A unique id for the pickle. This is a [SHA1](https://en.wikipedia.org/wiki/SHA-1) hash
         *  from the source data and the `locations` of the pickle.
         *  This ID will change if source the file is modified.
         */
        public readonly string $id,

        /**
         * The uri of the source file
         */
        public readonly string $uri,

        /**
         * The name of the pickle
         */
        public readonly string $name,

        /**
         * The language of the pickle
         */
        public readonly string $language,

        /**
         * One or more steps
         */
        public readonly array $steps,

        /**
         * *
         *  One or more tags. If this pickle is constructed from a Gherkin document,
         *  It includes inherited tags from the `Feature` as well.
         */
        public readonly array $tags,

        /**
         * *
         *  Points to the AST node locations of the pickle. The last one represents the unique
         *  id of the pickle. A pickle constructed from `Examples` will have the first
         *  id originating from the `Scenario` AST node, and the second from the `TableRow` AST node.
         */
        public readonly array $astNodeIds,

    ){}
}


/**
 * Represents the PickleDocString message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class PickleDocString
{
    public function __construct(
        public readonly string $mediaType,

        public readonly string $content,

    ){}
}


/**
 * Represents the PickleStep message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * *
 *  An executable step
 */
final class PickleStep
{
    public function __construct(
        public readonly PickleStepArgument $argument,

        /**
         * References the IDs of the source of the step. For Gherkin, this can be
         *  the ID of a Step, and possibly also the ID of a TableRow
         */
        public readonly array $astNodeIds,

        /**
         * A unique ID for the PickleStep
         */
        public readonly string $id,

        public readonly string $text,

    ){}
}


/**
 * Represents the PickleStepArgument message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * An optional argument
 */
final class PickleStepArgument
{
    public function __construct(
        public readonly PickleDocString $docString,

        public readonly PickleTable $dataTable,

    ){}
}


/**
 * Represents the PickleTable message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class PickleTable
{
    public function __construct(
        public readonly array $rows,

    ){}
}


/**
 * Represents the PickleTableCell message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class PickleTableCell
{
    public function __construct(
        public readonly string $value,

    ){}
}


/**
 * Represents the PickleTableRow message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class PickleTableRow
{
    public function __construct(
        public readonly array $cells,

    ){}
}


/**
 * Represents the PickleTag message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * *
 *  A tag
 */
final class PickleTag
{
    public function __construct(
        public readonly string $name,

        /**
         * Points to the AST node this was created from
         */
        public readonly string $astNodeId,

    ){}
}


/**
 * Represents the Source message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * //// Source
 * 
 * *
 *  A source file, typically a Gherkin document or Java/Ruby/JavaScript source code
 */
final class Source
{
    public function __construct(
        /**
         * *
         *  The [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)
         *  of the source, typically a file path relative to the root directory
         */
        public readonly string $uri,

        /**
         * The contents of the file
         */
        public readonly string $data,

        /**
         * The media type of the file. Can be used to specify custom types, such as
         *  text/x.cucumber.gherkin+plain
         */
        public readonly Source\MediaType $mediaType,

    ){}
}


/**
 * Represents the SourceReference message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * *
 *  Points to a [Source](#io.cucumber.messages.Source) identified by `uri` and a
 *  [Location](#io.cucumber.messages.Location) within that file.
 */
final class SourceReference
{
    public function __construct(
        public readonly string $uri,

        public readonly JavaMethod $javaMethod,

        public readonly JavaStackTraceElement $javaStackTraceElement,

        public readonly Location $location,

    ){}
}


/**
 * Represents the JavaMethod message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class JavaMethod
{
    public function __construct(
        public readonly string $className,

        public readonly string $methodName,

        public readonly array $methodParameterTypes,

    ){}
}


/**
 * Represents the JavaStackTraceElement message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class JavaStackTraceElement
{
    public function __construct(
        public readonly string $className,

        public readonly string $fileName,

        public readonly string $methodName,

    ){}
}


/**
 * Represents the StepDefinition message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class StepDefinition
{
    public function __construct(
        public readonly string $id,

        public readonly StepDefinitionPattern $pattern,

        public readonly SourceReference $sourceReference,

    ){}
}


/**
 * Represents the StepDefinitionPattern message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class StepDefinitionPattern
{
    public function __construct(
        public readonly string $source,

        public readonly StepDefinitionPattern\Type $type,

    ){}
}


/**
 * Represents the TestCase message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * //// TestCases
 * 
 * *
 *  A `TestCase` contains a sequence of `TestStep`s.
 */
final class TestCase
{
    public function __construct(
        public readonly string $id,

        /**
         * The ID of the `Pickle` this `TestCase` is derived from.
         */
        public readonly string $pickleId,

        public readonly array $testSteps,

    ){}
}


/**
 * Represents the Group message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class Group
{
    public function __construct(
        public readonly array $children,

        public readonly int $start,

        public readonly string $value,

    ){}
}


/**
 * Represents the StepMatchArgument message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * *
 *  Represents a single argument extracted from a step match and passed to a step definition.
 *  This is used for the following purposes:
 *  - Construct an argument to pass to a step definition (possibly through a parameter type transform)
 *  - Highlight the matched parameter in rich formatters such as the HTML formatter
 * 
 *  This message closely matches the `Argument` class in the `cucumber-expressions` library.
 */
final class StepMatchArgument
{
    public function __construct(
        /**
         * *
         *  Represents the outermost capture group of an argument. This message closely matches the
         *  `Group` class in the `cucumber-expressions` library.
         */
        public readonly Group $group,

        public readonly string $parameterTypeName,

    ){}
}


/**
 * Represents the StepMatchArgumentsList message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class StepMatchArgumentsList
{
    public function __construct(
        public readonly array $stepMatchArguments,

    ){}
}


/**
 * Represents the TestStep message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *
 * *
 *  A `TestStep` is derived from either a `PickleStep`
 *  combined with a `StepDefinition`, or from a `Hook`.
 */
final class TestStep
{
    public function __construct(
        /**
         * Pointer to the `Hook` (if derived from a Hook)
         */
        public readonly string $hookId,

        public readonly string $id,

        /**
         * Pointer to the `PickleStep` (if derived from a `PickleStep`)
         */
        public readonly string $pickleStepId,

        /**
         * Pointer to all the matching `StepDefinition`s (if derived from a `PickleStep`)
         */
        public readonly array $stepDefinitionIds,

        /**
         * A list of list of StepMatchArgument (if derived from a `PickleStep`).
         *  Each element represents a matching step definition. A size of 0 means `UNDEFINED`,
         *  and a size of 2+ means `AMBIGUOUS`
         */
        public readonly array $stepMatchArgumentsLists,

    ){}
}


/**
 * Represents the TestCaseFinished message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class TestCaseFinished
{
    public function __construct(
        public readonly string $testCaseStartedId,

        public readonly Timestamp $timestamp,

        public readonly bool $willBeRetried,

    ){}
}


/**
 * Represents the TestCaseStarted message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class TestCaseStarted
{
    public function __construct(
        /**
         * *
         *  The first attempt should have value 0, and for each retry the value
         *  should increase by 1.
         */
        public readonly int $attempt,

        /**
         * *
         *  Because a `TestCase` can be run multiple times (in case of a retry),
         *  we use this field to group messages relating to the same attempt.
         */
        public readonly string $id,

        public readonly string $testCaseId,

        public readonly Timestamp $timestamp,

    ){}
}


/**
 * Represents the TestRunFinished message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class TestRunFinished
{
    public function __construct(
        /**
         * Error message. Can be a stack trace from a failed `BeforeAll` or `AfterAll`.
         *  If there are undefined parameter types, the message is simply
         *  "The following parameter type(s() are not defined: xxx, yyy".
         *  The independent `UndefinedParameterType` messages can be used to generate
         *  snippets for those parameter types.
         */
        public readonly string $message,

        /**
         * success = StrictModeEnabled ? (failed_count == 0 && ambiguous_count == 0 && undefined_count == 0 && pending_count == 0) : (failed_count == 0 && ambiguous_count == 0)
         */
        public readonly bool $success,

        /**
         * Timestamp when the TestRun is finished
         */
        public readonly Timestamp $timestamp,

    ){}
}


/**
 * Represents the TestRunStarted message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class TestRunStarted
{
    public function __construct(
        public readonly Timestamp $timestamp,

    ){}
}


/**
 * Represents the TestStepFinished message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class TestStepFinished
{
    public function __construct(
        public readonly string $testCaseStartedId,

        public readonly string $testStepId,

        public readonly TestStepResult $testStepResult,

        public readonly Timestamp $timestamp,

    ){}
}


/**
 * Represents the TestStepResult message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class TestStepResult
{
    public function __construct(
        public readonly Duration $duration,

        public readonly string $message,

        public readonly TestStepResult\Status $status,

    ){}
}


/**
 * Represents the TestStepStarted message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class TestStepStarted
{
    public function __construct(
        public readonly string $testCaseStartedId,

        public readonly string $testStepId,

        public readonly Timestamp $timestamp,

    ){}
}


/**
 * Represents the Timestamp message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class Timestamp
{
    public function __construct(
        /**
         * Represents seconds of UTC time since Unix epoch
         *  1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
         *  9999-12-31T23:59:59Z inclusive.
         */
        public readonly int $seconds,

        /**
         * Non-negative fractions of a second at nanosecond resolution. Negative
         *  second values with fractions must still have non-negative nanos values
         *  that count forward in time. Must be from 0 to 999,999,999
         *  inclusive.
         */
        public readonly int $nanos,

    ){}
}


/**
 * Represents the UndefinedParameterType message in Cucumber's {message protocol}[https://github.com/cucumber/common/tree/main/messages#readme].
 *

 */
final class UndefinedParameterType
{
    public function __construct(
        public readonly string $expression,

        public readonly string $name,

    ){}
}


