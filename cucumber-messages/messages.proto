syntax = "proto3";
import "google/protobuf/timestamp.proto";
package io.cucumber.messages;
option ruby_package = "Cucumber.Messages";
option go_package = "messages";

// When removing a field, comment it out, rather than deleting the line.
// When adding a field, increment the number by one.

// All messages sent between processes must be of type Wrapper
message Wrapper {
  oneof message {
    // Gherkin messages
    Source source = 1;
    GherkinDocument gherkinDocument = 2;
    Pickle pickle = 3;
    Attachment attachment = 4;
    // Execution messages
    TestCaseStarted testCaseStarted = 5;
    TestStepStarted testStepStarted = 6;
    TestStepFinished testStepFinished = 7;
    TestCaseFinished testCaseFinished = 8;
    TestHookStarted testHookStarted = 9;
    TestHookFinished testHookFinished = 10;
    PickleAccepted pickleAccepted = 11;
    PickleRejected pickleRejected = 12;
    TestCasePrepared testCasePrepared = 13;
    TestRunStarted testRunStarted = 14;
    TestRunFinished testRunFinished = 15;
    // Cucumber-Engine Messages
    CommandStart commandStart = 16;
    CommandActionComplete commandActionComplete = 17;
    CommandRunBeforeTestRunHooks commandRunBeforeTestRunHooks = 18;
    CommandInitializeTestCase commandInitializeTestCase = 19;
    CommandRunBeforeTestCaseHook commandRunBeforeTestCaseHook = 20;
    CommandRunTestStep commandRunTestStep = 21;
    CommandRunAfterTestCaseHook commandRunAfterTestCaseHook = 22;
    CommandRunAfterTestRunHooks commandRunAfterTestRunHooks = 23;
    CommandGenerateSnippet commandGenerateSnippet = 24;
    string commandError = 25;
  }
}

////// Source

message SourceReference {
  string uri = 1;
  Location location = 2;
}

message Location {
  uint32 line = 1;
  uint32 column = 2;
}

message Attachment {
  SourceReference source = 1;
  string data = 2;
  Media media = 3;
}

message Media {
  string encoding = 1;
  string content_type = 2;
}

message Source {
  string uri = 1;
  string data = 2;
  Media media = 3;
}

////// Gherkin

message GherkinDocument {
  string uri = 1;
  Feature feature = 2;
  repeated Comment comments = 3;
}

message Feature {
  Location location = 1;
  repeated Tag tags = 2;
  string language = 3;
  string keyword = 4;
  string name = 5;
  string description = 6;
  repeated FeatureChild children = 7;
}

message FeatureChild {
  oneof value {
    Rule rule = 1;
    Background background = 2;
    Scenario scenario = 3;
  }
}

message Rule {
  Location location = 1;
  string keyword = 2;
  string name = 3;
  string description = 4;
  repeated RuleChild children = 5;
}

message RuleChild {
  oneof value {
    Background background = 1;
    Scenario scenario = 2;
  }
}

message Background {
  Location location = 1;
  string keyword = 2;
  string name = 3;
  string description = 4;
  repeated Step steps = 5;
}

message Scenario {
  Location location = 1;
  repeated Tag tags = 2;
  string keyword = 3;
  string name = 4;
  string description = 5;
  repeated Step steps = 6;
  repeated Examples examples = 7;
}

message Comment {
  Location location = 1;
  string text = 2;
}

message DataTable {
  Location location = 1;
  repeated TableRow rows = 2;
}

message DocString {
  Location location = 1;
  string content_type = 2;
  string content = 3;
  string delimiter = 4;
}

message Examples {
  Location location = 1;
  repeated Tag tags = 2;
  string keyword = 3;
  string name = 4;
  string description = 5;
  TableRow table_header = 6;
  repeated TableRow table_body = 7;
}

message Step {
  Location location = 1;
  string keyword = 2;
  string text = 3;
  oneof argument {
    DocString doc_string = 5;
    DataTable data_table = 6;
  }
}

message TableCell {
  Location location = 1;
  string value = 2;
}

message TableRow {
  Location location = 1;
  repeated TableCell cells = 2;
}

message Tag {
  Location location = 1;
  string name = 2;
}

////// Pickles

message Pickle {
  string id = 1;
  string uri = 2;
  string name = 3;
  string language = 4;
  repeated PickleStep steps = 5;
  repeated PickleTag tags = 6;
  repeated Location locations = 7;
}

message PickleStep {
  string text = 1;
  repeated Location locations = 2;
  oneof argument {
    PickleDocString doc_string = 3;
    PickleTable data_table = 4;
  }
}

message PickleDocString {
  Location location = 1;
  string contentType = 2;
  string content = 3;
}

message PickleTable {
  repeated PickleTableRow rows = 1;
}

message PickleTableCell {
  Location location = 1;
  string value = 2;
}

message PickleTableRow {
  repeated PickleTableCell cells = 1;
}

message PickleTag {
  Location location = 1;
  string name = 2;
}
////// Filtering

message PickleAccepted {
  string pickleId = 1;
}

message PickleRejected {
  string pickleId = 2;
}

////// Results

message TestRunStarted {
  google.protobuf.Timestamp timestamp = 1;
  string cucumberImplementation = 2;
}

message TestCasePreparedStep {
  SourceReference sourceLocation = 1;
  SourceReference actionLocation = 2;
}

message TestCasePrepared {
  string pickleId = 1;
  repeated TestCasePreparedStep steps = 2;
}

message TestCaseStarted {
  string pickleId = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message TestCaseFinished {
  string pickleId = 1;
  google.protobuf.Timestamp timestamp = 2;
  TestResult testResult = 3;
}

message TestStepStarted {
  string pickleId = 1;
  uint32 index = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message TestStepFinished {
  string pickleId = 1;
  uint32 index = 2;
  TestResult testResult = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message TestHookStarted {
  string pickleId = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message TestHookFinished {
  string pickleId = 1;
  TestResult testResult = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message TestResult {
  Status status = 1;
  string message = 2;
  uint64 durationNanoseconds = 3;
}

enum Status {
  AMBIGUOUS = 0;
  FAILED = 1;
  PASSED = 2;
  PENDING = 3;
  SKIPPED = 4;
  UNDEFINED = 5;
}

message TestRunFinished {
  bool success = 1;
}

////// Commands

message CommandStart {
  string baseDirectory = 2;
  SourcesConfig sourcesConfig = 3;
  RuntimeConfig runtimeConfig = 4;
  SupportCodeConfig supportCodeConfig = 5;
}

message SourcesConfig {
  repeated string absolutePaths = 1;
  string language = 2;
  SourcesFilterConfig filters = 3;
  SourcesOrder order = 4;
}

message SourcesFilterConfig {
  string tagExpression = 1;
  repeated string nameRegularExpressions = 2;
  repeated UriToLinesMapping uriToLinesMapping = 3;
}

message UriToLinesMapping {
  string absolutePath = 1;
  repeated uint64 lines = 2;
}

message SourcesOrder {
  SourcesOrderType type = 1;
  uint64 seed = 2;
}

enum SourcesOrderType {
  ORDER_OF_DEFINITION = 0;
  RANDOM = 1;
}

message RuntimeConfig {
  bool isFailFast = 1;
  bool isDryRun = 2;
  bool isStrict = 3;
  uint64 maxParallel = 4;
}

message SupportCodeConfig {
  repeated TestCaseHookDefinitionConfig beforeTestCaseHookDefinitionConfigs = 1;
  repeated TestCaseHookDefinitionConfig afterTestCaseHookDefinitionConfigs = 2;
  repeated StepDefinitionConfig stepDefinitionConfigs = 3;
  repeated ParameterTypeConfig parameterTypeConfigs = 4;
}

message TestCaseHookDefinitionConfig {
  string id = 1;
  string tagExpression = 2;
  SourceReference location = 3;
}

message StepDefinitionConfig {
  string id = 1;
  StepDefinitionPattern pattern = 2;
  SourceReference location = 3;
}

message StepDefinitionPattern {
  string source = 1;
  StepDefinitionPatternType type = 2;
}

enum StepDefinitionPatternType {
  CUCUMBER_EXPRESSION = 0;
  REGULAR_EXPRESSION = 1;
}

message ParameterTypeConfig {
  string name = 1;
  repeated string regularExpressions = 2;
  bool preferForRegularExpressionMatch = 3;
  bool useForSnippets = 4;
}

message CommandActionComplete {
  string completedId = 1;

  oneof result {
    // Used for responses to CommandRunBeforeTestCaseHook / CommandRunTestStep / CommandRunAfterTestCaseHook
    TestResult testResult = 2;
    // Used for response to CommandGenerateSnippet
    string snippet = 3;
  }
}

message CommandRunBeforeTestRunHooks {
  string actionId = 1;
}

message CommandRunAfterTestRunHooks {
  string actionId = 1;
}

message CommandInitializeTestCase {
  string actionId = 1;
  string testCaseId = 2;
  Pickle pickle = 3;
}

message CommandRunBeforeTestCaseHook {
  string actionId = 1;
  string testCaseId = 2;
  string testCaseHookDefinitionId = 3;
}

message CommandRunAfterTestCaseHook {
  string actionId = 1;
  string testCaseId = 2;
  string testCaseHookDefinitionId = 3;
}

message CommandRunTestStep {
  string actionId = 1;
  string testCaseId = 2;
  string stepDefinitionId = 3;
  repeated PatternMatch patternMatches = 4;
}

message PatternMatch {
  repeated string captures = 1;
  string parameterTypeName = 2;
  oneof pickleArgument {
    PickleDocString doc_string = 3;
    PickleTable data_table = 4;
  }
}

message CommandGenerateSnippet {
  string actionId = 1;
  repeated GeneratedExpression generatedExpressions = 2;
  oneof pickleArgument {
    PickleDocString doc_string = 3;
    PickleTable data_table = 4;
  }
}

message GeneratedExpression {
  string text = 1;
  repeated string parameterTypeNames = 2;
}
