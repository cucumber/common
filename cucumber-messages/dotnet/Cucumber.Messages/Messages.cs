// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Io.Cucumber.Messages {

  /// <summary>Holder for reflection information generated from messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXNzYWdlcy5wcm90bxIUaW8uY3VjdW1iZXIubWVzc2FnZXMiKwoJVGlt",
            "ZXN0YW1wEg8KB3NlY29uZHMYASABKAMSDQoFbmFub3MYAiABKAUiKgoIRHVy",
            "YXRpb24SDwoHc2Vjb25kcxgBIAEoAxINCgVuYW5vcxgCIAEoBSKQDgoIRW52",
            "ZWxvcGUSLgoGc291cmNlGAEgASgLMhwuaW8uY3VjdW1iZXIubWVzc2FnZXMu",
            "U291cmNlSAASQQoQZ2hlcmtpbl9kb2N1bWVudBgCIAEoCzIlLmlvLmN1Y3Vt",
            "YmVyLm1lc3NhZ2VzLkdoZXJraW5Eb2N1bWVudEgAEi4KBnBpY2tsZRgDIAEo",
            "CzIcLmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLlBpY2tsZUgAEjYKCmF0dGFjaG1l",
            "bnQYBCABKAsyIC5pby5jdWN1bWJlci5tZXNzYWdlcy5BdHRhY2htZW50SAAS",
            "QgoRdGVzdF9jYXNlX3N0YXJ0ZWQYBSABKAsyJS5pby5jdWN1bWJlci5tZXNz",
            "YWdlcy5UZXN0Q2FzZVN0YXJ0ZWRIABJCChF0ZXN0X3N0ZXBfc3RhcnRlZBgG",
            "IAEoCzIlLmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLlRlc3RTdGVwU3RhcnRlZEgA",
            "EkQKEnRlc3Rfc3RlcF9maW5pc2hlZBgHIAEoCzImLmlvLmN1Y3VtYmVyLm1l",
            "c3NhZ2VzLlRlc3RTdGVwRmluaXNoZWRIABJEChJ0ZXN0X2Nhc2VfZmluaXNo",
            "ZWQYCCABKAsyJi5pby5jdWN1bWJlci5tZXNzYWdlcy5UZXN0Q2FzZUZpbmlz",
            "aGVkSAASPwoPcGlja2xlX2FjY2VwdGVkGAkgASgLMiQuaW8uY3VjdW1iZXIu",
            "bWVzc2FnZXMuUGlja2xlQWNjZXB0ZWRIABI/Cg9waWNrbGVfcmVqZWN0ZWQY",
            "CiABKAsyJC5pby5jdWN1bWJlci5tZXNzYWdlcy5QaWNrbGVSZWplY3RlZEgA",
            "EkQKEnRlc3RfY2FzZV9wcmVwYXJlZBgLIAEoCzImLmlvLmN1Y3VtYmVyLm1l",
            "c3NhZ2VzLlRlc3RDYXNlUHJlcGFyZWRIABJAChB0ZXN0X3J1bl9zdGFydGVk",
            "GAwgASgLMiQuaW8uY3VjdW1iZXIubWVzc2FnZXMuVGVzdFJ1blN0YXJ0ZWRI",
            "ABJCChF0ZXN0X3J1bl9maW5pc2hlZBgNIAEoCzIlLmlvLmN1Y3VtYmVyLm1l",
            "c3NhZ2VzLlRlc3RSdW5GaW5pc2hlZEgAEjsKDWNvbW1hbmRfc3RhcnQYDiAB",
            "KAsyIi5pby5jdWN1bWJlci5tZXNzYWdlcy5Db21tYW5kU3RhcnRIABJOChdj",
            "b21tYW5kX2FjdGlvbl9jb21wbGV0ZRgPIAEoCzIrLmlvLmN1Y3VtYmVyLm1l",
            "c3NhZ2VzLkNvbW1hbmRBY3Rpb25Db21wbGV0ZUgAEl8KIWNvbW1hbmRfcnVu",
            "X2JlZm9yZV90ZXN0X3J1bl9ob29rcxgQIAEoCzIyLmlvLmN1Y3VtYmVyLm1l",
            "c3NhZ2VzLkNvbW1hbmRSdW5CZWZvcmVUZXN0UnVuSG9va3NIABJXChxjb21t",
            "YW5kX2luaXRpYWxpemVfdGVzdF9jYXNlGBEgASgLMi8uaW8uY3VjdW1iZXIu",
            "bWVzc2FnZXMuQ29tbWFuZEluaXRpYWxpemVUZXN0Q2FzZUgAEl8KIWNvbW1h",
            "bmRfcnVuX2JlZm9yZV90ZXN0X2Nhc2VfaG9vaxgSIAEoCzIyLmlvLmN1Y3Vt",
            "YmVyLm1lc3NhZ2VzLkNvbW1hbmRSdW5CZWZvcmVUZXN0Q2FzZUhvb2tIABJJ",
            "ChVjb21tYW5kX3J1bl90ZXN0X3N0ZXAYEyABKAsyKC5pby5jdWN1bWJlci5t",
            "ZXNzYWdlcy5Db21tYW5kUnVuVGVzdFN0ZXBIABJdCiBjb21tYW5kX3J1bl9h",
            "ZnRlcl90ZXN0X2Nhc2VfaG9vaxgUIAEoCzIxLmlvLmN1Y3VtYmVyLm1lc3Nh",
            "Z2VzLkNvbW1hbmRSdW5BZnRlclRlc3RDYXNlSG9va0gAEl0KIGNvbW1hbmRf",
            "cnVuX2FmdGVyX3Rlc3RfcnVuX2hvb2tzGBUgASgLMjEuaW8uY3VjdW1iZXIu",
            "bWVzc2FnZXMuQ29tbWFuZFJ1bkFmdGVyVGVzdFJ1bkhvb2tzSAASUAoYY29t",
            "bWFuZF9nZW5lcmF0ZV9zbmlwcGV0GBYgASgLMiwuaW8uY3VjdW1iZXIubWVz",
            "c2FnZXMuQ29tbWFuZEdlbmVyYXRlU25pcHBldEgAEhcKDWNvbW1hbmRfZXJy",
            "b3IYFyABKAlIABIzCgl0ZXN0X2Nhc2UYGCABKAsyHi5pby5jdWN1bWJlci5t",
            "ZXNzYWdlcy5UZXN0Q2FzZUgAEj8KD3N0ZXBfZGVmaW5pdGlvbhgZIAEoCzIk",
            "LmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLlN0ZXBEZWZpbml0aW9uSAASKgoEaG9v",
            "axgaIAEoCzIaLmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLkhvb2tIAEIJCgdtZXNz",
            "YWdlIigKCExvY2F0aW9uEgwKBGxpbmUYASABKA0SDgoGY29sdW1uGAIgASgN",
            "IlAKD1NvdXJjZVJlZmVyZW5jZRILCgN1cmkYASABKAkSMAoIbG9jYXRpb24Y",
            "AiABKAsyHi5pby5jdWN1bWJlci5tZXNzYWdlcy5Mb2NhdGlvbiI9CgZTb3Vy",
            "Y2USCwoDdXJpGAEgASgJEgwKBGRhdGEYAiABKAkSEgoKbWVkaWFfdHlwZRgE",
            "IAEoCUoECAMQBCKuFgoPR2hlcmtpbkRvY3VtZW50EgsKA3VyaRgBIAEoCRI+",
            "CgdmZWF0dXJlGAIgASgLMi0uaW8uY3VjdW1iZXIubWVzc2FnZXMuR2hlcmtp",
            "bkRvY3VtZW50LkZlYXR1cmUSPwoIY29tbWVudHMYAyADKAsyLS5pby5jdWN1",
            "bWJlci5tZXNzYWdlcy5HaGVya2luRG9jdW1lbnQuQ29tbWVudBpJCgdDb21t",
            "ZW50EjAKCGxvY2F0aW9uGAEgASgLMh4uaW8uY3VjdW1iZXIubWVzc2FnZXMu",
            "TG9jYXRpb24SDAoEdGV4dBgCIAEoCRrBFAoHRmVhdHVyZRIwCghsb2NhdGlv",
            "bhgBIAEoCzIeLmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLkxvY2F0aW9uEj8KBHRh",
            "Z3MYAiADKAsyMS5pby5jdWN1bWJlci5tZXNzYWdlcy5HaGVya2luRG9jdW1l",
            "bnQuRmVhdHVyZS5UYWcSEAoIbGFuZ3VhZ2UYAyABKAkSDwoHa2V5d29yZBgE",
            "IAEoCRIMCgRuYW1lGAUgASgJEhMKC2Rlc2NyaXB0aW9uGAYgASgJEkwKCGNo",
            "aWxkcmVuGAcgAygLMjouaW8uY3VjdW1iZXIubWVzc2FnZXMuR2hlcmtpbkRv",
            "Y3VtZW50LkZlYXR1cmUuRmVhdHVyZUNoaWxkGlEKA1RhZxIwCghsb2NhdGlv",
            "bhgBIAEoCzIeLmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLkxvY2F0aW9uEgwKBG5h",
            "bWUYAiABKAkSCgoCaWQYAyABKAka/gQKDEZlYXR1cmVDaGlsZBJPCgRydWxl",
            "GAEgASgLMj8uaW8uY3VjdW1iZXIubWVzc2FnZXMuR2hlcmtpbkRvY3VtZW50",
            "LkZlYXR1cmUuRmVhdHVyZUNoaWxkLlJ1bGVIABJOCgpiYWNrZ3JvdW5kGAIg",
            "ASgLMjguaW8uY3VjdW1iZXIubWVzc2FnZXMuR2hlcmtpbkRvY3VtZW50LkZl",
            "YXR1cmUuQmFja2dyb3VuZEgAEkoKCHNjZW5hcmlvGAMgASgLMjYuaW8uY3Vj",
            "dW1iZXIubWVzc2FnZXMuR2hlcmtpbkRvY3VtZW50LkZlYXR1cmUuU2NlbmFy",
            "aW9IABrEAQoEUnVsZRIwCghsb2NhdGlvbhgBIAEoCzIeLmlvLmN1Y3VtYmVy",
            "Lm1lc3NhZ2VzLkxvY2F0aW9uEg8KB2tleXdvcmQYAiABKAkSDAoEbmFtZRgD",
            "IAEoCRITCgtkZXNjcmlwdGlvbhgEIAEoCRJWCghjaGlsZHJlbhgFIAMoCzJE",
            "LmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLkdoZXJraW5Eb2N1bWVudC5GZWF0dXJl",
            "LkZlYXR1cmVDaGlsZC5SdWxlQ2hpbGQasAEKCVJ1bGVDaGlsZBJOCgpiYWNr",
            "Z3JvdW5kGAEgASgLMjguaW8uY3VjdW1iZXIubWVzc2FnZXMuR2hlcmtpbkRv",
            "Y3VtZW50LkZlYXR1cmUuQmFja2dyb3VuZEgAEkoKCHNjZW5hcmlvGAIgASgL",
            "MjYuaW8uY3VjdW1iZXIubWVzc2FnZXMuR2hlcmtpbkRvY3VtZW50LkZlYXR1",
            "cmUuU2NlbmFyaW9IAEIHCgV2YWx1ZUIHCgV2YWx1ZRq1AQoKQmFja2dyb3Vu",
            "ZBIwCghsb2NhdGlvbhgBIAEoCzIeLmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLkxv",
            "Y2F0aW9uEg8KB2tleXdvcmQYAiABKAkSDAoEbmFtZRgDIAEoCRITCgtkZXNj",
            "cmlwdGlvbhgEIAEoCRJBCgVzdGVwcxgFIAMoCzIyLmlvLmN1Y3VtYmVyLm1l",
            "c3NhZ2VzLkdoZXJraW5Eb2N1bWVudC5GZWF0dXJlLlN0ZXAaoQUKCFNjZW5h",
            "cmlvEjAKCGxvY2F0aW9uGAEgASgLMh4uaW8uY3VjdW1iZXIubWVzc2FnZXMu",
            "TG9jYXRpb24SPwoEdGFncxgCIAMoCzIxLmlvLmN1Y3VtYmVyLm1lc3NhZ2Vz",
            "LkdoZXJraW5Eb2N1bWVudC5GZWF0dXJlLlRhZxIPCgdrZXl3b3JkGAMgASgJ",
            "EgwKBG5hbWUYBCABKAkSEwoLZGVzY3JpcHRpb24YBSABKAkSQQoFc3RlcHMY",
            "BiADKAsyMi5pby5jdWN1bWJlci5tZXNzYWdlcy5HaGVya2luRG9jdW1lbnQu",
            "RmVhdHVyZS5TdGVwElEKCGV4YW1wbGVzGAcgAygLMj8uaW8uY3VjdW1iZXIu",
            "bWVzc2FnZXMuR2hlcmtpbkRvY3VtZW50LkZlYXR1cmUuU2NlbmFyaW8uRXhh",
            "bXBsZXMSCgoCaWQYCCABKAkaywIKCEV4YW1wbGVzEjAKCGxvY2F0aW9uGAEg",
            "ASgLMh4uaW8uY3VjdW1iZXIubWVzc2FnZXMuTG9jYXRpb24SPwoEdGFncxgC",
            "IAMoCzIxLmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLkdoZXJraW5Eb2N1bWVudC5G",
            "ZWF0dXJlLlRhZxIPCgdrZXl3b3JkGAMgASgJEgwKBG5hbWUYBCABKAkSEwoL",
            "ZGVzY3JpcHRpb24YBSABKAkSTAoMdGFibGVfaGVhZGVyGAYgASgLMjYuaW8u",
            "Y3VjdW1iZXIubWVzc2FnZXMuR2hlcmtpbkRvY3VtZW50LkZlYXR1cmUuVGFi",
            "bGVSb3cSSgoKdGFibGVfYm9keRgHIAMoCzI2LmlvLmN1Y3VtYmVyLm1lc3Nh",
            "Z2VzLkdoZXJraW5Eb2N1bWVudC5GZWF0dXJlLlRhYmxlUm93GucBCghUYWJs",
            "ZVJvdxIwCghsb2NhdGlvbhgBIAEoCzIeLmlvLmN1Y3VtYmVyLm1lc3NhZ2Vz",
            "LkxvY2F0aW9uEk8KBWNlbGxzGAIgAygLMkAuaW8uY3VjdW1iZXIubWVzc2Fn",
            "ZXMuR2hlcmtpbkRvY3VtZW50LkZlYXR1cmUuVGFibGVSb3cuVGFibGVDZWxs",
            "EgoKAmlkGAMgASgJGkwKCVRhYmxlQ2VsbBIwCghsb2NhdGlvbhgBIAEoCzIe",
            "LmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLkxvY2F0aW9uEg0KBXZhbHVlGAIgASgJ",
            "GpQECgRTdGVwEjAKCGxvY2F0aW9uGAEgASgLMh4uaW8uY3VjdW1iZXIubWVz",
            "c2FnZXMuTG9jYXRpb24SDwoHa2V5d29yZBgCIAEoCRIMCgR0ZXh0GAMgASgJ",
            "ElIKCmRvY19zdHJpbmcYBSABKAsyPC5pby5jdWN1bWJlci5tZXNzYWdlcy5H",
            "aGVya2luRG9jdW1lbnQuRmVhdHVyZS5TdGVwLkRvY1N0cmluZ0gAElIKCmRh",
            "dGFfdGFibGUYBiABKAsyPC5pby5jdWN1bWJlci5tZXNzYWdlcy5HaGVya2lu",
            "RG9jdW1lbnQuRmVhdHVyZS5TdGVwLkRhdGFUYWJsZUgAEgoKAmlkGAcgASgJ",
            "GoMBCglEYXRhVGFibGUSMAoIbG9jYXRpb24YASABKAsyHi5pby5jdWN1bWJl",
            "ci5tZXNzYWdlcy5Mb2NhdGlvbhJECgRyb3dzGAIgAygLMjYuaW8uY3VjdW1i",
            "ZXIubWVzc2FnZXMuR2hlcmtpbkRvY3VtZW50LkZlYXR1cmUuVGFibGVSb3ca",
            "dQoJRG9jU3RyaW5nEjAKCGxvY2F0aW9uGAEgASgLMh4uaW8uY3VjdW1iZXIu",
            "bWVzc2FnZXMuTG9jYXRpb24SEgoKbWVkaWFfdHlwZRgCIAEoCRIPCgdjb250",
            "ZW50GAMgASgJEhEKCWRlbGltaXRlchgEIAEoCUIKCghhcmd1bWVudCLBAQoK",
            "QXR0YWNobWVudBI1CgZzb3VyY2UYASABKAsyJS5pby5jdWN1bWJlci5tZXNz",
            "YWdlcy5Tb3VyY2VSZWZlcmVuY2USFAoMdGVzdF9zdGVwX2lkGAQgASgJEhwK",
            "FHRlc3RfY2FzZV9zdGFydGVkX2lkGAUgASgJEg4KBHRleHQYBiABKAlIABIQ",
            "CgZiaW5hcnkYByABKAxIABISCgptZWRpYV90eXBlGAggASgJQgYKBGJvZHlK",
            "BAgCEANKBAgDEAQi7wIKBlBpY2tsZRIKCgJpZBgBIAEoCRILCgN1cmkYAiAB",
            "KAkSDAoEbmFtZRgDIAEoCRIQCghsYW5ndWFnZRgEIAEoCRI2CgVzdGVwcxgF",
            "IAMoCzInLmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLlBpY2tsZS5QaWNrbGVTdGVw",
            "EjQKBHRhZ3MYBiADKAsyJi5pby5jdWN1bWJlci5tZXNzYWdlcy5QaWNrbGUu",
            "UGlja2xlVGFnEhQKDGFzdF9ub2RlX2lkcxgHIAMoCRouCglQaWNrbGVUYWcS",
            "DAoEbmFtZRgBIAEoCRITCgthc3Rfbm9kZV9pZBgCIAEoCRp4CgpQaWNrbGVT",
            "dGVwEgwKBHRleHQYASABKAkSOgoIYXJndW1lbnQYAiABKAsyKC5pby5jdWN1",
            "bWJlci5tZXNzYWdlcy5QaWNrbGVTdGVwQXJndW1lbnQSCgoCaWQYAyABKAkS",
            "FAoMYXN0X25vZGVfaWRzGAQgAygJIu8DChJQaWNrbGVTdGVwQXJndW1lbnQS",
            "TgoKZG9jX3N0cmluZxgBIAEoCzI4LmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLlBp",
            "Y2tsZVN0ZXBBcmd1bWVudC5QaWNrbGVEb2NTdHJpbmdIABJKCgpkYXRhX3Rh",
            "YmxlGAIgASgLMjQuaW8uY3VjdW1iZXIubWVzc2FnZXMuUGlja2xlU3RlcEFy",
            "Z3VtZW50LlBpY2tsZVRhYmxlSAAaNgoPUGlja2xlRG9jU3RyaW5nEhIKCm1l",
            "ZGlhX3R5cGUYASABKAkSDwoHY29udGVudBgCIAEoCRr5AQoLUGlja2xlVGFi",
            "bGUSUQoEcm93cxgBIAMoCzJDLmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLlBpY2ts",
            "ZVN0ZXBBcmd1bWVudC5QaWNrbGVUYWJsZS5QaWNrbGVUYWJsZVJvdxqWAQoO",
            "UGlja2xlVGFibGVSb3cSYgoFY2VsbHMYASADKAsyUy5pby5jdWN1bWJlci5t",
            "ZXNzYWdlcy5QaWNrbGVTdGVwQXJndW1lbnQuUGlja2xlVGFibGUuUGlja2xl",
            "VGFibGVSb3cuUGlja2xlVGFibGVDZWxsGiAKD1BpY2tsZVRhYmxlQ2VsbBIN",
            "CgV2YWx1ZRgBIAEoCUIJCgdtZXNzYWdlIosCCghUZXN0Q2FzZRIKCgJpZBgB",
            "IAEoCRIRCglwaWNrbGVfaWQYAiABKAkSOwoKdGVzdF9zdGVwcxgDIAMoCzIn",
            "LmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLlRlc3RDYXNlLlRlc3RTdGVwGqIBCghU",
            "ZXN0U3RlcBIKCgJpZBgBIAEoCRIWCg5waWNrbGVfc3RlcF9pZBgCIAEoCRIb",
            "ChNzdGVwX2RlZmluaXRpb25faWRzGAMgAygJEkUKFHN0ZXBfbWF0Y2hfYXJn",
            "dW1lbnRzGAQgAygLMicuaW8uY3VjdW1iZXIubWVzc2FnZXMuU3RlcE1hdGNo",
            "QXJndW1lbnQSDgoGaG9va0lkGAUgASgJIiMKDlBpY2tsZUFjY2VwdGVkEhEK",
            "CXBpY2tsZV9pZBgBIAEoCSIjCg5QaWNrbGVSZWplY3RlZBIRCglwaWNrbGVf",
            "aWQYAiABKAkiRAoOVGVzdFJ1blN0YXJ0ZWQSMgoJdGltZXN0YW1wGAEgASgL",
            "Mh8uaW8uY3VjdW1iZXIubWVzc2FnZXMuVGltZXN0YW1wIpYBChRUZXN0Q2Fz",
            "ZVByZXBhcmVkU3RlcBI+Cg9zb3VyY2VfbG9jYXRpb24YASABKAsyJS5pby5j",
            "dWN1bWJlci5tZXNzYWdlcy5Tb3VyY2VSZWZlcmVuY2USPgoPYWN0aW9uX2xv",
            "Y2F0aW9uGAIgASgLMiUuaW8uY3VjdW1iZXIubWVzc2FnZXMuU291cmNlUmVm",
            "ZXJlbmNlImAKEFRlc3RDYXNlUHJlcGFyZWQSEQoJcGlja2xlX2lkGAEgASgJ",
            "EjkKBXN0ZXBzGAIgAygLMiouaW8uY3VjdW1iZXIubWVzc2FnZXMuVGVzdENh",
            "c2VQcmVwYXJlZFN0ZXAiiAIKD1Rlc3RDYXNlU3RhcnRlZBIyCgl0aW1lc3Rh",
            "bXAYASABKAsyHy5pby5jdWN1bWJlci5tZXNzYWdlcy5UaW1lc3RhbXASQAoI",
            "cGxhdGZvcm0YAiABKAsyLi5pby5jdWN1bWJlci5tZXNzYWdlcy5UZXN0Q2Fz",
            "ZVN0YXJ0ZWQuUGxhdGZvcm0SDwoHYXR0ZW1wdBgDIAEoDRIUCgx0ZXN0X2Nh",
            "c2VfaWQYBCABKAkSCgoCaWQYBSABKAkaTAoIUGxhdGZvcm0SFgoOaW1wbGVt",
            "ZW50YXRpb24YASABKAkSDwoHdmVyc2lvbhgCIAEoCRIKCgJvcxgDIAEoCRIL",
            "CgNjcHUYBCABKAkimwEKEFRlc3RDYXNlRmluaXNoZWQSMgoJdGltZXN0YW1w",
            "GAEgASgLMh8uaW8uY3VjdW1iZXIubWVzc2FnZXMuVGltZXN0YW1wEjUKC3Rl",
            "c3RfcmVzdWx0GAIgASgLMiAuaW8uY3VjdW1iZXIubWVzc2FnZXMuVGVzdFJl",
            "c3VsdBIcChR0ZXN0X2Nhc2Vfc3RhcnRlZF9pZBgDIAEoCSJ5Cg9UZXN0U3Rl",
            "cFN0YXJ0ZWQSMgoJdGltZXN0YW1wGAEgASgLMh8uaW8uY3VjdW1iZXIubWVz",
            "c2FnZXMuVGltZXN0YW1wEhQKDHRlc3Rfc3RlcF9pZBgCIAEoCRIcChR0ZXN0",
            "X2Nhc2Vfc3RhcnRlZF9pZBgDIAEoCSKxAQoQVGVzdFN0ZXBGaW5pc2hlZBI1",
            "Cgt0ZXN0X3Jlc3VsdBgBIAEoCzIgLmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLlRl",
            "c3RSZXN1bHQSMgoJdGltZXN0YW1wGAIgASgLMh8uaW8uY3VjdW1iZXIubWVz",
            "c2FnZXMuVGltZXN0YW1wEhQKDHRlc3Rfc3RlcF9pZBgDIAEoCRIcChR0ZXN0",
            "X2Nhc2Vfc3RhcnRlZF9pZBgEIAEoCSKIAgoKVGVzdFJlc3VsdBI3CgZzdGF0",
            "dXMYASABKA4yJy5pby5jdWN1bWJlci5tZXNzYWdlcy5UZXN0UmVzdWx0LlN0",
            "YXR1cxIPCgdtZXNzYWdlGAIgASgJEjAKCGR1cmF0aW9uGAMgASgLMh4uaW8u",
            "Y3VjdW1iZXIubWVzc2FnZXMuRHVyYXRpb24SFwoPd2lsbF9iZV9yZXRyaWVk",
            "GAQgASgIImUKBlN0YXR1cxILCgdVTktOT1dOEAASCgoGUEFTU0VEEAESCwoH",
            "U0tJUFBFRBACEgsKB1BFTkRJTkcQAxINCglVTkRFRklORUQQBBINCglBTUJJ",
            "R1VPVVMQBRIKCgZGQUlMRUQQBiJWCg9UZXN0UnVuRmluaXNoZWQSDwoHc3Vj",
            "Y2VzcxgBIAEoCBIyCgl0aW1lc3RhbXAYAiABKAsyHy5pby5jdWN1bWJlci5t",
            "ZXNzYWdlcy5UaW1lc3RhbXAi5gEKDENvbW1hbmRTdGFydBIWCg5iYXNlX2Rp",
            "cmVjdG9yeRgCIAEoCRI7Cg5zb3VyY2VzX2NvbmZpZxgDIAEoCzIjLmlvLmN1",
            "Y3VtYmVyLm1lc3NhZ2VzLlNvdXJjZXNDb25maWcSOwoOcnVudGltZV9jb25m",
            "aWcYBCABKAsyIy5pby5jdWN1bWJlci5tZXNzYWdlcy5SdW50aW1lQ29uZmln",
            "EkQKE3N1cHBvcnRfY29kZV9jb25maWcYBSABKAsyJy5pby5jdWN1bWJlci5t",
            "ZXNzYWdlcy5TdXBwb3J0Q29kZUNvbmZpZyKoAQoNU291cmNlc0NvbmZpZxIW",
            "Cg5hYnNvbHV0ZV9wYXRocxgBIAMoCRIQCghsYW5ndWFnZRgCIAEoCRI6Cgdm",
            "aWx0ZXJzGAMgASgLMikuaW8uY3VjdW1iZXIubWVzc2FnZXMuU291cmNlc0Zp",
            "bHRlckNvbmZpZxIxCgVvcmRlchgEIAEoCzIiLmlvLmN1Y3VtYmVyLm1lc3Nh",
            "Z2VzLlNvdXJjZXNPcmRlciKWAQoTU291cmNlc0ZpbHRlckNvbmZpZxIWCg50",
            "YWdfZXhwcmVzc2lvbhgBIAEoCRIgChhuYW1lX3JlZ3VsYXJfZXhwcmVzc2lv",
            "bnMYAiADKAkSRQoUdXJpX3RvX2xpbmVzX21hcHBpbmcYAyADKAsyJy5pby5j",
            "dWN1bWJlci5tZXNzYWdlcy5VcmlUb0xpbmVzTWFwcGluZyI5ChFVcmlUb0xp",
            "bmVzTWFwcGluZxIVCg1hYnNvbHV0ZV9wYXRoGAEgASgJEg0KBWxpbmVzGAIg",
            "AygEIlIKDFNvdXJjZXNPcmRlchI0CgR0eXBlGAEgASgOMiYuaW8uY3VjdW1i",
            "ZXIubWVzc2FnZXMuU291cmNlc09yZGVyVHlwZRIMCgRzZWVkGAIgASgEImIK",
            "DVJ1bnRpbWVDb25maWcSFAoMaXNfZmFpbF9mYXN0GAEgASgIEhIKCmlzX2Ry",
            "eV9ydW4YAiABKAgSEQoJaXNfc3RyaWN0GAMgASgIEhQKDG1heF9wYXJhbGxl",
            "bBgEIAEoBCKIAgoRU3VwcG9ydENvZGVDb25maWcSOgoWYmVmb3JlX3Rlc3Rf",
            "Y2FzZV9ob29rcxgBIAMoCzIaLmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLkhvb2sS",
            "OQoVYWZ0ZXJfdGVzdF9jYXNlX2hvb2tzGAIgAygLMhouaW8uY3VjdW1iZXIu",
            "bWVzc2FnZXMuSG9vaxI+ChBzdGVwX2RlZmluaXRpb25zGAMgAygLMiQuaW8u",
            "Y3VjdW1iZXIubWVzc2FnZXMuU3RlcERlZmluaXRpb24SPAoPcGFyYW1ldGVy",
            "X3R5cGVzGAQgAygLMiMuaW8uY3VjdW1iZXIubWVzc2FnZXMuUGFyYW1ldGVy",
            "VHlwZSJrCgRIb29rEgoKAmlkGAEgASgJEhYKDnRhZ19leHByZXNzaW9uGAIg",
            "ASgJEj8KEHNvdXJjZV9yZWZlcmVuY2UYAyABKAsyJS5pby5jdWN1bWJlci5t",
            "ZXNzYWdlcy5Tb3VyY2VSZWZlcmVuY2UimwEKDlN0ZXBEZWZpbml0aW9uEgoK",
            "AmlkGAEgASgJEjwKB3BhdHRlcm4YAiABKAsyKy5pby5jdWN1bWJlci5tZXNz",
            "YWdlcy5TdGVwRGVmaW5pdGlvblBhdHRlcm4SPwoQc291cmNlX3JlZmVyZW5j",
            "ZRgDIAEoCzIlLmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLlNvdXJjZVJlZmVyZW5j",
            "ZSJmChVTdGVwRGVmaW5pdGlvblBhdHRlcm4SDgoGc291cmNlGAEgASgJEj0K",
            "BHR5cGUYAiABKA4yLy5pby5jdWN1bWJlci5tZXNzYWdlcy5TdGVwRGVmaW5p",
            "dGlvblBhdHRlcm5UeXBlIoEBCg1QYXJhbWV0ZXJUeXBlEgwKBG5hbWUYASAB",
            "KAkSGwoTcmVndWxhcl9leHByZXNzaW9ucxgCIAMoCRIrCiNwcmVmZXJfZm9y",
            "X3JlZ3VsYXJfZXhwcmVzc2lvbl9tYXRjaBgDIAEoCBIYChB1c2VfZm9yX3Nu",
            "aXBwZXRzGAQgASgIIoMBChVDb21tYW5kQWN0aW9uQ29tcGxldGUSFAoMY29t",
            "cGxldGVkX2lkGAEgASgJEjcKC3Rlc3RfcmVzdWx0GAIgASgLMiAuaW8uY3Vj",
            "dW1iZXIubWVzc2FnZXMuVGVzdFJlc3VsdEgAEhEKB3NuaXBwZXQYAyABKAlI",
            "AEIICgZyZXN1bHQiMQocQ29tbWFuZFJ1bkJlZm9yZVRlc3RSdW5Ib29rcxIR",
            "CglhY3Rpb25faWQYASABKAkiMAobQ29tbWFuZFJ1bkFmdGVyVGVzdFJ1bkhv",
            "b2tzEhEKCWFjdGlvbl9pZBgBIAEoCSJcChlDb21tYW5kSW5pdGlhbGl6ZVRl",
            "c3RDYXNlEhEKCWFjdGlvbl9pZBgBIAEoCRIsCgZwaWNrbGUYAiABKAsyHC5p",
            "by5jdWN1bWJlci5tZXNzYWdlcy5QaWNrbGUiWAocQ29tbWFuZFJ1bkJlZm9y",
            "ZVRlc3RDYXNlSG9vaxIRCglhY3Rpb25faWQYASABKAkSDwoHaG9va19pZBgC",
            "IAEoCRIUCgx0ZXN0X2Nhc2VfaWQYAyABKAkiVwobQ29tbWFuZFJ1bkFmdGVy",
            "VGVzdENhc2VIb29rEhEKCWFjdGlvbl9pZBgBIAEoCRIPCgdob29rX2lkGAIg",
            "ASgJEhQKDHRlc3RfY2FzZV9pZBgDIAEoCSLoAQoSQ29tbWFuZFJ1blRlc3RT",
            "dGVwEhEKCWFjdGlvbl9pZBgBIAEoCRIaChJzdGVwX2RlZmluaXRpb25faWQY",
            "AiABKAkSRQoUc3RlcF9tYXRjaF9hcmd1bWVudHMYAyADKAsyJy5pby5jdWN1",
            "bWJlci5tZXNzYWdlcy5TdGVwTWF0Y2hBcmd1bWVudBJGChRwaWNrbGVfc3Rl",
            "cF9hcmd1bWVudBgEIAEoCzIoLmlvLmN1Y3VtYmVyLm1lc3NhZ2VzLlBpY2ts",
            "ZVN0ZXBBcmd1bWVudBIUCgx0ZXN0X2Nhc2VfaWQYBSABKAki1gEKEVN0ZXBN",
            "YXRjaEFyZ3VtZW50EhsKE3BhcmFtZXRlcl90eXBlX25hbWUYASABKAkSPAoF",
            "Z3JvdXAYAiABKAsyLS5pby5jdWN1bWJlci5tZXNzYWdlcy5TdGVwTWF0Y2hB",
            "cmd1bWVudC5Hcm91cBpmCgVHcm91cBINCgVzdGFydBgBIAEoDRINCgV2YWx1",
            "ZRgCIAEoCRI/CghjaGlsZHJlbhgDIAMoCzItLmlvLmN1Y3VtYmVyLm1lc3Nh",
            "Z2VzLlN0ZXBNYXRjaEFyZ3VtZW50Lkdyb3VwIr0BChZDb21tYW5kR2VuZXJh",
            "dGVTbmlwcGV0EhEKCWFjdGlvbl9pZBgBIAEoCRJIChVnZW5lcmF0ZWRfZXhw",
            "cmVzc2lvbnMYAiADKAsyKS5pby5jdWN1bWJlci5tZXNzYWdlcy5HZW5lcmF0",
            "ZWRFeHByZXNzaW9uEkYKFHBpY2tsZV9zdGVwX2FyZ3VtZW50GAMgASgLMigu",
            "aW8uY3VjdW1iZXIubWVzc2FnZXMuUGlja2xlU3RlcEFyZ3VtZW50IkEKE0dl",
            "bmVyYXRlZEV4cHJlc3Npb24SDAoEdGV4dBgBIAEoCRIcChRwYXJhbWV0ZXJf",
            "dHlwZV9uYW1lcxgCIAMoCSo3ChBTb3VyY2VzT3JkZXJUeXBlEhcKE09SREVS",
            "X09GX0RFRklOSVRJT04QABIKCgZSQU5ET00QASpMChlTdGVwRGVmaW5pdGlv",
            "blBhdHRlcm5UeXBlEhcKE0NVQ1VNQkVSX0VYUFJFU1NJT04QABIWChJSRUdV",
            "TEFSX0VYUFJFU1NJT04QAUIfWghtZXNzYWdlc+oCEkN1Y3VtYmVyOjpNZXNz",
            "YWdlc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Io.Cucumber.Messages.SourcesOrderType), typeof(global::Io.Cucumber.Messages.StepDefinitionPatternType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.Timestamp), global::Io.Cucumber.Messages.Timestamp.Parser, new[]{ "Seconds", "Nanos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.Duration), global::Io.Cucumber.Messages.Duration.Parser, new[]{ "Seconds", "Nanos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.Envelope), global::Io.Cucumber.Messages.Envelope.Parser, new[]{ "Source", "GherkinDocument", "Pickle", "Attachment", "TestCaseStarted", "TestStepStarted", "TestStepFinished", "TestCaseFinished", "PickleAccepted", "PickleRejected", "TestCasePrepared", "TestRunStarted", "TestRunFinished", "CommandStart", "CommandActionComplete", "CommandRunBeforeTestRunHooks", "CommandInitializeTestCase", "CommandRunBeforeTestCaseHook", "CommandRunTestStep", "CommandRunAfterTestCaseHook", "CommandRunAfterTestRunHooks", "CommandGenerateSnippet", "CommandError", "TestCase", "StepDefinition", "Hook" }, new[]{ "Message" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.Location), global::Io.Cucumber.Messages.Location.Parser, new[]{ "Line", "Column" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.SourceReference), global::Io.Cucumber.Messages.SourceReference.Parser, new[]{ "Uri", "Location" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.Source), global::Io.Cucumber.Messages.Source.Parser, new[]{ "Uri", "Data", "MediaType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument), global::Io.Cucumber.Messages.GherkinDocument.Parser, new[]{ "Uri", "Feature", "Comments" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Comment), global::Io.Cucumber.Messages.GherkinDocument.Types.Comment.Parser, new[]{ "Location", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Feature), global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Parser, new[]{ "Location", "Tags", "Language", "Keyword", "Name", "Description", "Children" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag), global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag.Parser, new[]{ "Location", "Name", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild), global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Parser, new[]{ "Rule", "Background", "Scenario" }, new[]{ "Value" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.Rule), global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.Rule.Parser, new[]{ "Location", "Keyword", "Name", "Description", "Children" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.RuleChild), global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.RuleChild.Parser, new[]{ "Background", "Scenario" }, new[]{ "Value" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Background), global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Background.Parser, new[]{ "Location", "Keyword", "Name", "Description", "Steps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario), global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario.Parser, new[]{ "Location", "Tags", "Keyword", "Name", "Description", "Steps", "Examples", "Id" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario.Types.Examples), global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario.Types.Examples.Parser, new[]{ "Location", "Tags", "Keyword", "Name", "Description", "TableHeader", "TableBody" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow), global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow.Parser, new[]{ "Location", "Cells", "Id" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow.Types.TableCell), global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow.Types.TableCell.Parser, new[]{ "Location", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step), global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Parser, new[]{ "Location", "Keyword", "Text", "DocString", "DataTable", "Id" }, new[]{ "Argument" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DataTable), global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DataTable.Parser, new[]{ "Location", "Rows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DocString), global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DocString.Parser, new[]{ "Location", "MediaType", "Content", "Delimiter" }, null, null, null)})})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.Attachment), global::Io.Cucumber.Messages.Attachment.Parser, new[]{ "Source", "TestStepId", "TestCaseStartedId", "Text", "Binary", "MediaType" }, new[]{ "Body" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.Pickle), global::Io.Cucumber.Messages.Pickle.Parser, new[]{ "Id", "Uri", "Name", "Language", "Steps", "Tags", "AstNodeIds" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.Pickle.Types.PickleTag), global::Io.Cucumber.Messages.Pickle.Types.PickleTag.Parser, new[]{ "Name", "AstNodeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.Pickle.Types.PickleStep), global::Io.Cucumber.Messages.Pickle.Types.PickleStep.Parser, new[]{ "Text", "Argument", "Id", "AstNodeIds" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.PickleStepArgument), global::Io.Cucumber.Messages.PickleStepArgument.Parser, new[]{ "DocString", "DataTable" }, new[]{ "Message" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleDocString), global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleDocString.Parser, new[]{ "MediaType", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable), global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Parser, new[]{ "Rows" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow), global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow.Parser, new[]{ "Cells" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow.Types.PickleTableCell), global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow.Types.PickleTableCell.Parser, new[]{ "Value" }, null, null, null)})})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.TestCase), global::Io.Cucumber.Messages.TestCase.Parser, new[]{ "Id", "PickleId", "TestSteps" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.TestCase.Types.TestStep), global::Io.Cucumber.Messages.TestCase.Types.TestStep.Parser, new[]{ "Id", "PickleStepId", "StepDefinitionIds", "StepMatchArguments", "HookId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.PickleAccepted), global::Io.Cucumber.Messages.PickleAccepted.Parser, new[]{ "PickleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.PickleRejected), global::Io.Cucumber.Messages.PickleRejected.Parser, new[]{ "PickleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.TestRunStarted), global::Io.Cucumber.Messages.TestRunStarted.Parser, new[]{ "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.TestCasePreparedStep), global::Io.Cucumber.Messages.TestCasePreparedStep.Parser, new[]{ "SourceLocation", "ActionLocation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.TestCasePrepared), global::Io.Cucumber.Messages.TestCasePrepared.Parser, new[]{ "PickleId", "Steps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.TestCaseStarted), global::Io.Cucumber.Messages.TestCaseStarted.Parser, new[]{ "Timestamp", "Platform", "Attempt", "TestCaseId", "Id" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.TestCaseStarted.Types.Platform), global::Io.Cucumber.Messages.TestCaseStarted.Types.Platform.Parser, new[]{ "Implementation", "Version", "Os", "Cpu" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.TestCaseFinished), global::Io.Cucumber.Messages.TestCaseFinished.Parser, new[]{ "Timestamp", "TestResult", "TestCaseStartedId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.TestStepStarted), global::Io.Cucumber.Messages.TestStepStarted.Parser, new[]{ "Timestamp", "TestStepId", "TestCaseStartedId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.TestStepFinished), global::Io.Cucumber.Messages.TestStepFinished.Parser, new[]{ "TestResult", "Timestamp", "TestStepId", "TestCaseStartedId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.TestResult), global::Io.Cucumber.Messages.TestResult.Parser, new[]{ "Status", "Message", "Duration", "WillBeRetried" }, null, new[]{ typeof(global::Io.Cucumber.Messages.TestResult.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.TestRunFinished), global::Io.Cucumber.Messages.TestRunFinished.Parser, new[]{ "Success", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.CommandStart), global::Io.Cucumber.Messages.CommandStart.Parser, new[]{ "BaseDirectory", "SourcesConfig", "RuntimeConfig", "SupportCodeConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.SourcesConfig), global::Io.Cucumber.Messages.SourcesConfig.Parser, new[]{ "AbsolutePaths", "Language", "Filters", "Order" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.SourcesFilterConfig), global::Io.Cucumber.Messages.SourcesFilterConfig.Parser, new[]{ "TagExpression", "NameRegularExpressions", "UriToLinesMapping" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.UriToLinesMapping), global::Io.Cucumber.Messages.UriToLinesMapping.Parser, new[]{ "AbsolutePath", "Lines" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.SourcesOrder), global::Io.Cucumber.Messages.SourcesOrder.Parser, new[]{ "Type", "Seed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.RuntimeConfig), global::Io.Cucumber.Messages.RuntimeConfig.Parser, new[]{ "IsFailFast", "IsDryRun", "IsStrict", "MaxParallel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.SupportCodeConfig), global::Io.Cucumber.Messages.SupportCodeConfig.Parser, new[]{ "BeforeTestCaseHooks", "AfterTestCaseHooks", "StepDefinitions", "ParameterTypes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.Hook), global::Io.Cucumber.Messages.Hook.Parser, new[]{ "Id", "TagExpression", "SourceReference" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.StepDefinition), global::Io.Cucumber.Messages.StepDefinition.Parser, new[]{ "Id", "Pattern", "SourceReference" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.StepDefinitionPattern), global::Io.Cucumber.Messages.StepDefinitionPattern.Parser, new[]{ "Source", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.ParameterType), global::Io.Cucumber.Messages.ParameterType.Parser, new[]{ "Name", "RegularExpressions", "PreferForRegularExpressionMatch", "UseForSnippets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.CommandActionComplete), global::Io.Cucumber.Messages.CommandActionComplete.Parser, new[]{ "CompletedId", "TestResult", "Snippet" }, new[]{ "Result" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.CommandRunBeforeTestRunHooks), global::Io.Cucumber.Messages.CommandRunBeforeTestRunHooks.Parser, new[]{ "ActionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.CommandRunAfterTestRunHooks), global::Io.Cucumber.Messages.CommandRunAfterTestRunHooks.Parser, new[]{ "ActionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.CommandInitializeTestCase), global::Io.Cucumber.Messages.CommandInitializeTestCase.Parser, new[]{ "ActionId", "Pickle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.CommandRunBeforeTestCaseHook), global::Io.Cucumber.Messages.CommandRunBeforeTestCaseHook.Parser, new[]{ "ActionId", "HookId", "TestCaseId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.CommandRunAfterTestCaseHook), global::Io.Cucumber.Messages.CommandRunAfterTestCaseHook.Parser, new[]{ "ActionId", "HookId", "TestCaseId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.CommandRunTestStep), global::Io.Cucumber.Messages.CommandRunTestStep.Parser, new[]{ "ActionId", "StepDefinitionId", "StepMatchArguments", "PickleStepArgument", "TestCaseId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.StepMatchArgument), global::Io.Cucumber.Messages.StepMatchArgument.Parser, new[]{ "ParameterTypeName", "Group" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.StepMatchArgument.Types.Group), global::Io.Cucumber.Messages.StepMatchArgument.Types.Group.Parser, new[]{ "Start", "Value", "Children" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.CommandGenerateSnippet), global::Io.Cucumber.Messages.CommandGenerateSnippet.Parser, new[]{ "ActionId", "GeneratedExpressions", "PickleStepArgument" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Io.Cucumber.Messages.GeneratedExpression), global::Io.Cucumber.Messages.GeneratedExpression.Parser, new[]{ "Text", "ParameterTypeNames" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SourcesOrderType {
    [pbr::OriginalName("ORDER_OF_DEFINITION")] OrderOfDefinition = 0,
    [pbr::OriginalName("RANDOM")] Random = 1,
  }

  public enum StepDefinitionPatternType {
    [pbr::OriginalName("CUCUMBER_EXPRESSION")] CucumberExpression = 0,
    [pbr::OriginalName("REGULAR_EXPRESSION")] RegularExpression = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// From https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/timestamp.proto
  /// </summary>
  public sealed partial class Timestamp : pb::IMessage<Timestamp> {
    private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp(Timestamp other) : this() {
      seconds_ = other.seconds_;
      nanos_ = other.nanos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp Clone() {
      return new Timestamp(this);
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 1;
    private long seconds_;
    /// <summary>
    /// Represents seconds of UTC time since Unix epoch
    /// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    /// 9999-12-31T23:59:59Z inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "nanos" field.</summary>
    public const int NanosFieldNumber = 2;
    private int nanos_;
    /// <summary>
    /// Non-negative fractions of a second at nanosecond resolution. Negative
    /// second values with fractions must still have non-negative nanos values
    /// that count forward in time. Must be from 0 to 999,999,999
    /// inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nanos {
      get { return nanos_; }
      set {
        nanos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seconds != other.Seconds) return false;
      if (Nanos != other.Nanos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seconds != 0L) hash ^= Seconds.GetHashCode();
      if (Nanos != 0) hash ^= Nanos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seconds != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Seconds);
      }
      if (Nanos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Nanos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seconds);
      }
      if (Nanos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nanos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timestamp other) {
      if (other == null) {
        return;
      }
      if (other.Seconds != 0L) {
        Seconds = other.Seconds;
      }
      if (other.Nanos != 0) {
        Nanos = other.Nanos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seconds = input.ReadInt64();
            break;
          }
          case 16: {
            Nanos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The structure is pretty close of the Timestamp one. For clarity, a second type
  /// of message is used.
  /// </summary>
  public sealed partial class Duration : pb::IMessage<Duration> {
    private static readonly pb::MessageParser<Duration> _parser = new pb::MessageParser<Duration>(() => new Duration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Duration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Duration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Duration(Duration other) : this() {
      seconds_ = other.seconds_;
      nanos_ = other.nanos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Duration Clone() {
      return new Duration(this);
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 1;
    private long seconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "nanos" field.</summary>
    public const int NanosFieldNumber = 2;
    private int nanos_;
    /// <summary>
    /// Non-negative fractions of a second at nanosecond resolution. Negative
    /// second values with fractions must still have non-negative nanos values
    /// that count forward in time. Must be from 0 to 999,999,999
    /// inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nanos {
      get { return nanos_; }
      set {
        nanos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Duration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Duration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seconds != other.Seconds) return false;
      if (Nanos != other.Nanos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seconds != 0L) hash ^= Seconds.GetHashCode();
      if (Nanos != 0) hash ^= Nanos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seconds != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Seconds);
      }
      if (Nanos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Nanos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seconds);
      }
      if (Nanos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nanos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Duration other) {
      if (other == null) {
        return;
      }
      if (other.Seconds != 0L) {
        Seconds = other.Seconds;
      }
      if (other.Nanos != 0) {
        Nanos = other.Nanos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seconds = input.ReadInt64();
            break;
          }
          case 16: {
            Nanos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// All the messages that are passed between different components/processes are Envelope
  /// messages.
  /// </summary>
  public sealed partial class Envelope : pb::IMessage<Envelope> {
    private static readonly pb::MessageParser<Envelope> _parser = new pb::MessageParser<Envelope>(() => new Envelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Envelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope(Envelope other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.Source:
          Source = other.Source.Clone();
          break;
        case MessageOneofCase.GherkinDocument:
          GherkinDocument = other.GherkinDocument.Clone();
          break;
        case MessageOneofCase.Pickle:
          Pickle = other.Pickle.Clone();
          break;
        case MessageOneofCase.Attachment:
          Attachment = other.Attachment.Clone();
          break;
        case MessageOneofCase.TestCaseStarted:
          TestCaseStarted = other.TestCaseStarted.Clone();
          break;
        case MessageOneofCase.TestStepStarted:
          TestStepStarted = other.TestStepStarted.Clone();
          break;
        case MessageOneofCase.TestStepFinished:
          TestStepFinished = other.TestStepFinished.Clone();
          break;
        case MessageOneofCase.TestCaseFinished:
          TestCaseFinished = other.TestCaseFinished.Clone();
          break;
        case MessageOneofCase.PickleAccepted:
          PickleAccepted = other.PickleAccepted.Clone();
          break;
        case MessageOneofCase.PickleRejected:
          PickleRejected = other.PickleRejected.Clone();
          break;
        case MessageOneofCase.TestCasePrepared:
          TestCasePrepared = other.TestCasePrepared.Clone();
          break;
        case MessageOneofCase.TestRunStarted:
          TestRunStarted = other.TestRunStarted.Clone();
          break;
        case MessageOneofCase.TestRunFinished:
          TestRunFinished = other.TestRunFinished.Clone();
          break;
        case MessageOneofCase.CommandStart:
          CommandStart = other.CommandStart.Clone();
          break;
        case MessageOneofCase.CommandActionComplete:
          CommandActionComplete = other.CommandActionComplete.Clone();
          break;
        case MessageOneofCase.CommandRunBeforeTestRunHooks:
          CommandRunBeforeTestRunHooks = other.CommandRunBeforeTestRunHooks.Clone();
          break;
        case MessageOneofCase.CommandInitializeTestCase:
          CommandInitializeTestCase = other.CommandInitializeTestCase.Clone();
          break;
        case MessageOneofCase.CommandRunBeforeTestCaseHook:
          CommandRunBeforeTestCaseHook = other.CommandRunBeforeTestCaseHook.Clone();
          break;
        case MessageOneofCase.CommandRunTestStep:
          CommandRunTestStep = other.CommandRunTestStep.Clone();
          break;
        case MessageOneofCase.CommandRunAfterTestCaseHook:
          CommandRunAfterTestCaseHook = other.CommandRunAfterTestCaseHook.Clone();
          break;
        case MessageOneofCase.CommandRunAfterTestRunHooks:
          CommandRunAfterTestRunHooks = other.CommandRunAfterTestRunHooks.Clone();
          break;
        case MessageOneofCase.CommandGenerateSnippet:
          CommandGenerateSnippet = other.CommandGenerateSnippet.Clone();
          break;
        case MessageOneofCase.CommandError:
          CommandError = other.CommandError;
          break;
        case MessageOneofCase.TestCase:
          TestCase = other.TestCase.Clone();
          break;
        case MessageOneofCase.StepDefinition:
          StepDefinition = other.StepDefinition.Clone();
          break;
        case MessageOneofCase.Hook:
          Hook = other.Hook.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope Clone() {
      return new Envelope(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    /// <summary>
    /// Gherkin messages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.Source Source {
      get { return messageCase_ == MessageOneofCase.Source ? (global::Io.Cucumber.Messages.Source) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Source;
      }
    }

    /// <summary>Field number for the "gherkin_document" field.</summary>
    public const int GherkinDocumentFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.GherkinDocument GherkinDocument {
      get { return messageCase_ == MessageOneofCase.GherkinDocument ? (global::Io.Cucumber.Messages.GherkinDocument) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GherkinDocument;
      }
    }

    /// <summary>Field number for the "pickle" field.</summary>
    public const int PickleFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.Pickle Pickle {
      get { return messageCase_ == MessageOneofCase.Pickle ? (global::Io.Cucumber.Messages.Pickle) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Pickle;
      }
    }

    /// <summary>Field number for the "attachment" field.</summary>
    public const int AttachmentFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.Attachment Attachment {
      get { return messageCase_ == MessageOneofCase.Attachment ? (global::Io.Cucumber.Messages.Attachment) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Attachment;
      }
    }

    /// <summary>Field number for the "test_case_started" field.</summary>
    public const int TestCaseStartedFieldNumber = 5;
    /// <summary>
    /// Execution messages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.TestCaseStarted TestCaseStarted {
      get { return messageCase_ == MessageOneofCase.TestCaseStarted ? (global::Io.Cucumber.Messages.TestCaseStarted) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.TestCaseStarted;
      }
    }

    /// <summary>Field number for the "test_step_started" field.</summary>
    public const int TestStepStartedFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.TestStepStarted TestStepStarted {
      get { return messageCase_ == MessageOneofCase.TestStepStarted ? (global::Io.Cucumber.Messages.TestStepStarted) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.TestStepStarted;
      }
    }

    /// <summary>Field number for the "test_step_finished" field.</summary>
    public const int TestStepFinishedFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.TestStepFinished TestStepFinished {
      get { return messageCase_ == MessageOneofCase.TestStepFinished ? (global::Io.Cucumber.Messages.TestStepFinished) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.TestStepFinished;
      }
    }

    /// <summary>Field number for the "test_case_finished" field.</summary>
    public const int TestCaseFinishedFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.TestCaseFinished TestCaseFinished {
      get { return messageCase_ == MessageOneofCase.TestCaseFinished ? (global::Io.Cucumber.Messages.TestCaseFinished) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.TestCaseFinished;
      }
    }

    /// <summary>Field number for the "pickle_accepted" field.</summary>
    public const int PickleAcceptedFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.PickleAccepted PickleAccepted {
      get { return messageCase_ == MessageOneofCase.PickleAccepted ? (global::Io.Cucumber.Messages.PickleAccepted) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.PickleAccepted;
      }
    }

    /// <summary>Field number for the "pickle_rejected" field.</summary>
    public const int PickleRejectedFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.PickleRejected PickleRejected {
      get { return messageCase_ == MessageOneofCase.PickleRejected ? (global::Io.Cucumber.Messages.PickleRejected) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.PickleRejected;
      }
    }

    /// <summary>Field number for the "test_case_prepared" field.</summary>
    public const int TestCasePreparedFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.TestCasePrepared TestCasePrepared {
      get { return messageCase_ == MessageOneofCase.TestCasePrepared ? (global::Io.Cucumber.Messages.TestCasePrepared) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.TestCasePrepared;
      }
    }

    /// <summary>Field number for the "test_run_started" field.</summary>
    public const int TestRunStartedFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.TestRunStarted TestRunStarted {
      get { return messageCase_ == MessageOneofCase.TestRunStarted ? (global::Io.Cucumber.Messages.TestRunStarted) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.TestRunStarted;
      }
    }

    /// <summary>Field number for the "test_run_finished" field.</summary>
    public const int TestRunFinishedFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.TestRunFinished TestRunFinished {
      get { return messageCase_ == MessageOneofCase.TestRunFinished ? (global::Io.Cucumber.Messages.TestRunFinished) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.TestRunFinished;
      }
    }

    /// <summary>Field number for the "command_start" field.</summary>
    public const int CommandStartFieldNumber = 14;
    /// <summary>
    /// Cucumber-Engine Messages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.CommandStart CommandStart {
      get { return messageCase_ == MessageOneofCase.CommandStart ? (global::Io.Cucumber.Messages.CommandStart) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CommandStart;
      }
    }

    /// <summary>Field number for the "command_action_complete" field.</summary>
    public const int CommandActionCompleteFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.CommandActionComplete CommandActionComplete {
      get { return messageCase_ == MessageOneofCase.CommandActionComplete ? (global::Io.Cucumber.Messages.CommandActionComplete) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CommandActionComplete;
      }
    }

    /// <summary>Field number for the "command_run_before_test_run_hooks" field.</summary>
    public const int CommandRunBeforeTestRunHooksFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.CommandRunBeforeTestRunHooks CommandRunBeforeTestRunHooks {
      get { return messageCase_ == MessageOneofCase.CommandRunBeforeTestRunHooks ? (global::Io.Cucumber.Messages.CommandRunBeforeTestRunHooks) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CommandRunBeforeTestRunHooks;
      }
    }

    /// <summary>Field number for the "command_initialize_test_case" field.</summary>
    public const int CommandInitializeTestCaseFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.CommandInitializeTestCase CommandInitializeTestCase {
      get { return messageCase_ == MessageOneofCase.CommandInitializeTestCase ? (global::Io.Cucumber.Messages.CommandInitializeTestCase) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CommandInitializeTestCase;
      }
    }

    /// <summary>Field number for the "command_run_before_test_case_hook" field.</summary>
    public const int CommandRunBeforeTestCaseHookFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.CommandRunBeforeTestCaseHook CommandRunBeforeTestCaseHook {
      get { return messageCase_ == MessageOneofCase.CommandRunBeforeTestCaseHook ? (global::Io.Cucumber.Messages.CommandRunBeforeTestCaseHook) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CommandRunBeforeTestCaseHook;
      }
    }

    /// <summary>Field number for the "command_run_test_step" field.</summary>
    public const int CommandRunTestStepFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.CommandRunTestStep CommandRunTestStep {
      get { return messageCase_ == MessageOneofCase.CommandRunTestStep ? (global::Io.Cucumber.Messages.CommandRunTestStep) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CommandRunTestStep;
      }
    }

    /// <summary>Field number for the "command_run_after_test_case_hook" field.</summary>
    public const int CommandRunAfterTestCaseHookFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.CommandRunAfterTestCaseHook CommandRunAfterTestCaseHook {
      get { return messageCase_ == MessageOneofCase.CommandRunAfterTestCaseHook ? (global::Io.Cucumber.Messages.CommandRunAfterTestCaseHook) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CommandRunAfterTestCaseHook;
      }
    }

    /// <summary>Field number for the "command_run_after_test_run_hooks" field.</summary>
    public const int CommandRunAfterTestRunHooksFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.CommandRunAfterTestRunHooks CommandRunAfterTestRunHooks {
      get { return messageCase_ == MessageOneofCase.CommandRunAfterTestRunHooks ? (global::Io.Cucumber.Messages.CommandRunAfterTestRunHooks) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CommandRunAfterTestRunHooks;
      }
    }

    /// <summary>Field number for the "command_generate_snippet" field.</summary>
    public const int CommandGenerateSnippetFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.CommandGenerateSnippet CommandGenerateSnippet {
      get { return messageCase_ == MessageOneofCase.CommandGenerateSnippet ? (global::Io.Cucumber.Messages.CommandGenerateSnippet) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CommandGenerateSnippet;
      }
    }

    /// <summary>Field number for the "command_error" field.</summary>
    public const int CommandErrorFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommandError {
      get { return messageCase_ == MessageOneofCase.CommandError ? (string) message_ : ""; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        messageCase_ = MessageOneofCase.CommandError;
      }
    }

    /// <summary>Field number for the "test_case" field.</summary>
    public const int TestCaseFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.TestCase TestCase {
      get { return messageCase_ == MessageOneofCase.TestCase ? (global::Io.Cucumber.Messages.TestCase) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.TestCase;
      }
    }

    /// <summary>Field number for the "step_definition" field.</summary>
    public const int StepDefinitionFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.StepDefinition StepDefinition {
      get { return messageCase_ == MessageOneofCase.StepDefinition ? (global::Io.Cucumber.Messages.StepDefinition) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.StepDefinition;
      }
    }

    /// <summary>Field number for the "hook" field.</summary>
    public const int HookFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.Hook Hook {
      get { return messageCase_ == MessageOneofCase.Hook ? (global::Io.Cucumber.Messages.Hook) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Hook;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Source = 1,
      GherkinDocument = 2,
      Pickle = 3,
      Attachment = 4,
      TestCaseStarted = 5,
      TestStepStarted = 6,
      TestStepFinished = 7,
      TestCaseFinished = 8,
      PickleAccepted = 9,
      PickleRejected = 10,
      TestCasePrepared = 11,
      TestRunStarted = 12,
      TestRunFinished = 13,
      CommandStart = 14,
      CommandActionComplete = 15,
      CommandRunBeforeTestRunHooks = 16,
      CommandInitializeTestCase = 17,
      CommandRunBeforeTestCaseHook = 18,
      CommandRunTestStep = 19,
      CommandRunAfterTestCaseHook = 20,
      CommandRunAfterTestRunHooks = 21,
      CommandGenerateSnippet = 22,
      CommandError = 23,
      TestCase = 24,
      StepDefinition = 25,
      Hook = 26,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Envelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Envelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(GherkinDocument, other.GherkinDocument)) return false;
      if (!object.Equals(Pickle, other.Pickle)) return false;
      if (!object.Equals(Attachment, other.Attachment)) return false;
      if (!object.Equals(TestCaseStarted, other.TestCaseStarted)) return false;
      if (!object.Equals(TestStepStarted, other.TestStepStarted)) return false;
      if (!object.Equals(TestStepFinished, other.TestStepFinished)) return false;
      if (!object.Equals(TestCaseFinished, other.TestCaseFinished)) return false;
      if (!object.Equals(PickleAccepted, other.PickleAccepted)) return false;
      if (!object.Equals(PickleRejected, other.PickleRejected)) return false;
      if (!object.Equals(TestCasePrepared, other.TestCasePrepared)) return false;
      if (!object.Equals(TestRunStarted, other.TestRunStarted)) return false;
      if (!object.Equals(TestRunFinished, other.TestRunFinished)) return false;
      if (!object.Equals(CommandStart, other.CommandStart)) return false;
      if (!object.Equals(CommandActionComplete, other.CommandActionComplete)) return false;
      if (!object.Equals(CommandRunBeforeTestRunHooks, other.CommandRunBeforeTestRunHooks)) return false;
      if (!object.Equals(CommandInitializeTestCase, other.CommandInitializeTestCase)) return false;
      if (!object.Equals(CommandRunBeforeTestCaseHook, other.CommandRunBeforeTestCaseHook)) return false;
      if (!object.Equals(CommandRunTestStep, other.CommandRunTestStep)) return false;
      if (!object.Equals(CommandRunAfterTestCaseHook, other.CommandRunAfterTestCaseHook)) return false;
      if (!object.Equals(CommandRunAfterTestRunHooks, other.CommandRunAfterTestRunHooks)) return false;
      if (!object.Equals(CommandGenerateSnippet, other.CommandGenerateSnippet)) return false;
      if (CommandError != other.CommandError) return false;
      if (!object.Equals(TestCase, other.TestCase)) return false;
      if (!object.Equals(StepDefinition, other.StepDefinition)) return false;
      if (!object.Equals(Hook, other.Hook)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.Source) hash ^= Source.GetHashCode();
      if (messageCase_ == MessageOneofCase.GherkinDocument) hash ^= GherkinDocument.GetHashCode();
      if (messageCase_ == MessageOneofCase.Pickle) hash ^= Pickle.GetHashCode();
      if (messageCase_ == MessageOneofCase.Attachment) hash ^= Attachment.GetHashCode();
      if (messageCase_ == MessageOneofCase.TestCaseStarted) hash ^= TestCaseStarted.GetHashCode();
      if (messageCase_ == MessageOneofCase.TestStepStarted) hash ^= TestStepStarted.GetHashCode();
      if (messageCase_ == MessageOneofCase.TestStepFinished) hash ^= TestStepFinished.GetHashCode();
      if (messageCase_ == MessageOneofCase.TestCaseFinished) hash ^= TestCaseFinished.GetHashCode();
      if (messageCase_ == MessageOneofCase.PickleAccepted) hash ^= PickleAccepted.GetHashCode();
      if (messageCase_ == MessageOneofCase.PickleRejected) hash ^= PickleRejected.GetHashCode();
      if (messageCase_ == MessageOneofCase.TestCasePrepared) hash ^= TestCasePrepared.GetHashCode();
      if (messageCase_ == MessageOneofCase.TestRunStarted) hash ^= TestRunStarted.GetHashCode();
      if (messageCase_ == MessageOneofCase.TestRunFinished) hash ^= TestRunFinished.GetHashCode();
      if (messageCase_ == MessageOneofCase.CommandStart) hash ^= CommandStart.GetHashCode();
      if (messageCase_ == MessageOneofCase.CommandActionComplete) hash ^= CommandActionComplete.GetHashCode();
      if (messageCase_ == MessageOneofCase.CommandRunBeforeTestRunHooks) hash ^= CommandRunBeforeTestRunHooks.GetHashCode();
      if (messageCase_ == MessageOneofCase.CommandInitializeTestCase) hash ^= CommandInitializeTestCase.GetHashCode();
      if (messageCase_ == MessageOneofCase.CommandRunBeforeTestCaseHook) hash ^= CommandRunBeforeTestCaseHook.GetHashCode();
      if (messageCase_ == MessageOneofCase.CommandRunTestStep) hash ^= CommandRunTestStep.GetHashCode();
      if (messageCase_ == MessageOneofCase.CommandRunAfterTestCaseHook) hash ^= CommandRunAfterTestCaseHook.GetHashCode();
      if (messageCase_ == MessageOneofCase.CommandRunAfterTestRunHooks) hash ^= CommandRunAfterTestRunHooks.GetHashCode();
      if (messageCase_ == MessageOneofCase.CommandGenerateSnippet) hash ^= CommandGenerateSnippet.GetHashCode();
      if (messageCase_ == MessageOneofCase.CommandError) hash ^= CommandError.GetHashCode();
      if (messageCase_ == MessageOneofCase.TestCase) hash ^= TestCase.GetHashCode();
      if (messageCase_ == MessageOneofCase.StepDefinition) hash ^= StepDefinition.GetHashCode();
      if (messageCase_ == MessageOneofCase.Hook) hash ^= Hook.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.Source) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (messageCase_ == MessageOneofCase.GherkinDocument) {
        output.WriteRawTag(18);
        output.WriteMessage(GherkinDocument);
      }
      if (messageCase_ == MessageOneofCase.Pickle) {
        output.WriteRawTag(26);
        output.WriteMessage(Pickle);
      }
      if (messageCase_ == MessageOneofCase.Attachment) {
        output.WriteRawTag(34);
        output.WriteMessage(Attachment);
      }
      if (messageCase_ == MessageOneofCase.TestCaseStarted) {
        output.WriteRawTag(42);
        output.WriteMessage(TestCaseStarted);
      }
      if (messageCase_ == MessageOneofCase.TestStepStarted) {
        output.WriteRawTag(50);
        output.WriteMessage(TestStepStarted);
      }
      if (messageCase_ == MessageOneofCase.TestStepFinished) {
        output.WriteRawTag(58);
        output.WriteMessage(TestStepFinished);
      }
      if (messageCase_ == MessageOneofCase.TestCaseFinished) {
        output.WriteRawTag(66);
        output.WriteMessage(TestCaseFinished);
      }
      if (messageCase_ == MessageOneofCase.PickleAccepted) {
        output.WriteRawTag(74);
        output.WriteMessage(PickleAccepted);
      }
      if (messageCase_ == MessageOneofCase.PickleRejected) {
        output.WriteRawTag(82);
        output.WriteMessage(PickleRejected);
      }
      if (messageCase_ == MessageOneofCase.TestCasePrepared) {
        output.WriteRawTag(90);
        output.WriteMessage(TestCasePrepared);
      }
      if (messageCase_ == MessageOneofCase.TestRunStarted) {
        output.WriteRawTag(98);
        output.WriteMessage(TestRunStarted);
      }
      if (messageCase_ == MessageOneofCase.TestRunFinished) {
        output.WriteRawTag(106);
        output.WriteMessage(TestRunFinished);
      }
      if (messageCase_ == MessageOneofCase.CommandStart) {
        output.WriteRawTag(114);
        output.WriteMessage(CommandStart);
      }
      if (messageCase_ == MessageOneofCase.CommandActionComplete) {
        output.WriteRawTag(122);
        output.WriteMessage(CommandActionComplete);
      }
      if (messageCase_ == MessageOneofCase.CommandRunBeforeTestRunHooks) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(CommandRunBeforeTestRunHooks);
      }
      if (messageCase_ == MessageOneofCase.CommandInitializeTestCase) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(CommandInitializeTestCase);
      }
      if (messageCase_ == MessageOneofCase.CommandRunBeforeTestCaseHook) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CommandRunBeforeTestCaseHook);
      }
      if (messageCase_ == MessageOneofCase.CommandRunTestStep) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(CommandRunTestStep);
      }
      if (messageCase_ == MessageOneofCase.CommandRunAfterTestCaseHook) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(CommandRunAfterTestCaseHook);
      }
      if (messageCase_ == MessageOneofCase.CommandRunAfterTestRunHooks) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(CommandRunAfterTestRunHooks);
      }
      if (messageCase_ == MessageOneofCase.CommandGenerateSnippet) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(CommandGenerateSnippet);
      }
      if (messageCase_ == MessageOneofCase.CommandError) {
        output.WriteRawTag(186, 1);
        output.WriteString(CommandError);
      }
      if (messageCase_ == MessageOneofCase.TestCase) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(TestCase);
      }
      if (messageCase_ == MessageOneofCase.StepDefinition) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(StepDefinition);
      }
      if (messageCase_ == MessageOneofCase.Hook) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(Hook);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.Source) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (messageCase_ == MessageOneofCase.GherkinDocument) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GherkinDocument);
      }
      if (messageCase_ == MessageOneofCase.Pickle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pickle);
      }
      if (messageCase_ == MessageOneofCase.Attachment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attachment);
      }
      if (messageCase_ == MessageOneofCase.TestCaseStarted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestCaseStarted);
      }
      if (messageCase_ == MessageOneofCase.TestStepStarted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestStepStarted);
      }
      if (messageCase_ == MessageOneofCase.TestStepFinished) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestStepFinished);
      }
      if (messageCase_ == MessageOneofCase.TestCaseFinished) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestCaseFinished);
      }
      if (messageCase_ == MessageOneofCase.PickleAccepted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PickleAccepted);
      }
      if (messageCase_ == MessageOneofCase.PickleRejected) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PickleRejected);
      }
      if (messageCase_ == MessageOneofCase.TestCasePrepared) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestCasePrepared);
      }
      if (messageCase_ == MessageOneofCase.TestRunStarted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestRunStarted);
      }
      if (messageCase_ == MessageOneofCase.TestRunFinished) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestRunFinished);
      }
      if (messageCase_ == MessageOneofCase.CommandStart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommandStart);
      }
      if (messageCase_ == MessageOneofCase.CommandActionComplete) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommandActionComplete);
      }
      if (messageCase_ == MessageOneofCase.CommandRunBeforeTestRunHooks) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CommandRunBeforeTestRunHooks);
      }
      if (messageCase_ == MessageOneofCase.CommandInitializeTestCase) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CommandInitializeTestCase);
      }
      if (messageCase_ == MessageOneofCase.CommandRunBeforeTestCaseHook) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CommandRunBeforeTestCaseHook);
      }
      if (messageCase_ == MessageOneofCase.CommandRunTestStep) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CommandRunTestStep);
      }
      if (messageCase_ == MessageOneofCase.CommandRunAfterTestCaseHook) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CommandRunAfterTestCaseHook);
      }
      if (messageCase_ == MessageOneofCase.CommandRunAfterTestRunHooks) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CommandRunAfterTestRunHooks);
      }
      if (messageCase_ == MessageOneofCase.CommandGenerateSnippet) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CommandGenerateSnippet);
      }
      if (messageCase_ == MessageOneofCase.CommandError) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CommandError);
      }
      if (messageCase_ == MessageOneofCase.TestCase) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TestCase);
      }
      if (messageCase_ == MessageOneofCase.StepDefinition) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StepDefinition);
      }
      if (messageCase_ == MessageOneofCase.Hook) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hook);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Envelope other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Source:
          if (Source == null) {
            Source = new global::Io.Cucumber.Messages.Source();
          }
          Source.MergeFrom(other.Source);
          break;
        case MessageOneofCase.GherkinDocument:
          if (GherkinDocument == null) {
            GherkinDocument = new global::Io.Cucumber.Messages.GherkinDocument();
          }
          GherkinDocument.MergeFrom(other.GherkinDocument);
          break;
        case MessageOneofCase.Pickle:
          if (Pickle == null) {
            Pickle = new global::Io.Cucumber.Messages.Pickle();
          }
          Pickle.MergeFrom(other.Pickle);
          break;
        case MessageOneofCase.Attachment:
          if (Attachment == null) {
            Attachment = new global::Io.Cucumber.Messages.Attachment();
          }
          Attachment.MergeFrom(other.Attachment);
          break;
        case MessageOneofCase.TestCaseStarted:
          if (TestCaseStarted == null) {
            TestCaseStarted = new global::Io.Cucumber.Messages.TestCaseStarted();
          }
          TestCaseStarted.MergeFrom(other.TestCaseStarted);
          break;
        case MessageOneofCase.TestStepStarted:
          if (TestStepStarted == null) {
            TestStepStarted = new global::Io.Cucumber.Messages.TestStepStarted();
          }
          TestStepStarted.MergeFrom(other.TestStepStarted);
          break;
        case MessageOneofCase.TestStepFinished:
          if (TestStepFinished == null) {
            TestStepFinished = new global::Io.Cucumber.Messages.TestStepFinished();
          }
          TestStepFinished.MergeFrom(other.TestStepFinished);
          break;
        case MessageOneofCase.TestCaseFinished:
          if (TestCaseFinished == null) {
            TestCaseFinished = new global::Io.Cucumber.Messages.TestCaseFinished();
          }
          TestCaseFinished.MergeFrom(other.TestCaseFinished);
          break;
        case MessageOneofCase.PickleAccepted:
          if (PickleAccepted == null) {
            PickleAccepted = new global::Io.Cucumber.Messages.PickleAccepted();
          }
          PickleAccepted.MergeFrom(other.PickleAccepted);
          break;
        case MessageOneofCase.PickleRejected:
          if (PickleRejected == null) {
            PickleRejected = new global::Io.Cucumber.Messages.PickleRejected();
          }
          PickleRejected.MergeFrom(other.PickleRejected);
          break;
        case MessageOneofCase.TestCasePrepared:
          if (TestCasePrepared == null) {
            TestCasePrepared = new global::Io.Cucumber.Messages.TestCasePrepared();
          }
          TestCasePrepared.MergeFrom(other.TestCasePrepared);
          break;
        case MessageOneofCase.TestRunStarted:
          if (TestRunStarted == null) {
            TestRunStarted = new global::Io.Cucumber.Messages.TestRunStarted();
          }
          TestRunStarted.MergeFrom(other.TestRunStarted);
          break;
        case MessageOneofCase.TestRunFinished:
          if (TestRunFinished == null) {
            TestRunFinished = new global::Io.Cucumber.Messages.TestRunFinished();
          }
          TestRunFinished.MergeFrom(other.TestRunFinished);
          break;
        case MessageOneofCase.CommandStart:
          if (CommandStart == null) {
            CommandStart = new global::Io.Cucumber.Messages.CommandStart();
          }
          CommandStart.MergeFrom(other.CommandStart);
          break;
        case MessageOneofCase.CommandActionComplete:
          if (CommandActionComplete == null) {
            CommandActionComplete = new global::Io.Cucumber.Messages.CommandActionComplete();
          }
          CommandActionComplete.MergeFrom(other.CommandActionComplete);
          break;
        case MessageOneofCase.CommandRunBeforeTestRunHooks:
          if (CommandRunBeforeTestRunHooks == null) {
            CommandRunBeforeTestRunHooks = new global::Io.Cucumber.Messages.CommandRunBeforeTestRunHooks();
          }
          CommandRunBeforeTestRunHooks.MergeFrom(other.CommandRunBeforeTestRunHooks);
          break;
        case MessageOneofCase.CommandInitializeTestCase:
          if (CommandInitializeTestCase == null) {
            CommandInitializeTestCase = new global::Io.Cucumber.Messages.CommandInitializeTestCase();
          }
          CommandInitializeTestCase.MergeFrom(other.CommandInitializeTestCase);
          break;
        case MessageOneofCase.CommandRunBeforeTestCaseHook:
          if (CommandRunBeforeTestCaseHook == null) {
            CommandRunBeforeTestCaseHook = new global::Io.Cucumber.Messages.CommandRunBeforeTestCaseHook();
          }
          CommandRunBeforeTestCaseHook.MergeFrom(other.CommandRunBeforeTestCaseHook);
          break;
        case MessageOneofCase.CommandRunTestStep:
          if (CommandRunTestStep == null) {
            CommandRunTestStep = new global::Io.Cucumber.Messages.CommandRunTestStep();
          }
          CommandRunTestStep.MergeFrom(other.CommandRunTestStep);
          break;
        case MessageOneofCase.CommandRunAfterTestCaseHook:
          if (CommandRunAfterTestCaseHook == null) {
            CommandRunAfterTestCaseHook = new global::Io.Cucumber.Messages.CommandRunAfterTestCaseHook();
          }
          CommandRunAfterTestCaseHook.MergeFrom(other.CommandRunAfterTestCaseHook);
          break;
        case MessageOneofCase.CommandRunAfterTestRunHooks:
          if (CommandRunAfterTestRunHooks == null) {
            CommandRunAfterTestRunHooks = new global::Io.Cucumber.Messages.CommandRunAfterTestRunHooks();
          }
          CommandRunAfterTestRunHooks.MergeFrom(other.CommandRunAfterTestRunHooks);
          break;
        case MessageOneofCase.CommandGenerateSnippet:
          if (CommandGenerateSnippet == null) {
            CommandGenerateSnippet = new global::Io.Cucumber.Messages.CommandGenerateSnippet();
          }
          CommandGenerateSnippet.MergeFrom(other.CommandGenerateSnippet);
          break;
        case MessageOneofCase.CommandError:
          CommandError = other.CommandError;
          break;
        case MessageOneofCase.TestCase:
          if (TestCase == null) {
            TestCase = new global::Io.Cucumber.Messages.TestCase();
          }
          TestCase.MergeFrom(other.TestCase);
          break;
        case MessageOneofCase.StepDefinition:
          if (StepDefinition == null) {
            StepDefinition = new global::Io.Cucumber.Messages.StepDefinition();
          }
          StepDefinition.MergeFrom(other.StepDefinition);
          break;
        case MessageOneofCase.Hook:
          if (Hook == null) {
            Hook = new global::Io.Cucumber.Messages.Hook();
          }
          Hook.MergeFrom(other.Hook);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Io.Cucumber.Messages.Source subBuilder = new global::Io.Cucumber.Messages.Source();
            if (messageCase_ == MessageOneofCase.Source) {
              subBuilder.MergeFrom(Source);
            }
            input.ReadMessage(subBuilder);
            Source = subBuilder;
            break;
          }
          case 18: {
            global::Io.Cucumber.Messages.GherkinDocument subBuilder = new global::Io.Cucumber.Messages.GherkinDocument();
            if (messageCase_ == MessageOneofCase.GherkinDocument) {
              subBuilder.MergeFrom(GherkinDocument);
            }
            input.ReadMessage(subBuilder);
            GherkinDocument = subBuilder;
            break;
          }
          case 26: {
            global::Io.Cucumber.Messages.Pickle subBuilder = new global::Io.Cucumber.Messages.Pickle();
            if (messageCase_ == MessageOneofCase.Pickle) {
              subBuilder.MergeFrom(Pickle);
            }
            input.ReadMessage(subBuilder);
            Pickle = subBuilder;
            break;
          }
          case 34: {
            global::Io.Cucumber.Messages.Attachment subBuilder = new global::Io.Cucumber.Messages.Attachment();
            if (messageCase_ == MessageOneofCase.Attachment) {
              subBuilder.MergeFrom(Attachment);
            }
            input.ReadMessage(subBuilder);
            Attachment = subBuilder;
            break;
          }
          case 42: {
            global::Io.Cucumber.Messages.TestCaseStarted subBuilder = new global::Io.Cucumber.Messages.TestCaseStarted();
            if (messageCase_ == MessageOneofCase.TestCaseStarted) {
              subBuilder.MergeFrom(TestCaseStarted);
            }
            input.ReadMessage(subBuilder);
            TestCaseStarted = subBuilder;
            break;
          }
          case 50: {
            global::Io.Cucumber.Messages.TestStepStarted subBuilder = new global::Io.Cucumber.Messages.TestStepStarted();
            if (messageCase_ == MessageOneofCase.TestStepStarted) {
              subBuilder.MergeFrom(TestStepStarted);
            }
            input.ReadMessage(subBuilder);
            TestStepStarted = subBuilder;
            break;
          }
          case 58: {
            global::Io.Cucumber.Messages.TestStepFinished subBuilder = new global::Io.Cucumber.Messages.TestStepFinished();
            if (messageCase_ == MessageOneofCase.TestStepFinished) {
              subBuilder.MergeFrom(TestStepFinished);
            }
            input.ReadMessage(subBuilder);
            TestStepFinished = subBuilder;
            break;
          }
          case 66: {
            global::Io.Cucumber.Messages.TestCaseFinished subBuilder = new global::Io.Cucumber.Messages.TestCaseFinished();
            if (messageCase_ == MessageOneofCase.TestCaseFinished) {
              subBuilder.MergeFrom(TestCaseFinished);
            }
            input.ReadMessage(subBuilder);
            TestCaseFinished = subBuilder;
            break;
          }
          case 74: {
            global::Io.Cucumber.Messages.PickleAccepted subBuilder = new global::Io.Cucumber.Messages.PickleAccepted();
            if (messageCase_ == MessageOneofCase.PickleAccepted) {
              subBuilder.MergeFrom(PickleAccepted);
            }
            input.ReadMessage(subBuilder);
            PickleAccepted = subBuilder;
            break;
          }
          case 82: {
            global::Io.Cucumber.Messages.PickleRejected subBuilder = new global::Io.Cucumber.Messages.PickleRejected();
            if (messageCase_ == MessageOneofCase.PickleRejected) {
              subBuilder.MergeFrom(PickleRejected);
            }
            input.ReadMessage(subBuilder);
            PickleRejected = subBuilder;
            break;
          }
          case 90: {
            global::Io.Cucumber.Messages.TestCasePrepared subBuilder = new global::Io.Cucumber.Messages.TestCasePrepared();
            if (messageCase_ == MessageOneofCase.TestCasePrepared) {
              subBuilder.MergeFrom(TestCasePrepared);
            }
            input.ReadMessage(subBuilder);
            TestCasePrepared = subBuilder;
            break;
          }
          case 98: {
            global::Io.Cucumber.Messages.TestRunStarted subBuilder = new global::Io.Cucumber.Messages.TestRunStarted();
            if (messageCase_ == MessageOneofCase.TestRunStarted) {
              subBuilder.MergeFrom(TestRunStarted);
            }
            input.ReadMessage(subBuilder);
            TestRunStarted = subBuilder;
            break;
          }
          case 106: {
            global::Io.Cucumber.Messages.TestRunFinished subBuilder = new global::Io.Cucumber.Messages.TestRunFinished();
            if (messageCase_ == MessageOneofCase.TestRunFinished) {
              subBuilder.MergeFrom(TestRunFinished);
            }
            input.ReadMessage(subBuilder);
            TestRunFinished = subBuilder;
            break;
          }
          case 114: {
            global::Io.Cucumber.Messages.CommandStart subBuilder = new global::Io.Cucumber.Messages.CommandStart();
            if (messageCase_ == MessageOneofCase.CommandStart) {
              subBuilder.MergeFrom(CommandStart);
            }
            input.ReadMessage(subBuilder);
            CommandStart = subBuilder;
            break;
          }
          case 122: {
            global::Io.Cucumber.Messages.CommandActionComplete subBuilder = new global::Io.Cucumber.Messages.CommandActionComplete();
            if (messageCase_ == MessageOneofCase.CommandActionComplete) {
              subBuilder.MergeFrom(CommandActionComplete);
            }
            input.ReadMessage(subBuilder);
            CommandActionComplete = subBuilder;
            break;
          }
          case 130: {
            global::Io.Cucumber.Messages.CommandRunBeforeTestRunHooks subBuilder = new global::Io.Cucumber.Messages.CommandRunBeforeTestRunHooks();
            if (messageCase_ == MessageOneofCase.CommandRunBeforeTestRunHooks) {
              subBuilder.MergeFrom(CommandRunBeforeTestRunHooks);
            }
            input.ReadMessage(subBuilder);
            CommandRunBeforeTestRunHooks = subBuilder;
            break;
          }
          case 138: {
            global::Io.Cucumber.Messages.CommandInitializeTestCase subBuilder = new global::Io.Cucumber.Messages.CommandInitializeTestCase();
            if (messageCase_ == MessageOneofCase.CommandInitializeTestCase) {
              subBuilder.MergeFrom(CommandInitializeTestCase);
            }
            input.ReadMessage(subBuilder);
            CommandInitializeTestCase = subBuilder;
            break;
          }
          case 146: {
            global::Io.Cucumber.Messages.CommandRunBeforeTestCaseHook subBuilder = new global::Io.Cucumber.Messages.CommandRunBeforeTestCaseHook();
            if (messageCase_ == MessageOneofCase.CommandRunBeforeTestCaseHook) {
              subBuilder.MergeFrom(CommandRunBeforeTestCaseHook);
            }
            input.ReadMessage(subBuilder);
            CommandRunBeforeTestCaseHook = subBuilder;
            break;
          }
          case 154: {
            global::Io.Cucumber.Messages.CommandRunTestStep subBuilder = new global::Io.Cucumber.Messages.CommandRunTestStep();
            if (messageCase_ == MessageOneofCase.CommandRunTestStep) {
              subBuilder.MergeFrom(CommandRunTestStep);
            }
            input.ReadMessage(subBuilder);
            CommandRunTestStep = subBuilder;
            break;
          }
          case 162: {
            global::Io.Cucumber.Messages.CommandRunAfterTestCaseHook subBuilder = new global::Io.Cucumber.Messages.CommandRunAfterTestCaseHook();
            if (messageCase_ == MessageOneofCase.CommandRunAfterTestCaseHook) {
              subBuilder.MergeFrom(CommandRunAfterTestCaseHook);
            }
            input.ReadMessage(subBuilder);
            CommandRunAfterTestCaseHook = subBuilder;
            break;
          }
          case 170: {
            global::Io.Cucumber.Messages.CommandRunAfterTestRunHooks subBuilder = new global::Io.Cucumber.Messages.CommandRunAfterTestRunHooks();
            if (messageCase_ == MessageOneofCase.CommandRunAfterTestRunHooks) {
              subBuilder.MergeFrom(CommandRunAfterTestRunHooks);
            }
            input.ReadMessage(subBuilder);
            CommandRunAfterTestRunHooks = subBuilder;
            break;
          }
          case 178: {
            global::Io.Cucumber.Messages.CommandGenerateSnippet subBuilder = new global::Io.Cucumber.Messages.CommandGenerateSnippet();
            if (messageCase_ == MessageOneofCase.CommandGenerateSnippet) {
              subBuilder.MergeFrom(CommandGenerateSnippet);
            }
            input.ReadMessage(subBuilder);
            CommandGenerateSnippet = subBuilder;
            break;
          }
          case 186: {
            CommandError = input.ReadString();
            break;
          }
          case 194: {
            global::Io.Cucumber.Messages.TestCase subBuilder = new global::Io.Cucumber.Messages.TestCase();
            if (messageCase_ == MessageOneofCase.TestCase) {
              subBuilder.MergeFrom(TestCase);
            }
            input.ReadMessage(subBuilder);
            TestCase = subBuilder;
            break;
          }
          case 202: {
            global::Io.Cucumber.Messages.StepDefinition subBuilder = new global::Io.Cucumber.Messages.StepDefinition();
            if (messageCase_ == MessageOneofCase.StepDefinition) {
              subBuilder.MergeFrom(StepDefinition);
            }
            input.ReadMessage(subBuilder);
            StepDefinition = subBuilder;
            break;
          }
          case 210: {
            global::Io.Cucumber.Messages.Hook subBuilder = new global::Io.Cucumber.Messages.Hook();
            if (messageCase_ == MessageOneofCase.Hook) {
              subBuilder.MergeFrom(Hook);
            }
            input.ReadMessage(subBuilder);
            Hook = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Points to a line and a column in a text file
  /// </summary>
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location(Location other) : this() {
      line_ = other.line_;
      column_ = other.column_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 1;
    private uint line_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "column" field.</summary>
    public const int ColumnFieldNumber = 2;
    private uint column_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Column {
      get { return column_; }
      set {
        column_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Line != other.Line) return false;
      if (Column != other.Column) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Line != 0) hash ^= Line.GetHashCode();
      if (Column != 0) hash ^= Column.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Line != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Line);
      }
      if (Column != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Column);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Line);
      }
      if (Column != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Column);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
      if (other.Column != 0) {
        Column = other.Column;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Line = input.ReadUInt32();
            break;
          }
          case 16: {
            Column = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Points to a [Source](#io.cucumber.messages.Source) identified by `uri` and a
  /// [Location](#io.cucumber.messages.Location) within that file.
  /// </summary>
  public sealed partial class SourceReference : pb::IMessage<SourceReference> {
    private static readonly pb::MessageParser<SourceReference> _parser = new pb::MessageParser<SourceReference>(() => new SourceReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SourceReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceReference(SourceReference other) : this() {
      uri_ = other.uri_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceReference Clone() {
      return new SourceReference(this);
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 1;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 2;
    private global::Io.Cucumber.Messages.Location location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SourceReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SourceReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uri != other.Uri) return false;
      if (!object.Equals(Location, other.Location)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uri);
      }
      if (location_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Location);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SourceReference other) {
      if (other == null) {
        return;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Io.Cucumber.Messages.Location();
        }
        Location.MergeFrom(other.Location);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uri = input.ReadString();
            break;
          }
          case 18: {
            if (location_ == null) {
              location_ = new global::Io.Cucumber.Messages.Location();
            }
            input.ReadMessage(location_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A source file, typically a Gherkin document
  /// </summary>
  public sealed partial class Source : pb::IMessage<Source> {
    private static readonly pb::MessageParser<Source> _parser = new pb::MessageParser<Source>(() => new Source());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Source> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Source() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Source(Source other) : this() {
      uri_ = other.uri_;
      data_ = other.data_;
      mediaType_ = other.mediaType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Source Clone() {
      return new Source(this);
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 1;
    private string uri_ = "";
    /// <summary>
    ///*
    /// The [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)
    /// of the source, typically a file path relative to the root directory
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    /// <summary>
    /// The contents of the file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "media_type" field.</summary>
    public const int MediaTypeFieldNumber = 4;
    private string mediaType_ = "";
    /// <summary>
    /// The media type of the file. Can be used to specify custom types, such as
    /// text/x.cucumber.gherkin+plain
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MediaType {
      get { return mediaType_; }
      set {
        mediaType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Source);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Source other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uri != other.Uri) return false;
      if (Data != other.Data) return false;
      if (MediaType != other.MediaType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (MediaType.Length != 0) hash ^= MediaType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uri);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (MediaType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MediaType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (MediaType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MediaType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Source other) {
      if (other == null) {
        return;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.MediaType.Length != 0) {
        MediaType = other.MediaType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uri = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
          case 34: {
            MediaType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// The [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree) of a Gherkin document.
  /// Cucumber implementations should *not* depend on `GherkinDocument` or any of its
  /// children for execution - use [Pickle](#io.cucumber.messages.Pickle) instead.
  ///
  /// The only consumers of `GherkinDocument` should only be formatters that produce
  /// "rich" output, resembling the original Gherkin document.
  /// </summary>
  public sealed partial class GherkinDocument : pb::IMessage<GherkinDocument> {
    private static readonly pb::MessageParser<GherkinDocument> _parser = new pb::MessageParser<GherkinDocument>(() => new GherkinDocument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GherkinDocument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GherkinDocument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GherkinDocument(GherkinDocument other) : this() {
      uri_ = other.uri_;
      feature_ = other.feature_ != null ? other.feature_.Clone() : null;
      comments_ = other.comments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GherkinDocument Clone() {
      return new GherkinDocument(this);
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 1;
    private string uri_ = "";
    /// <summary>
    ///*
    /// The [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)
    /// of the source, typically a file path relative to the root directory
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feature" field.</summary>
    public const int FeatureFieldNumber = 2;
    private global::Io.Cucumber.Messages.GherkinDocument.Types.Feature feature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.GherkinDocument.Types.Feature Feature {
      get { return feature_; }
      set {
        feature_ = value;
      }
    }

    /// <summary>Field number for the "comments" field.</summary>
    public const int CommentsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.GherkinDocument.Types.Comment> _repeated_comments_codec
        = pb::FieldCodec.ForMessage(26, global::Io.Cucumber.Messages.GherkinDocument.Types.Comment.Parser);
    private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Comment> comments_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Comment>();
    /// <summary>
    /// All the comments in the Gherkin document
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Comment> Comments {
      get { return comments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GherkinDocument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GherkinDocument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uri != other.Uri) return false;
      if (!object.Equals(Feature, other.Feature)) return false;
      if(!comments_.Equals(other.comments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (feature_ != null) hash ^= Feature.GetHashCode();
      hash ^= comments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uri);
      }
      if (feature_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Feature);
      }
      comments_.WriteTo(output, _repeated_comments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (feature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Feature);
      }
      size += comments_.CalculateSize(_repeated_comments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GherkinDocument other) {
      if (other == null) {
        return;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.feature_ != null) {
        if (feature_ == null) {
          feature_ = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature();
        }
        Feature.MergeFrom(other.Feature);
      }
      comments_.Add(other.comments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uri = input.ReadString();
            break;
          }
          case 18: {
            if (feature_ == null) {
              feature_ = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature();
            }
            input.ReadMessage(feature_);
            break;
          }
          case 26: {
            comments_.AddEntriesFrom(input, _repeated_comments_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GherkinDocument message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///*
      /// A comment in a Gherkin document
      /// </summary>
      public sealed partial class Comment : pb::IMessage<Comment> {
        private static readonly pb::MessageParser<Comment> _parser = new pb::MessageParser<Comment>(() => new Comment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Comment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Io.Cucumber.Messages.GherkinDocument.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Comment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Comment(Comment other) : this() {
          location_ = other.location_ != null ? other.location_.Clone() : null;
          text_ = other.text_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Comment Clone() {
          return new Comment(this);
        }

        /// <summary>Field number for the "location" field.</summary>
        public const int LocationFieldNumber = 1;
        private global::Io.Cucumber.Messages.Location location_;
        /// <summary>
        /// The location of the comment
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Io.Cucumber.Messages.Location Location {
          get { return location_; }
          set {
            location_ = value;
          }
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int TextFieldNumber = 2;
        private string text_ = "";
        /// <summary>
        /// The text of the comment
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text {
          get { return text_; }
          set {
            text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Comment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Comment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Location, other.Location)) return false;
          if (Text != other.Text) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (location_ != null) hash ^= Location.GetHashCode();
          if (Text.Length != 0) hash ^= Text.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (location_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Location);
          }
          if (Text.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Text);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (location_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
          }
          if (Text.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Comment other) {
          if (other == null) {
            return;
          }
          if (other.location_ != null) {
            if (location_ == null) {
              location_ = new global::Io.Cucumber.Messages.Location();
            }
            Location.MergeFrom(other.Location);
          }
          if (other.Text.Length != 0) {
            Text = other.Text;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (location_ == null) {
                  location_ = new global::Io.Cucumber.Messages.Location();
                }
                input.ReadMessage(location_);
                break;
              }
              case 18: {
                Text = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///*
      /// The top level node in the AST
      /// </summary>
      public sealed partial class Feature : pb::IMessage<Feature> {
        private static readonly pb::MessageParser<Feature> _parser = new pb::MessageParser<Feature>(() => new Feature());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Feature> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Io.Cucumber.Messages.GherkinDocument.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feature() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feature(Feature other) : this() {
          location_ = other.location_ != null ? other.location_.Clone() : null;
          tags_ = other.tags_.Clone();
          language_ = other.language_;
          keyword_ = other.keyword_;
          name_ = other.name_;
          description_ = other.description_;
          children_ = other.children_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Feature Clone() {
          return new Feature(this);
        }

        /// <summary>Field number for the "location" field.</summary>
        public const int LocationFieldNumber = 1;
        private global::Io.Cucumber.Messages.Location location_;
        /// <summary>
        /// The location of the `Feature` keyword
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Io.Cucumber.Messages.Location Location {
          get { return location_; }
          set {
            location_ = value;
          }
        }

        /// <summary>Field number for the "tags" field.</summary>
        public const int TagsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag> _repeated_tags_codec
            = pb::FieldCodec.ForMessage(18, global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag.Parser);
        private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag> tags_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag>();
        /// <summary>
        /// All the tags placed above the `Feature` keyword
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag> Tags {
          get { return tags_; }
        }

        /// <summary>Field number for the "language" field.</summary>
        public const int LanguageFieldNumber = 3;
        private string language_ = "";
        /// <summary>
        /// The [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language code of the Gherkin document
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Language {
          get { return language_; }
          set {
            language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "keyword" field.</summary>
        public const int KeywordFieldNumber = 4;
        private string keyword_ = "";
        /// <summary>
        /// The text of the `Feature` keyword (in the language specified by `language`)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Keyword {
          get { return keyword_; }
          set {
            keyword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 5;
        private string name_ = "";
        /// <summary>
        /// The name of the feature (the text following the `keyword`)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 6;
        private string description_ = "";
        /// <summary>
        /// The line(s) underneath the line with the `keyword` that are used as description
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "children" field.</summary>
        public const int ChildrenFieldNumber = 7;
        private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild> _repeated_children_codec
            = pb::FieldCodec.ForMessage(58, global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Parser);
        private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild> children_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild>();
        /// <summary>
        /// Zero or more children
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild> Children {
          get { return children_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Feature);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Feature other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Location, other.Location)) return false;
          if(!tags_.Equals(other.tags_)) return false;
          if (Language != other.Language) return false;
          if (Keyword != other.Keyword) return false;
          if (Name != other.Name) return false;
          if (Description != other.Description) return false;
          if(!children_.Equals(other.children_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (location_ != null) hash ^= Location.GetHashCode();
          hash ^= tags_.GetHashCode();
          if (Language.Length != 0) hash ^= Language.GetHashCode();
          if (Keyword.Length != 0) hash ^= Keyword.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          hash ^= children_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (location_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Location);
          }
          tags_.WriteTo(output, _repeated_tags_codec);
          if (Language.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Language);
          }
          if (Keyword.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Keyword);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Name);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Description);
          }
          children_.WriteTo(output, _repeated_children_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (location_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
          }
          size += tags_.CalculateSize(_repeated_tags_codec);
          if (Language.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
          }
          if (Keyword.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Keyword);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          size += children_.CalculateSize(_repeated_children_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Feature other) {
          if (other == null) {
            return;
          }
          if (other.location_ != null) {
            if (location_ == null) {
              location_ = new global::Io.Cucumber.Messages.Location();
            }
            Location.MergeFrom(other.Location);
          }
          tags_.Add(other.tags_);
          if (other.Language.Length != 0) {
            Language = other.Language;
          }
          if (other.Keyword.Length != 0) {
            Keyword = other.Keyword;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          children_.Add(other.children_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (location_ == null) {
                  location_ = new global::Io.Cucumber.Messages.Location();
                }
                input.ReadMessage(location_);
                break;
              }
              case 18: {
                tags_.AddEntriesFrom(input, _repeated_tags_codec);
                break;
              }
              case 26: {
                Language = input.ReadString();
                break;
              }
              case 34: {
                Keyword = input.ReadString();
                break;
              }
              case 42: {
                Name = input.ReadString();
                break;
              }
              case 50: {
                Description = input.ReadString();
                break;
              }
              case 58: {
                children_.AddEntriesFrom(input, _repeated_children_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Feature message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          ///*
          /// A tag
          /// </summary>
          public sealed partial class Tag : pb::IMessage<Tag> {
            private static readonly pb::MessageParser<Tag> _parser = new pb::MessageParser<Tag>(() => new Tag());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Tag> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Tag() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Tag(Tag other) : this() {
              location_ = other.location_ != null ? other.location_.Clone() : null;
              name_ = other.name_;
              id_ = other.id_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Tag Clone() {
              return new Tag(this);
            }

            /// <summary>Field number for the "location" field.</summary>
            public const int LocationFieldNumber = 1;
            private global::Io.Cucumber.Messages.Location location_;
            /// <summary>
            /// Location of the tag
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Io.Cucumber.Messages.Location Location {
              get { return location_; }
              set {
                location_ = value;
              }
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 2;
            private string name_ = "";
            /// <summary>
            /// The name of the tag (including the leading `@`)
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 3;
            private string id_ = "";
            /// <summary>
            /// Unique ID to be able to reference the Tag from PickleTag
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Id {
              get { return id_; }
              set {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Tag);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Tag other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Location, other.Location)) return false;
              if (Name != other.Name) return false;
              if (Id != other.Id) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (location_ != null) hash ^= Location.GetHashCode();
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (Id.Length != 0) hash ^= Id.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (location_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Location);
              }
              if (Name.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Name);
              }
              if (Id.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Id);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (location_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
              }
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (Id.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Tag other) {
              if (other == null) {
                return;
              }
              if (other.location_ != null) {
                if (location_ == null) {
                  location_ = new global::Io.Cucumber.Messages.Location();
                }
                Location.MergeFrom(other.Location);
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              if (other.Id.Length != 0) {
                Id = other.Id;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (location_ == null) {
                      location_ = new global::Io.Cucumber.Messages.Location();
                    }
                    input.ReadMessage(location_);
                    break;
                  }
                  case 18: {
                    Name = input.ReadString();
                    break;
                  }
                  case 26: {
                    Id = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          ///*
          /// A child node of a `Feature` node
          /// </summary>
          public sealed partial class FeatureChild : pb::IMessage<FeatureChild> {
            private static readonly pb::MessageParser<FeatureChild> _parser = new pb::MessageParser<FeatureChild>(() => new FeatureChild());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<FeatureChild> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FeatureChild() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FeatureChild(FeatureChild other) : this() {
              switch (other.ValueCase) {
                case ValueOneofCase.Rule:
                  Rule = other.Rule.Clone();
                  break;
                case ValueOneofCase.Background:
                  Background = other.Background.Clone();
                  break;
                case ValueOneofCase.Scenario:
                  Scenario = other.Scenario.Clone();
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public FeatureChild Clone() {
              return new FeatureChild(this);
            }

            /// <summary>Field number for the "rule" field.</summary>
            public const int RuleFieldNumber = 1;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.Rule Rule {
              get { return valueCase_ == ValueOneofCase.Rule ? (global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.Rule) value_ : null; }
              set {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Rule;
              }
            }

            /// <summary>Field number for the "background" field.</summary>
            public const int BackgroundFieldNumber = 2;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Background Background {
              get { return valueCase_ == ValueOneofCase.Background ? (global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Background) value_ : null; }
              set {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Background;
              }
            }

            /// <summary>Field number for the "scenario" field.</summary>
            public const int ScenarioFieldNumber = 3;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario Scenario {
              get { return valueCase_ == ValueOneofCase.Scenario ? (global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario) value_ : null; }
              set {
                value_ = value;
                valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Scenario;
              }
            }

            private object value_;
            /// <summary>Enum of possible cases for the "value" oneof.</summary>
            public enum ValueOneofCase {
              None = 0,
              Rule = 1,
              Background = 2,
              Scenario = 3,
            }
            private ValueOneofCase valueCase_ = ValueOneofCase.None;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ValueOneofCase ValueCase {
              get { return valueCase_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearValue() {
              valueCase_ = ValueOneofCase.None;
              value_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as FeatureChild);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(FeatureChild other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Rule, other.Rule)) return false;
              if (!object.Equals(Background, other.Background)) return false;
              if (!object.Equals(Scenario, other.Scenario)) return false;
              if (ValueCase != other.ValueCase) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (valueCase_ == ValueOneofCase.Rule) hash ^= Rule.GetHashCode();
              if (valueCase_ == ValueOneofCase.Background) hash ^= Background.GetHashCode();
              if (valueCase_ == ValueOneofCase.Scenario) hash ^= Scenario.GetHashCode();
              hash ^= (int) valueCase_;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (valueCase_ == ValueOneofCase.Rule) {
                output.WriteRawTag(10);
                output.WriteMessage(Rule);
              }
              if (valueCase_ == ValueOneofCase.Background) {
                output.WriteRawTag(18);
                output.WriteMessage(Background);
              }
              if (valueCase_ == ValueOneofCase.Scenario) {
                output.WriteRawTag(26);
                output.WriteMessage(Scenario);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (valueCase_ == ValueOneofCase.Rule) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rule);
              }
              if (valueCase_ == ValueOneofCase.Background) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Background);
              }
              if (valueCase_ == ValueOneofCase.Scenario) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scenario);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(FeatureChild other) {
              if (other == null) {
                return;
              }
              switch (other.ValueCase) {
                case ValueOneofCase.Rule:
                  if (Rule == null) {
                    Rule = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.Rule();
                  }
                  Rule.MergeFrom(other.Rule);
                  break;
                case ValueOneofCase.Background:
                  if (Background == null) {
                    Background = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Background();
                  }
                  Background.MergeFrom(other.Background);
                  break;
                case ValueOneofCase.Scenario:
                  if (Scenario == null) {
                    Scenario = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario();
                  }
                  Scenario.MergeFrom(other.Scenario);
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.Rule subBuilder = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.Rule();
                    if (valueCase_ == ValueOneofCase.Rule) {
                      subBuilder.MergeFrom(Rule);
                    }
                    input.ReadMessage(subBuilder);
                    Rule = subBuilder;
                    break;
                  }
                  case 18: {
                    global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Background subBuilder = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Background();
                    if (valueCase_ == ValueOneofCase.Background) {
                      subBuilder.MergeFrom(Background);
                    }
                    input.ReadMessage(subBuilder);
                    Background = subBuilder;
                    break;
                  }
                  case 26: {
                    global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario subBuilder = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario();
                    if (valueCase_ == ValueOneofCase.Scenario) {
                      subBuilder.MergeFrom(Scenario);
                    }
                    input.ReadMessage(subBuilder);
                    Scenario = subBuilder;
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the FeatureChild message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              /// <summary>
              ///*
              /// A `Rule` node
              /// </summary>
              public sealed partial class Rule : pb::IMessage<Rule> {
                private static readonly pb::MessageParser<Rule> _parser = new pb::MessageParser<Rule>(() => new Rule());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Rule> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Rule() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Rule(Rule other) : this() {
                  location_ = other.location_ != null ? other.location_.Clone() : null;
                  keyword_ = other.keyword_;
                  name_ = other.name_;
                  description_ = other.description_;
                  children_ = other.children_.Clone();
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Rule Clone() {
                  return new Rule(this);
                }

                /// <summary>Field number for the "location" field.</summary>
                public const int LocationFieldNumber = 1;
                private global::Io.Cucumber.Messages.Location location_;
                /// <summary>
                /// The location of the `Rule` keyword
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Io.Cucumber.Messages.Location Location {
                  get { return location_; }
                  set {
                    location_ = value;
                  }
                }

                /// <summary>Field number for the "keyword" field.</summary>
                public const int KeywordFieldNumber = 2;
                private string keyword_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Keyword {
                  get { return keyword_; }
                  set {
                    keyword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 3;
                private string name_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Name {
                  get { return name_; }
                  set {
                    name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "description" field.</summary>
                public const int DescriptionFieldNumber = 4;
                private string description_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Description {
                  get { return description_; }
                  set {
                    description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "children" field.</summary>
                public const int ChildrenFieldNumber = 5;
                private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.RuleChild> _repeated_children_codec
                    = pb::FieldCodec.ForMessage(42, global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.RuleChild.Parser);
                private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.RuleChild> children_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.RuleChild>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Types.RuleChild> Children {
                  get { return children_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Rule);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Rule other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!object.Equals(Location, other.Location)) return false;
                  if (Keyword != other.Keyword) return false;
                  if (Name != other.Name) return false;
                  if (Description != other.Description) return false;
                  if(!children_.Equals(other.children_)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (location_ != null) hash ^= Location.GetHashCode();
                  if (Keyword.Length != 0) hash ^= Keyword.GetHashCode();
                  if (Name.Length != 0) hash ^= Name.GetHashCode();
                  if (Description.Length != 0) hash ^= Description.GetHashCode();
                  hash ^= children_.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (location_ != null) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Location);
                  }
                  if (Keyword.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(Keyword);
                  }
                  if (Name.Length != 0) {
                    output.WriteRawTag(26);
                    output.WriteString(Name);
                  }
                  if (Description.Length != 0) {
                    output.WriteRawTag(34);
                    output.WriteString(Description);
                  }
                  children_.WriteTo(output, _repeated_children_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (location_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
                  }
                  if (Keyword.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Keyword);
                  }
                  if (Name.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
                  }
                  if (Description.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
                  }
                  size += children_.CalculateSize(_repeated_children_codec);
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Rule other) {
                  if (other == null) {
                    return;
                  }
                  if (other.location_ != null) {
                    if (location_ == null) {
                      location_ = new global::Io.Cucumber.Messages.Location();
                    }
                    Location.MergeFrom(other.Location);
                  }
                  if (other.Keyword.Length != 0) {
                    Keyword = other.Keyword;
                  }
                  if (other.Name.Length != 0) {
                    Name = other.Name;
                  }
                  if (other.Description.Length != 0) {
                    Description = other.Description;
                  }
                  children_.Add(other.children_);
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        if (location_ == null) {
                          location_ = new global::Io.Cucumber.Messages.Location();
                        }
                        input.ReadMessage(location_);
                        break;
                      }
                      case 18: {
                        Keyword = input.ReadString();
                        break;
                      }
                      case 26: {
                        Name = input.ReadString();
                        break;
                      }
                      case 34: {
                        Description = input.ReadString();
                        break;
                      }
                      case 42: {
                        children_.AddEntriesFrom(input, _repeated_children_codec);
                        break;
                      }
                    }
                  }
                }

              }

              public sealed partial class RuleChild : pb::IMessage<RuleChild> {
                private static readonly pb::MessageParser<RuleChild> _parser = new pb::MessageParser<RuleChild>(() => new RuleChild());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<RuleChild> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.FeatureChild.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RuleChild() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RuleChild(RuleChild other) : this() {
                  switch (other.ValueCase) {
                    case ValueOneofCase.Background:
                      Background = other.Background.Clone();
                      break;
                    case ValueOneofCase.Scenario:
                      Scenario = other.Scenario.Clone();
                      break;
                  }

                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RuleChild Clone() {
                  return new RuleChild(this);
                }

                /// <summary>Field number for the "background" field.</summary>
                public const int BackgroundFieldNumber = 1;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Background Background {
                  get { return valueCase_ == ValueOneofCase.Background ? (global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Background) value_ : null; }
                  set {
                    value_ = value;
                    valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Background;
                  }
                }

                /// <summary>Field number for the "scenario" field.</summary>
                public const int ScenarioFieldNumber = 2;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario Scenario {
                  get { return valueCase_ == ValueOneofCase.Scenario ? (global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario) value_ : null; }
                  set {
                    value_ = value;
                    valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Scenario;
                  }
                }

                private object value_;
                /// <summary>Enum of possible cases for the "value" oneof.</summary>
                public enum ValueOneofCase {
                  None = 0,
                  Background = 1,
                  Scenario = 2,
                }
                private ValueOneofCase valueCase_ = ValueOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ValueOneofCase ValueCase {
                  get { return valueCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearValue() {
                  valueCase_ = ValueOneofCase.None;
                  value_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as RuleChild);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(RuleChild other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!object.Equals(Background, other.Background)) return false;
                  if (!object.Equals(Scenario, other.Scenario)) return false;
                  if (ValueCase != other.ValueCase) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (valueCase_ == ValueOneofCase.Background) hash ^= Background.GetHashCode();
                  if (valueCase_ == ValueOneofCase.Scenario) hash ^= Scenario.GetHashCode();
                  hash ^= (int) valueCase_;
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (valueCase_ == ValueOneofCase.Background) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Background);
                  }
                  if (valueCase_ == ValueOneofCase.Scenario) {
                    output.WriteRawTag(18);
                    output.WriteMessage(Scenario);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (valueCase_ == ValueOneofCase.Background) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Background);
                  }
                  if (valueCase_ == ValueOneofCase.Scenario) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scenario);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(RuleChild other) {
                  if (other == null) {
                    return;
                  }
                  switch (other.ValueCase) {
                    case ValueOneofCase.Background:
                      if (Background == null) {
                        Background = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Background();
                      }
                      Background.MergeFrom(other.Background);
                      break;
                    case ValueOneofCase.Scenario:
                      if (Scenario == null) {
                        Scenario = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario();
                      }
                      Scenario.MergeFrom(other.Scenario);
                      break;
                  }

                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Background subBuilder = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Background();
                        if (valueCase_ == ValueOneofCase.Background) {
                          subBuilder.MergeFrom(Background);
                        }
                        input.ReadMessage(subBuilder);
                        Background = subBuilder;
                        break;
                      }
                      case 18: {
                        global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario subBuilder = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario();
                        if (valueCase_ == ValueOneofCase.Scenario) {
                          subBuilder.MergeFrom(Scenario);
                        }
                        input.ReadMessage(subBuilder);
                        Scenario = subBuilder;
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

          public sealed partial class Background : pb::IMessage<Background> {
            private static readonly pb::MessageParser<Background> _parser = new pb::MessageParser<Background>(() => new Background());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Background> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Background() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Background(Background other) : this() {
              location_ = other.location_ != null ? other.location_.Clone() : null;
              keyword_ = other.keyword_;
              name_ = other.name_;
              description_ = other.description_;
              steps_ = other.steps_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Background Clone() {
              return new Background(this);
            }

            /// <summary>Field number for the "location" field.</summary>
            public const int LocationFieldNumber = 1;
            private global::Io.Cucumber.Messages.Location location_;
            /// <summary>
            /// The location of the `Background` keyword
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Io.Cucumber.Messages.Location Location {
              get { return location_; }
              set {
                location_ = value;
              }
            }

            /// <summary>Field number for the "keyword" field.</summary>
            public const int KeywordFieldNumber = 2;
            private string keyword_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Keyword {
              get { return keyword_; }
              set {
                keyword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 3;
            private string name_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "description" field.</summary>
            public const int DescriptionFieldNumber = 4;
            private string description_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Description {
              get { return description_; }
              set {
                description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "steps" field.</summary>
            public const int StepsFieldNumber = 5;
            private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step> _repeated_steps_codec
                = pb::FieldCodec.ForMessage(42, global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Parser);
            private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step> steps_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step> Steps {
              get { return steps_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Background);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Background other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Location, other.Location)) return false;
              if (Keyword != other.Keyword) return false;
              if (Name != other.Name) return false;
              if (Description != other.Description) return false;
              if(!steps_.Equals(other.steps_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (location_ != null) hash ^= Location.GetHashCode();
              if (Keyword.Length != 0) hash ^= Keyword.GetHashCode();
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (Description.Length != 0) hash ^= Description.GetHashCode();
              hash ^= steps_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (location_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Location);
              }
              if (Keyword.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Keyword);
              }
              if (Name.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Name);
              }
              if (Description.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(Description);
              }
              steps_.WriteTo(output, _repeated_steps_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (location_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
              }
              if (Keyword.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Keyword);
              }
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (Description.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
              }
              size += steps_.CalculateSize(_repeated_steps_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Background other) {
              if (other == null) {
                return;
              }
              if (other.location_ != null) {
                if (location_ == null) {
                  location_ = new global::Io.Cucumber.Messages.Location();
                }
                Location.MergeFrom(other.Location);
              }
              if (other.Keyword.Length != 0) {
                Keyword = other.Keyword;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              if (other.Description.Length != 0) {
                Description = other.Description;
              }
              steps_.Add(other.steps_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (location_ == null) {
                      location_ = new global::Io.Cucumber.Messages.Location();
                    }
                    input.ReadMessage(location_);
                    break;
                  }
                  case 18: {
                    Keyword = input.ReadString();
                    break;
                  }
                  case 26: {
                    Name = input.ReadString();
                    break;
                  }
                  case 34: {
                    Description = input.ReadString();
                    break;
                  }
                  case 42: {
                    steps_.AddEntriesFrom(input, _repeated_steps_codec);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Scenario : pb::IMessage<Scenario> {
            private static readonly pb::MessageParser<Scenario> _parser = new pb::MessageParser<Scenario>(() => new Scenario());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Scenario> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Scenario() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Scenario(Scenario other) : this() {
              location_ = other.location_ != null ? other.location_.Clone() : null;
              tags_ = other.tags_.Clone();
              keyword_ = other.keyword_;
              name_ = other.name_;
              description_ = other.description_;
              steps_ = other.steps_.Clone();
              examples_ = other.examples_.Clone();
              id_ = other.id_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Scenario Clone() {
              return new Scenario(this);
            }

            /// <summary>Field number for the "location" field.</summary>
            public const int LocationFieldNumber = 1;
            private global::Io.Cucumber.Messages.Location location_;
            /// <summary>
            /// The location of the `Scenario` keyword
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Io.Cucumber.Messages.Location Location {
              get { return location_; }
              set {
                location_ = value;
              }
            }

            /// <summary>Field number for the "tags" field.</summary>
            public const int TagsFieldNumber = 2;
            private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag> _repeated_tags_codec
                = pb::FieldCodec.ForMessage(18, global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag.Parser);
            private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag> tags_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag> Tags {
              get { return tags_; }
            }

            /// <summary>Field number for the "keyword" field.</summary>
            public const int KeywordFieldNumber = 3;
            private string keyword_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Keyword {
              get { return keyword_; }
              set {
                keyword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 4;
            private string name_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "description" field.</summary>
            public const int DescriptionFieldNumber = 5;
            private string description_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Description {
              get { return description_; }
              set {
                description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "steps" field.</summary>
            public const int StepsFieldNumber = 6;
            private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step> _repeated_steps_codec
                = pb::FieldCodec.ForMessage(50, global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Parser);
            private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step> steps_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step> Steps {
              get { return steps_; }
            }

            /// <summary>Field number for the "examples" field.</summary>
            public const int ExamplesFieldNumber = 7;
            private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario.Types.Examples> _repeated_examples_codec
                = pb::FieldCodec.ForMessage(58, global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario.Types.Examples.Parser);
            private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario.Types.Examples> examples_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario.Types.Examples>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario.Types.Examples> Examples {
              get { return examples_; }
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 8;
            private string id_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Id {
              get { return id_; }
              set {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Scenario);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Scenario other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Location, other.Location)) return false;
              if(!tags_.Equals(other.tags_)) return false;
              if (Keyword != other.Keyword) return false;
              if (Name != other.Name) return false;
              if (Description != other.Description) return false;
              if(!steps_.Equals(other.steps_)) return false;
              if(!examples_.Equals(other.examples_)) return false;
              if (Id != other.Id) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (location_ != null) hash ^= Location.GetHashCode();
              hash ^= tags_.GetHashCode();
              if (Keyword.Length != 0) hash ^= Keyword.GetHashCode();
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (Description.Length != 0) hash ^= Description.GetHashCode();
              hash ^= steps_.GetHashCode();
              hash ^= examples_.GetHashCode();
              if (Id.Length != 0) hash ^= Id.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (location_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Location);
              }
              tags_.WriteTo(output, _repeated_tags_codec);
              if (Keyword.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Keyword);
              }
              if (Name.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(Name);
              }
              if (Description.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(Description);
              }
              steps_.WriteTo(output, _repeated_steps_codec);
              examples_.WriteTo(output, _repeated_examples_codec);
              if (Id.Length != 0) {
                output.WriteRawTag(66);
                output.WriteString(Id);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (location_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
              }
              size += tags_.CalculateSize(_repeated_tags_codec);
              if (Keyword.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Keyword);
              }
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (Description.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
              }
              size += steps_.CalculateSize(_repeated_steps_codec);
              size += examples_.CalculateSize(_repeated_examples_codec);
              if (Id.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Scenario other) {
              if (other == null) {
                return;
              }
              if (other.location_ != null) {
                if (location_ == null) {
                  location_ = new global::Io.Cucumber.Messages.Location();
                }
                Location.MergeFrom(other.Location);
              }
              tags_.Add(other.tags_);
              if (other.Keyword.Length != 0) {
                Keyword = other.Keyword;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              if (other.Description.Length != 0) {
                Description = other.Description;
              }
              steps_.Add(other.steps_);
              examples_.Add(other.examples_);
              if (other.Id.Length != 0) {
                Id = other.Id;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (location_ == null) {
                      location_ = new global::Io.Cucumber.Messages.Location();
                    }
                    input.ReadMessage(location_);
                    break;
                  }
                  case 18: {
                    tags_.AddEntriesFrom(input, _repeated_tags_codec);
                    break;
                  }
                  case 26: {
                    Keyword = input.ReadString();
                    break;
                  }
                  case 34: {
                    Name = input.ReadString();
                    break;
                  }
                  case 42: {
                    Description = input.ReadString();
                    break;
                  }
                  case 50: {
                    steps_.AddEntriesFrom(input, _repeated_steps_codec);
                    break;
                  }
                  case 58: {
                    examples_.AddEntriesFrom(input, _repeated_examples_codec);
                    break;
                  }
                  case 66: {
                    Id = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Scenario message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class Examples : pb::IMessage<Examples> {
                private static readonly pb::MessageParser<Examples> _parser = new pb::MessageParser<Examples>(() => new Examples());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Examples> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Scenario.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Examples() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Examples(Examples other) : this() {
                  location_ = other.location_ != null ? other.location_.Clone() : null;
                  tags_ = other.tags_.Clone();
                  keyword_ = other.keyword_;
                  name_ = other.name_;
                  description_ = other.description_;
                  tableHeader_ = other.tableHeader_ != null ? other.tableHeader_.Clone() : null;
                  tableBody_ = other.tableBody_.Clone();
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Examples Clone() {
                  return new Examples(this);
                }

                /// <summary>Field number for the "location" field.</summary>
                public const int LocationFieldNumber = 1;
                private global::Io.Cucumber.Messages.Location location_;
                /// <summary>
                /// The location of the `Examples` keyword
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Io.Cucumber.Messages.Location Location {
                  get { return location_; }
                  set {
                    location_ = value;
                  }
                }

                /// <summary>Field number for the "tags" field.</summary>
                public const int TagsFieldNumber = 2;
                private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag> _repeated_tags_codec
                    = pb::FieldCodec.ForMessage(18, global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag.Parser);
                private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag> tags_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Tag> Tags {
                  get { return tags_; }
                }

                /// <summary>Field number for the "keyword" field.</summary>
                public const int KeywordFieldNumber = 3;
                private string keyword_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Keyword {
                  get { return keyword_; }
                  set {
                    keyword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 4;
                private string name_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Name {
                  get { return name_; }
                  set {
                    name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "description" field.</summary>
                public const int DescriptionFieldNumber = 5;
                private string description_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Description {
                  get { return description_; }
                  set {
                    description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "table_header" field.</summary>
                public const int TableHeaderFieldNumber = 6;
                private global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow tableHeader_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow TableHeader {
                  get { return tableHeader_; }
                  set {
                    tableHeader_ = value;
                  }
                }

                /// <summary>Field number for the "table_body" field.</summary>
                public const int TableBodyFieldNumber = 7;
                private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow> _repeated_tableBody_codec
                    = pb::FieldCodec.ForMessage(58, global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow.Parser);
                private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow> tableBody_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow> TableBody {
                  get { return tableBody_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Examples);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Examples other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!object.Equals(Location, other.Location)) return false;
                  if(!tags_.Equals(other.tags_)) return false;
                  if (Keyword != other.Keyword) return false;
                  if (Name != other.Name) return false;
                  if (Description != other.Description) return false;
                  if (!object.Equals(TableHeader, other.TableHeader)) return false;
                  if(!tableBody_.Equals(other.tableBody_)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (location_ != null) hash ^= Location.GetHashCode();
                  hash ^= tags_.GetHashCode();
                  if (Keyword.Length != 0) hash ^= Keyword.GetHashCode();
                  if (Name.Length != 0) hash ^= Name.GetHashCode();
                  if (Description.Length != 0) hash ^= Description.GetHashCode();
                  if (tableHeader_ != null) hash ^= TableHeader.GetHashCode();
                  hash ^= tableBody_.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (location_ != null) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Location);
                  }
                  tags_.WriteTo(output, _repeated_tags_codec);
                  if (Keyword.Length != 0) {
                    output.WriteRawTag(26);
                    output.WriteString(Keyword);
                  }
                  if (Name.Length != 0) {
                    output.WriteRawTag(34);
                    output.WriteString(Name);
                  }
                  if (Description.Length != 0) {
                    output.WriteRawTag(42);
                    output.WriteString(Description);
                  }
                  if (tableHeader_ != null) {
                    output.WriteRawTag(50);
                    output.WriteMessage(TableHeader);
                  }
                  tableBody_.WriteTo(output, _repeated_tableBody_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (location_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
                  }
                  size += tags_.CalculateSize(_repeated_tags_codec);
                  if (Keyword.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Keyword);
                  }
                  if (Name.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
                  }
                  if (Description.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
                  }
                  if (tableHeader_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableHeader);
                  }
                  size += tableBody_.CalculateSize(_repeated_tableBody_codec);
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Examples other) {
                  if (other == null) {
                    return;
                  }
                  if (other.location_ != null) {
                    if (location_ == null) {
                      location_ = new global::Io.Cucumber.Messages.Location();
                    }
                    Location.MergeFrom(other.Location);
                  }
                  tags_.Add(other.tags_);
                  if (other.Keyword.Length != 0) {
                    Keyword = other.Keyword;
                  }
                  if (other.Name.Length != 0) {
                    Name = other.Name;
                  }
                  if (other.Description.Length != 0) {
                    Description = other.Description;
                  }
                  if (other.tableHeader_ != null) {
                    if (tableHeader_ == null) {
                      tableHeader_ = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow();
                    }
                    TableHeader.MergeFrom(other.TableHeader);
                  }
                  tableBody_.Add(other.tableBody_);
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        if (location_ == null) {
                          location_ = new global::Io.Cucumber.Messages.Location();
                        }
                        input.ReadMessage(location_);
                        break;
                      }
                      case 18: {
                        tags_.AddEntriesFrom(input, _repeated_tags_codec);
                        break;
                      }
                      case 26: {
                        Keyword = input.ReadString();
                        break;
                      }
                      case 34: {
                        Name = input.ReadString();
                        break;
                      }
                      case 42: {
                        Description = input.ReadString();
                        break;
                      }
                      case 50: {
                        if (tableHeader_ == null) {
                          tableHeader_ = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow();
                        }
                        input.ReadMessage(tableHeader_);
                        break;
                      }
                      case 58: {
                        tableBody_.AddEntriesFrom(input, _repeated_tableBody_codec);
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

          /// <summary>
          /// A row in a table
          /// </summary>
          public sealed partial class TableRow : pb::IMessage<TableRow> {
            private static readonly pb::MessageParser<TableRow> _parser = new pb::MessageParser<TableRow>(() => new TableRow());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TableRow> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TableRow() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TableRow(TableRow other) : this() {
              location_ = other.location_ != null ? other.location_.Clone() : null;
              cells_ = other.cells_.Clone();
              id_ = other.id_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TableRow Clone() {
              return new TableRow(this);
            }

            /// <summary>Field number for the "location" field.</summary>
            public const int LocationFieldNumber = 1;
            private global::Io.Cucumber.Messages.Location location_;
            /// <summary>
            /// The location of the first cell in the row
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Io.Cucumber.Messages.Location Location {
              get { return location_; }
              set {
                location_ = value;
              }
            }

            /// <summary>Field number for the "cells" field.</summary>
            public const int CellsFieldNumber = 2;
            private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow.Types.TableCell> _repeated_cells_codec
                = pb::FieldCodec.ForMessage(18, global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow.Types.TableCell.Parser);
            private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow.Types.TableCell> cells_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow.Types.TableCell>();
            /// <summary>
            /// Cells in the row
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow.Types.TableCell> Cells {
              get { return cells_; }
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 3;
            private string id_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Id {
              get { return id_; }
              set {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TableRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TableRow other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Location, other.Location)) return false;
              if(!cells_.Equals(other.cells_)) return false;
              if (Id != other.Id) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (location_ != null) hash ^= Location.GetHashCode();
              hash ^= cells_.GetHashCode();
              if (Id.Length != 0) hash ^= Id.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (location_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Location);
              }
              cells_.WriteTo(output, _repeated_cells_codec);
              if (Id.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Id);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (location_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
              }
              size += cells_.CalculateSize(_repeated_cells_codec);
              if (Id.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TableRow other) {
              if (other == null) {
                return;
              }
              if (other.location_ != null) {
                if (location_ == null) {
                  location_ = new global::Io.Cucumber.Messages.Location();
                }
                Location.MergeFrom(other.Location);
              }
              cells_.Add(other.cells_);
              if (other.Id.Length != 0) {
                Id = other.Id;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (location_ == null) {
                      location_ = new global::Io.Cucumber.Messages.Location();
                    }
                    input.ReadMessage(location_);
                    break;
                  }
                  case 18: {
                    cells_.AddEntriesFrom(input, _repeated_cells_codec);
                    break;
                  }
                  case 26: {
                    Id = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the TableRow message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              /// <summary>
              /// A cell in a `TableRow`
              /// </summary>
              public sealed partial class TableCell : pb::IMessage<TableCell> {
                private static readonly pb::MessageParser<TableCell> _parser = new pb::MessageParser<TableCell>(() => new TableCell());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<TableCell> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public TableCell() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public TableCell(TableCell other) : this() {
                  location_ = other.location_ != null ? other.location_.Clone() : null;
                  value_ = other.value_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public TableCell Clone() {
                  return new TableCell(this);
                }

                /// <summary>Field number for the "location" field.</summary>
                public const int LocationFieldNumber = 1;
                private global::Io.Cucumber.Messages.Location location_;
                /// <summary>
                /// The location of the cell
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Io.Cucumber.Messages.Location Location {
                  get { return location_; }
                  set {
                    location_ = value;
                  }
                }

                /// <summary>Field number for the "value" field.</summary>
                public const int ValueFieldNumber = 2;
                private string value_ = "";
                /// <summary>
                /// The value of the cell
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Value {
                  get { return value_; }
                  set {
                    value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as TableCell);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(TableCell other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!object.Equals(Location, other.Location)) return false;
                  if (Value != other.Value) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (location_ != null) hash ^= Location.GetHashCode();
                  if (Value.Length != 0) hash ^= Value.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (location_ != null) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Location);
                  }
                  if (Value.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(Value);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (location_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
                  }
                  if (Value.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(TableCell other) {
                  if (other == null) {
                    return;
                  }
                  if (other.location_ != null) {
                    if (location_ == null) {
                      location_ = new global::Io.Cucumber.Messages.Location();
                    }
                    Location.MergeFrom(other.Location);
                  }
                  if (other.Value.Length != 0) {
                    Value = other.Value;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        if (location_ == null) {
                          location_ = new global::Io.Cucumber.Messages.Location();
                        }
                        input.ReadMessage(location_);
                        break;
                      }
                      case 18: {
                        Value = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

          /// <summary>
          /// A step
          /// </summary>
          public sealed partial class Step : pb::IMessage<Step> {
            private static readonly pb::MessageParser<Step> _parser = new pb::MessageParser<Step>(() => new Step());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Step> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Step() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Step(Step other) : this() {
              location_ = other.location_ != null ? other.location_.Clone() : null;
              keyword_ = other.keyword_;
              text_ = other.text_;
              id_ = other.id_;
              switch (other.ArgumentCase) {
                case ArgumentOneofCase.DocString:
                  DocString = other.DocString.Clone();
                  break;
                case ArgumentOneofCase.DataTable:
                  DataTable = other.DataTable.Clone();
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Step Clone() {
              return new Step(this);
            }

            /// <summary>Field number for the "location" field.</summary>
            public const int LocationFieldNumber = 1;
            private global::Io.Cucumber.Messages.Location location_;
            /// <summary>
            /// The location of the steps' `keyword`
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Io.Cucumber.Messages.Location Location {
              get { return location_; }
              set {
                location_ = value;
              }
            }

            /// <summary>Field number for the "keyword" field.</summary>
            public const int KeywordFieldNumber = 2;
            private string keyword_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Keyword {
              get { return keyword_; }
              set {
                keyword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "text" field.</summary>
            public const int TextFieldNumber = 3;
            private string text_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Text {
              get { return text_; }
              set {
                text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "doc_string" field.</summary>
            public const int DocStringFieldNumber = 5;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DocString DocString {
              get { return argumentCase_ == ArgumentOneofCase.DocString ? (global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DocString) argument_ : null; }
              set {
                argument_ = value;
                argumentCase_ = value == null ? ArgumentOneofCase.None : ArgumentOneofCase.DocString;
              }
            }

            /// <summary>Field number for the "data_table" field.</summary>
            public const int DataTableFieldNumber = 6;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DataTable DataTable {
              get { return argumentCase_ == ArgumentOneofCase.DataTable ? (global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DataTable) argument_ : null; }
              set {
                argument_ = value;
                argumentCase_ = value == null ? ArgumentOneofCase.None : ArgumentOneofCase.DataTable;
              }
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 7;
            private string id_ = "";
            /// <summary>
            /// Unique ID to be able to reference the Step from PickleStep
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Id {
              get { return id_; }
              set {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            private object argument_;
            /// <summary>Enum of possible cases for the "argument" oneof.</summary>
            public enum ArgumentOneofCase {
              None = 0,
              DocString = 5,
              DataTable = 6,
            }
            private ArgumentOneofCase argumentCase_ = ArgumentOneofCase.None;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ArgumentOneofCase ArgumentCase {
              get { return argumentCase_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearArgument() {
              argumentCase_ = ArgumentOneofCase.None;
              argument_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Step);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Step other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Location, other.Location)) return false;
              if (Keyword != other.Keyword) return false;
              if (Text != other.Text) return false;
              if (!object.Equals(DocString, other.DocString)) return false;
              if (!object.Equals(DataTable, other.DataTable)) return false;
              if (Id != other.Id) return false;
              if (ArgumentCase != other.ArgumentCase) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (location_ != null) hash ^= Location.GetHashCode();
              if (Keyword.Length != 0) hash ^= Keyword.GetHashCode();
              if (Text.Length != 0) hash ^= Text.GetHashCode();
              if (argumentCase_ == ArgumentOneofCase.DocString) hash ^= DocString.GetHashCode();
              if (argumentCase_ == ArgumentOneofCase.DataTable) hash ^= DataTable.GetHashCode();
              if (Id.Length != 0) hash ^= Id.GetHashCode();
              hash ^= (int) argumentCase_;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (location_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Location);
              }
              if (Keyword.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Keyword);
              }
              if (Text.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Text);
              }
              if (argumentCase_ == ArgumentOneofCase.DocString) {
                output.WriteRawTag(42);
                output.WriteMessage(DocString);
              }
              if (argumentCase_ == ArgumentOneofCase.DataTable) {
                output.WriteRawTag(50);
                output.WriteMessage(DataTable);
              }
              if (Id.Length != 0) {
                output.WriteRawTag(58);
                output.WriteString(Id);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (location_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
              }
              if (Keyword.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Keyword);
              }
              if (Text.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
              }
              if (argumentCase_ == ArgumentOneofCase.DocString) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DocString);
              }
              if (argumentCase_ == ArgumentOneofCase.DataTable) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataTable);
              }
              if (Id.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Step other) {
              if (other == null) {
                return;
              }
              if (other.location_ != null) {
                if (location_ == null) {
                  location_ = new global::Io.Cucumber.Messages.Location();
                }
                Location.MergeFrom(other.Location);
              }
              if (other.Keyword.Length != 0) {
                Keyword = other.Keyword;
              }
              if (other.Text.Length != 0) {
                Text = other.Text;
              }
              if (other.Id.Length != 0) {
                Id = other.Id;
              }
              switch (other.ArgumentCase) {
                case ArgumentOneofCase.DocString:
                  if (DocString == null) {
                    DocString = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DocString();
                  }
                  DocString.MergeFrom(other.DocString);
                  break;
                case ArgumentOneofCase.DataTable:
                  if (DataTable == null) {
                    DataTable = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DataTable();
                  }
                  DataTable.MergeFrom(other.DataTable);
                  break;
              }

              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (location_ == null) {
                      location_ = new global::Io.Cucumber.Messages.Location();
                    }
                    input.ReadMessage(location_);
                    break;
                  }
                  case 18: {
                    Keyword = input.ReadString();
                    break;
                  }
                  case 26: {
                    Text = input.ReadString();
                    break;
                  }
                  case 42: {
                    global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DocString subBuilder = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DocString();
                    if (argumentCase_ == ArgumentOneofCase.DocString) {
                      subBuilder.MergeFrom(DocString);
                    }
                    input.ReadMessage(subBuilder);
                    DocString = subBuilder;
                    break;
                  }
                  case 50: {
                    global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DataTable subBuilder = new global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Types.DataTable();
                    if (argumentCase_ == ArgumentOneofCase.DataTable) {
                      subBuilder.MergeFrom(DataTable);
                    }
                    input.ReadMessage(subBuilder);
                    DataTable = subBuilder;
                    break;
                  }
                  case 58: {
                    Id = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Step message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class DataTable : pb::IMessage<DataTable> {
                private static readonly pb::MessageParser<DataTable> _parser = new pb::MessageParser<DataTable>(() => new DataTable());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<DataTable> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DataTable() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DataTable(DataTable other) : this() {
                  location_ = other.location_ != null ? other.location_.Clone() : null;
                  rows_ = other.rows_.Clone();
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DataTable Clone() {
                  return new DataTable(this);
                }

                /// <summary>Field number for the "location" field.</summary>
                public const int LocationFieldNumber = 1;
                private global::Io.Cucumber.Messages.Location location_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Io.Cucumber.Messages.Location Location {
                  get { return location_; }
                  set {
                    location_ = value;
                  }
                }

                /// <summary>Field number for the "rows" field.</summary>
                public const int RowsFieldNumber = 2;
                private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow> _repeated_rows_codec
                    = pb::FieldCodec.ForMessage(18, global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow.Parser);
                private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow> rows_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.TableRow> Rows {
                  get { return rows_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as DataTable);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(DataTable other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!object.Equals(Location, other.Location)) return false;
                  if(!rows_.Equals(other.rows_)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (location_ != null) hash ^= Location.GetHashCode();
                  hash ^= rows_.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (location_ != null) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Location);
                  }
                  rows_.WriteTo(output, _repeated_rows_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (location_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
                  }
                  size += rows_.CalculateSize(_repeated_rows_codec);
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(DataTable other) {
                  if (other == null) {
                    return;
                  }
                  if (other.location_ != null) {
                    if (location_ == null) {
                      location_ = new global::Io.Cucumber.Messages.Location();
                    }
                    Location.MergeFrom(other.Location);
                  }
                  rows_.Add(other.rows_);
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        if (location_ == null) {
                          location_ = new global::Io.Cucumber.Messages.Location();
                        }
                        input.ReadMessage(location_);
                        break;
                      }
                      case 18: {
                        rows_.AddEntriesFrom(input, _repeated_rows_codec);
                        break;
                      }
                    }
                  }
                }

              }

              public sealed partial class DocString : pb::IMessage<DocString> {
                private static readonly pb::MessageParser<DocString> _parser = new pb::MessageParser<DocString>(() => new DocString());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<DocString> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Io.Cucumber.Messages.GherkinDocument.Types.Feature.Types.Step.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DocString() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DocString(DocString other) : this() {
                  location_ = other.location_ != null ? other.location_.Clone() : null;
                  mediaType_ = other.mediaType_;
                  content_ = other.content_;
                  delimiter_ = other.delimiter_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DocString Clone() {
                  return new DocString(this);
                }

                /// <summary>Field number for the "location" field.</summary>
                public const int LocationFieldNumber = 1;
                private global::Io.Cucumber.Messages.Location location_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Io.Cucumber.Messages.Location Location {
                  get { return location_; }
                  set {
                    location_ = value;
                  }
                }

                /// <summary>Field number for the "media_type" field.</summary>
                public const int MediaTypeFieldNumber = 2;
                private string mediaType_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string MediaType {
                  get { return mediaType_; }
                  set {
                    mediaType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "content" field.</summary>
                public const int ContentFieldNumber = 3;
                private string content_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Content {
                  get { return content_; }
                  set {
                    content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "delimiter" field.</summary>
                public const int DelimiterFieldNumber = 4;
                private string delimiter_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Delimiter {
                  get { return delimiter_; }
                  set {
                    delimiter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as DocString);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(DocString other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (!object.Equals(Location, other.Location)) return false;
                  if (MediaType != other.MediaType) return false;
                  if (Content != other.Content) return false;
                  if (Delimiter != other.Delimiter) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (location_ != null) hash ^= Location.GetHashCode();
                  if (MediaType.Length != 0) hash ^= MediaType.GetHashCode();
                  if (Content.Length != 0) hash ^= Content.GetHashCode();
                  if (Delimiter.Length != 0) hash ^= Delimiter.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (location_ != null) {
                    output.WriteRawTag(10);
                    output.WriteMessage(Location);
                  }
                  if (MediaType.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(MediaType);
                  }
                  if (Content.Length != 0) {
                    output.WriteRawTag(26);
                    output.WriteString(Content);
                  }
                  if (Delimiter.Length != 0) {
                    output.WriteRawTag(34);
                    output.WriteString(Delimiter);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (location_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
                  }
                  if (MediaType.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(MediaType);
                  }
                  if (Content.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
                  }
                  if (Delimiter.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Delimiter);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(DocString other) {
                  if (other == null) {
                    return;
                  }
                  if (other.location_ != null) {
                    if (location_ == null) {
                      location_ = new global::Io.Cucumber.Messages.Location();
                    }
                    Location.MergeFrom(other.Location);
                  }
                  if (other.MediaType.Length != 0) {
                    MediaType = other.MediaType;
                  }
                  if (other.Content.Length != 0) {
                    Content = other.Content;
                  }
                  if (other.Delimiter.Length != 0) {
                    Delimiter = other.Delimiter;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        if (location_ == null) {
                          location_ = new global::Io.Cucumber.Messages.Location();
                        }
                        input.ReadMessage(location_);
                        break;
                      }
                      case 18: {
                        MediaType = input.ReadString();
                        break;
                      }
                      case 26: {
                        Content = input.ReadString();
                        break;
                      }
                      case 34: {
                        Delimiter = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// An attachment represents any kind of data associated with a line in a
  /// [Source](#io.cucumber.messages.Source) file. It can be used for:
  ///
  /// * Syntax errors during parse time
  /// * Screenshots captured and attached during execution
  /// * Logs captured and attached during execution
  ///
  /// It is not to be used for runtime errors raised/thrown during execution. This
  /// is captured in `TestResult`.
  /// </summary>
  public sealed partial class Attachment : pb::IMessage<Attachment> {
    private static readonly pb::MessageParser<Attachment> _parser = new pb::MessageParser<Attachment>(() => new Attachment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Attachment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attachment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attachment(Attachment other) : this() {
      source_ = other.source_ != null ? other.source_.Clone() : null;
      testStepId_ = other.testStepId_;
      testCaseStartedId_ = other.testCaseStartedId_;
      mediaType_ = other.mediaType_;
      switch (other.BodyCase) {
        case BodyOneofCase.Text:
          Text = other.Text;
          break;
        case BodyOneofCase.Binary:
          Binary = other.Binary;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attachment Clone() {
      return new Attachment(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::Io.Cucumber.Messages.SourceReference source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.SourceReference Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "test_step_id" field.</summary>
    public const int TestStepIdFieldNumber = 4;
    private string testStepId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestStepId {
      get { return testStepId_; }
      set {
        testStepId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "test_case_started_id" field.</summary>
    public const int TestCaseStartedIdFieldNumber = 5;
    private string testCaseStartedId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestCaseStartedId {
      get { return testCaseStartedId_; }
      set {
        testCaseStartedId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 6;
    /// <summary>
    /// For text/* media types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return bodyCase_ == BodyOneofCase.Text ? (string) body_ : ""; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        bodyCase_ = BodyOneofCase.Text;
      }
    }

    /// <summary>Field number for the "binary" field.</summary>
    public const int BinaryFieldNumber = 7;
    /// <summary>
    /// For all non-text/ media types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Binary {
      get { return bodyCase_ == BodyOneofCase.Binary ? (pb::ByteString) body_ : pb::ByteString.Empty; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        bodyCase_ = BodyOneofCase.Binary;
      }
    }

    /// <summary>Field number for the "media_type" field.</summary>
    public const int MediaTypeFieldNumber = 8;
    private string mediaType_ = "";
    /// <summary>
    ///*
    /// The media type of the data. This can be any valid
    /// [IANA Media Type](https://www.iana.org/assignments/media-types/media-types.xhtml)
    /// as well as Cucumber-specific media types such as `text/x.cucumber.gherkin+plain`
    /// and `text/x.cucumber.stacktrace+plain`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MediaType {
      get { return mediaType_; }
      set {
        mediaType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object body_;
    /// <summary>Enum of possible cases for the "body" oneof.</summary>
    public enum BodyOneofCase {
      None = 0,
      Text = 6,
      Binary = 7,
    }
    private BodyOneofCase bodyCase_ = BodyOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BodyOneofCase BodyCase {
      get { return bodyCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBody() {
      bodyCase_ = BodyOneofCase.None;
      body_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Attachment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Attachment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (TestStepId != other.TestStepId) return false;
      if (TestCaseStartedId != other.TestCaseStartedId) return false;
      if (Text != other.Text) return false;
      if (Binary != other.Binary) return false;
      if (MediaType != other.MediaType) return false;
      if (BodyCase != other.BodyCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (TestStepId.Length != 0) hash ^= TestStepId.GetHashCode();
      if (TestCaseStartedId.Length != 0) hash ^= TestCaseStartedId.GetHashCode();
      if (bodyCase_ == BodyOneofCase.Text) hash ^= Text.GetHashCode();
      if (bodyCase_ == BodyOneofCase.Binary) hash ^= Binary.GetHashCode();
      if (MediaType.Length != 0) hash ^= MediaType.GetHashCode();
      hash ^= (int) bodyCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (TestStepId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TestStepId);
      }
      if (TestCaseStartedId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TestCaseStartedId);
      }
      if (bodyCase_ == BodyOneofCase.Text) {
        output.WriteRawTag(50);
        output.WriteString(Text);
      }
      if (bodyCase_ == BodyOneofCase.Binary) {
        output.WriteRawTag(58);
        output.WriteBytes(Binary);
      }
      if (MediaType.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MediaType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (TestStepId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestStepId);
      }
      if (TestCaseStartedId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestCaseStartedId);
      }
      if (bodyCase_ == BodyOneofCase.Text) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (bodyCase_ == BodyOneofCase.Binary) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Binary);
      }
      if (MediaType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MediaType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Attachment other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::Io.Cucumber.Messages.SourceReference();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.TestStepId.Length != 0) {
        TestStepId = other.TestStepId;
      }
      if (other.TestCaseStartedId.Length != 0) {
        TestCaseStartedId = other.TestCaseStartedId;
      }
      if (other.MediaType.Length != 0) {
        MediaType = other.MediaType;
      }
      switch (other.BodyCase) {
        case BodyOneofCase.Text:
          Text = other.Text;
          break;
        case BodyOneofCase.Binary:
          Binary = other.Binary;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::Io.Cucumber.Messages.SourceReference();
            }
            input.ReadMessage(source_);
            break;
          }
          case 34: {
            TestStepId = input.ReadString();
            break;
          }
          case 42: {
            TestCaseStartedId = input.ReadString();
            break;
          }
          case 50: {
            Text = input.ReadString();
            break;
          }
          case 58: {
            Binary = input.ReadBytes();
            break;
          }
          case 66: {
            MediaType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A `Pickle` represents a template for a `TestCase`. It is typically derived
  /// from another format, such as [GherkinDocument](#io.cucumber.messages.GherkinDocument).
  /// In the future a `Pickle` may be derived from other formats such as Markdown or
  /// Excel files.
  ///
  /// By making `Pickle` the main data structure Cucumber uses for execution, the
  /// implementation of Cucumber itself becomes simpler, as it doesn't have to deal
  /// with the complex structure of a [GherkinDocument](#io.cucumber.messages.GherkinDocument).
  ///
  /// Each `PickleStep` of a `Pickle` is matched with a `StepDefinition` to create a `TestCase`
  /// </summary>
  public sealed partial class Pickle : pb::IMessage<Pickle> {
    private static readonly pb::MessageParser<Pickle> _parser = new pb::MessageParser<Pickle>(() => new Pickle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pickle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pickle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pickle(Pickle other) : this() {
      id_ = other.id_;
      uri_ = other.uri_;
      name_ = other.name_;
      language_ = other.language_;
      steps_ = other.steps_.Clone();
      tags_ = other.tags_.Clone();
      astNodeIds_ = other.astNodeIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pickle Clone() {
      return new Pickle(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///*
    /// A unique id for the pickle. This is a [SHA1](https://en.wikipedia.org/wiki/SHA-1) hash
    /// from the source data and the `locations` of the pickle.
    /// This ID will change if source the file is modified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 2;
    private string uri_ = "";
    /// <summary>
    /// The uri of the source file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// The name of the pickle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 4;
    private string language_ = "";
    /// <summary>
    /// The language of the pickle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steps" field.</summary>
    public const int StepsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.Pickle.Types.PickleStep> _repeated_steps_codec
        = pb::FieldCodec.ForMessage(42, global::Io.Cucumber.Messages.Pickle.Types.PickleStep.Parser);
    private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.Pickle.Types.PickleStep> steps_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.Pickle.Types.PickleStep>();
    /// <summary>
    /// One or more steps
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Io.Cucumber.Messages.Pickle.Types.PickleStep> Steps {
      get { return steps_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.Pickle.Types.PickleTag> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(50, global::Io.Cucumber.Messages.Pickle.Types.PickleTag.Parser);
    private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.Pickle.Types.PickleTag> tags_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.Pickle.Types.PickleTag>();
    /// <summary>
    ///*
    /// One or more tags. If this pickle is constructed from a Gherkin document,
    /// It includes inherited tags from the `Feature` as well.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Io.Cucumber.Messages.Pickle.Types.PickleTag> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "ast_node_ids" field.</summary>
    public const int AstNodeIdsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_astNodeIds_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> astNodeIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///*
    /// Points to the AST node locations of the pickle. The last one represents the unique
    /// id of the pickle. A pickle constructed from `Examples` will have the first
    /// id originating from the `Scenario` AST node, and the second from the `TableRow` AST node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AstNodeIds {
      get { return astNodeIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pickle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pickle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Uri != other.Uri) return false;
      if (Name != other.Name) return false;
      if (Language != other.Language) return false;
      if(!steps_.Equals(other.steps_)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if(!astNodeIds_.Equals(other.astNodeIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      hash ^= steps_.GetHashCode();
      hash ^= tags_.GetHashCode();
      hash ^= astNodeIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uri);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Language);
      }
      steps_.WriteTo(output, _repeated_steps_codec);
      tags_.WriteTo(output, _repeated_tags_codec);
      astNodeIds_.WriteTo(output, _repeated_astNodeIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      size += steps_.CalculateSize(_repeated_steps_codec);
      size += tags_.CalculateSize(_repeated_tags_codec);
      size += astNodeIds_.CalculateSize(_repeated_astNodeIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pickle other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      steps_.Add(other.steps_);
      tags_.Add(other.tags_);
      astNodeIds_.Add(other.astNodeIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Uri = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Language = input.ReadString();
            break;
          }
          case 42: {
            steps_.AddEntriesFrom(input, _repeated_steps_codec);
            break;
          }
          case 50: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 58: {
            astNodeIds_.AddEntriesFrom(input, _repeated_astNodeIds_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Pickle message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///*
      /// A tag
      /// </summary>
      public sealed partial class PickleTag : pb::IMessage<PickleTag> {
        private static readonly pb::MessageParser<PickleTag> _parser = new pb::MessageParser<PickleTag>(() => new PickleTag());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PickleTag> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Io.Cucumber.Messages.Pickle.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickleTag() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickleTag(PickleTag other) : this() {
          name_ = other.name_;
          astNodeId_ = other.astNodeId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickleTag Clone() {
          return new PickleTag(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ast_node_id" field.</summary>
        public const int AstNodeIdFieldNumber = 2;
        private string astNodeId_ = "";
        /// <summary>
        /// Points to the AST node this was created from
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AstNodeId {
          get { return astNodeId_; }
          set {
            astNodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PickleTag);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PickleTag other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (AstNodeId != other.AstNodeId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (AstNodeId.Length != 0) hash ^= AstNodeId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (AstNodeId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(AstNodeId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (AstNodeId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AstNodeId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PickleTag other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.AstNodeId.Length != 0) {
            AstNodeId = other.AstNodeId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                AstNodeId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///*
      /// An executable step
      /// </summary>
      public sealed partial class PickleStep : pb::IMessage<PickleStep> {
        private static readonly pb::MessageParser<PickleStep> _parser = new pb::MessageParser<PickleStep>(() => new PickleStep());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PickleStep> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Io.Cucumber.Messages.Pickle.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickleStep() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickleStep(PickleStep other) : this() {
          text_ = other.text_;
          argument_ = other.argument_ != null ? other.argument_.Clone() : null;
          id_ = other.id_;
          astNodeIds_ = other.astNodeIds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickleStep Clone() {
          return new PickleStep(this);
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int TextFieldNumber = 1;
        private string text_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text {
          get { return text_; }
          set {
            text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "argument" field.</summary>
        public const int ArgumentFieldNumber = 2;
        private global::Io.Cucumber.Messages.PickleStepArgument argument_;
        /// <summary>
        /// An optional argument
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Io.Cucumber.Messages.PickleStepArgument Argument {
          get { return argument_; }
          set {
            argument_ = value;
          }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 3;
        private string id_ = "";
        /// <summary>
        /// A unique ID for the PickleStep
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ast_node_ids" field.</summary>
        public const int AstNodeIdsFieldNumber = 4;
        private static readonly pb::FieldCodec<string> _repeated_astNodeIds_codec
            = pb::FieldCodec.ForString(34);
        private readonly pbc::RepeatedField<string> astNodeIds_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// References the IDs of the source of the step. For Gherkin, this can be
        /// the ID of a Step, and possibly also the ID of a TableRow
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> AstNodeIds {
          get { return astNodeIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PickleStep);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PickleStep other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Text != other.Text) return false;
          if (!object.Equals(Argument, other.Argument)) return false;
          if (Id != other.Id) return false;
          if(!astNodeIds_.Equals(other.astNodeIds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Text.Length != 0) hash ^= Text.GetHashCode();
          if (argument_ != null) hash ^= Argument.GetHashCode();
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          hash ^= astNodeIds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Text.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Text);
          }
          if (argument_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Argument);
          }
          if (Id.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Id);
          }
          astNodeIds_.WriteTo(output, _repeated_astNodeIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Text.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
          }
          if (argument_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Argument);
          }
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          size += astNodeIds_.CalculateSize(_repeated_astNodeIds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PickleStep other) {
          if (other == null) {
            return;
          }
          if (other.Text.Length != 0) {
            Text = other.Text;
          }
          if (other.argument_ != null) {
            if (argument_ == null) {
              argument_ = new global::Io.Cucumber.Messages.PickleStepArgument();
            }
            Argument.MergeFrom(other.Argument);
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          astNodeIds_.Add(other.astNodeIds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Text = input.ReadString();
                break;
              }
              case 18: {
                if (argument_ == null) {
                  argument_ = new global::Io.Cucumber.Messages.PickleStepArgument();
                }
                input.ReadMessage(argument_);
                break;
              }
              case 26: {
                Id = input.ReadString();
                break;
              }
              case 34: {
                astNodeIds_.AddEntriesFrom(input, _repeated_astNodeIds_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// A wrapper for either a doc string or a table.
  /// </summary>
  public sealed partial class PickleStepArgument : pb::IMessage<PickleStepArgument> {
    private static readonly pb::MessageParser<PickleStepArgument> _parser = new pb::MessageParser<PickleStepArgument>(() => new PickleStepArgument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickleStepArgument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickleStepArgument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickleStepArgument(PickleStepArgument other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.DocString:
          DocString = other.DocString.Clone();
          break;
        case MessageOneofCase.DataTable:
          DataTable = other.DataTable.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickleStepArgument Clone() {
      return new PickleStepArgument(this);
    }

    /// <summary>Field number for the "doc_string" field.</summary>
    public const int DocStringFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleDocString DocString {
      get { return messageCase_ == MessageOneofCase.DocString ? (global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleDocString) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DocString;
      }
    }

    /// <summary>Field number for the "data_table" field.</summary>
    public const int DataTableFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable DataTable {
      get { return messageCase_ == MessageOneofCase.DataTable ? (global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DataTable;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      DocString = 1,
      DataTable = 2,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickleStepArgument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickleStepArgument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DocString, other.DocString)) return false;
      if (!object.Equals(DataTable, other.DataTable)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.DocString) hash ^= DocString.GetHashCode();
      if (messageCase_ == MessageOneofCase.DataTable) hash ^= DataTable.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.DocString) {
        output.WriteRawTag(10);
        output.WriteMessage(DocString);
      }
      if (messageCase_ == MessageOneofCase.DataTable) {
        output.WriteRawTag(18);
        output.WriteMessage(DataTable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.DocString) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DocString);
      }
      if (messageCase_ == MessageOneofCase.DataTable) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataTable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickleStepArgument other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.DocString:
          if (DocString == null) {
            DocString = new global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleDocString();
          }
          DocString.MergeFrom(other.DocString);
          break;
        case MessageOneofCase.DataTable:
          if (DataTable == null) {
            DataTable = new global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable();
          }
          DataTable.MergeFrom(other.DataTable);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleDocString subBuilder = new global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleDocString();
            if (messageCase_ == MessageOneofCase.DocString) {
              subBuilder.MergeFrom(DocString);
            }
            input.ReadMessage(subBuilder);
            DocString = subBuilder;
            break;
          }
          case 18: {
            global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable subBuilder = new global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable();
            if (messageCase_ == MessageOneofCase.DataTable) {
              subBuilder.MergeFrom(DataTable);
            }
            input.ReadMessage(subBuilder);
            DataTable = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PickleStepArgument message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PickleDocString : pb::IMessage<PickleDocString> {
        private static readonly pb::MessageParser<PickleDocString> _parser = new pb::MessageParser<PickleDocString>(() => new PickleDocString());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PickleDocString> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Io.Cucumber.Messages.PickleStepArgument.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickleDocString() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickleDocString(PickleDocString other) : this() {
          mediaType_ = other.mediaType_;
          content_ = other.content_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickleDocString Clone() {
          return new PickleDocString(this);
        }

        /// <summary>Field number for the "media_type" field.</summary>
        public const int MediaTypeFieldNumber = 1;
        private string mediaType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MediaType {
          get { return mediaType_; }
          set {
            mediaType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "content" field.</summary>
        public const int ContentFieldNumber = 2;
        private string content_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Content {
          get { return content_; }
          set {
            content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PickleDocString);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PickleDocString other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MediaType != other.MediaType) return false;
          if (Content != other.Content) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MediaType.Length != 0) hash ^= MediaType.GetHashCode();
          if (Content.Length != 0) hash ^= Content.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MediaType.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(MediaType);
          }
          if (Content.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Content);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MediaType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MediaType);
          }
          if (Content.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PickleDocString other) {
          if (other == null) {
            return;
          }
          if (other.MediaType.Length != 0) {
            MediaType = other.MediaType;
          }
          if (other.Content.Length != 0) {
            Content = other.Content;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                MediaType = input.ReadString();
                break;
              }
              case 18: {
                Content = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PickleTable : pb::IMessage<PickleTable> {
        private static readonly pb::MessageParser<PickleTable> _parser = new pb::MessageParser<PickleTable>(() => new PickleTable());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PickleTable> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Io.Cucumber.Messages.PickleStepArgument.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickleTable() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickleTable(PickleTable other) : this() {
          rows_ = other.rows_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PickleTable Clone() {
          return new PickleTable(this);
        }

        /// <summary>Field number for the "rows" field.</summary>
        public const int RowsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow> _repeated_rows_codec
            = pb::FieldCodec.ForMessage(10, global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow.Parser);
        private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow> rows_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow> Rows {
          get { return rows_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PickleTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PickleTable other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!rows_.Equals(other.rows_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= rows_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          rows_.WriteTo(output, _repeated_rows_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += rows_.CalculateSize(_repeated_rows_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PickleTable other) {
          if (other == null) {
            return;
          }
          rows_.Add(other.rows_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                rows_.AddEntriesFrom(input, _repeated_rows_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the PickleTable message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class PickleTableRow : pb::IMessage<PickleTableRow> {
            private static readonly pb::MessageParser<PickleTableRow> _parser = new pb::MessageParser<PickleTableRow>(() => new PickleTableRow());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PickleTableRow> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PickleTableRow() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PickleTableRow(PickleTableRow other) : this() {
              cells_ = other.cells_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PickleTableRow Clone() {
              return new PickleTableRow(this);
            }

            /// <summary>Field number for the "cells" field.</summary>
            public const int CellsFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow.Types.PickleTableCell> _repeated_cells_codec
                = pb::FieldCodec.ForMessage(10, global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow.Types.PickleTableCell.Parser);
            private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow.Types.PickleTableCell> cells_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow.Types.PickleTableCell>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow.Types.PickleTableCell> Cells {
              get { return cells_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PickleTableRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PickleTableRow other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!cells_.Equals(other.cells_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= cells_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              cells_.WriteTo(output, _repeated_cells_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += cells_.CalculateSize(_repeated_cells_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PickleTableRow other) {
              if (other == null) {
                return;
              }
              cells_.Add(other.cells_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    cells_.AddEntriesFrom(input, _repeated_cells_codec);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the PickleTableRow message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class PickleTableCell : pb::IMessage<PickleTableCell> {
                private static readonly pb::MessageParser<PickleTableCell> _parser = new pb::MessageParser<PickleTableCell>(() => new PickleTableCell());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<PickleTableCell> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Io.Cucumber.Messages.PickleStepArgument.Types.PickleTable.Types.PickleTableRow.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PickleTableCell() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PickleTableCell(PickleTableCell other) : this() {
                  value_ = other.value_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PickleTableCell Clone() {
                  return new PickleTableCell(this);
                }

                /// <summary>Field number for the "value" field.</summary>
                public const int ValueFieldNumber = 1;
                private string value_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Value {
                  get { return value_; }
                  set {
                    value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as PickleTableCell);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(PickleTableCell other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Value != other.Value) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Value.Length != 0) hash ^= Value.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Value.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Value);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Value.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(PickleTableCell other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Value.Length != 0) {
                    Value = other.Value;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        Value = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// A `TestCase` contains a sequence of `TestStep`s.
  /// </summary>
  public sealed partial class TestCase : pb::IMessage<TestCase> {
    private static readonly pb::MessageParser<TestCase> _parser = new pb::MessageParser<TestCase>(() => new TestCase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestCase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCase(TestCase other) : this() {
      id_ = other.id_;
      pickleId_ = other.pickleId_;
      testSteps_ = other.testSteps_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCase Clone() {
      return new TestCase(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pickle_id" field.</summary>
    public const int PickleIdFieldNumber = 2;
    private string pickleId_ = "";
    /// <summary>
    /// The ID of the `Pickle` this `TestCase` is derived from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PickleId {
      get { return pickleId_; }
      set {
        pickleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "test_steps" field.</summary>
    public const int TestStepsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.TestCase.Types.TestStep> _repeated_testSteps_codec
        = pb::FieldCodec.ForMessage(26, global::Io.Cucumber.Messages.TestCase.Types.TestStep.Parser);
    private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.TestCase.Types.TestStep> testSteps_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.TestCase.Types.TestStep>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Io.Cucumber.Messages.TestCase.Types.TestStep> TestSteps {
      get { return testSteps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestCase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestCase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PickleId != other.PickleId) return false;
      if(!testSteps_.Equals(other.testSteps_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (PickleId.Length != 0) hash ^= PickleId.GetHashCode();
      hash ^= testSteps_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (PickleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PickleId);
      }
      testSteps_.WriteTo(output, _repeated_testSteps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (PickleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PickleId);
      }
      size += testSteps_.CalculateSize(_repeated_testSteps_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestCase other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.PickleId.Length != 0) {
        PickleId = other.PickleId;
      }
      testSteps_.Add(other.testSteps_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            PickleId = input.ReadString();
            break;
          }
          case 26: {
            testSteps_.AddEntriesFrom(input, _repeated_testSteps_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TestCase message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///*
      /// A `TestStep` is derived from either a `PickleStep`
      /// combined with a `StepDefinition`, or from a `Hook`.
      /// </summary>
      public sealed partial class TestStep : pb::IMessage<TestStep> {
        private static readonly pb::MessageParser<TestStep> _parser = new pb::MessageParser<TestStep>(() => new TestStep());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TestStep> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Io.Cucumber.Messages.TestCase.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestStep() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestStep(TestStep other) : this() {
          id_ = other.id_;
          pickleStepId_ = other.pickleStepId_;
          stepDefinitionIds_ = other.stepDefinitionIds_.Clone();
          stepMatchArguments_ = other.stepMatchArguments_.Clone();
          hookId_ = other.hookId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TestStep Clone() {
          return new TestStep(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "pickle_step_id" field.</summary>
        public const int PickleStepIdFieldNumber = 2;
        private string pickleStepId_ = "";
        /// <summary>
        /// Pointer to the `PickleStep` (if derived from a PickleStep)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PickleStepId {
          get { return pickleStepId_; }
          set {
            pickleStepId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "step_definition_ids" field.</summary>
        public const int StepDefinitionIdsFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_stepDefinitionIds_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> stepDefinitionIds_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// Pointer to all the matching `StepDefinition`s (if derived from a PickleStep)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> StepDefinitionIds {
          get { return stepDefinitionIds_; }
        }

        /// <summary>Field number for the "step_match_arguments" field.</summary>
        public const int StepMatchArgumentsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.StepMatchArgument> _repeated_stepMatchArguments_codec
            = pb::FieldCodec.ForMessage(34, global::Io.Cucumber.Messages.StepMatchArgument.Parser);
        private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.StepMatchArgument> stepMatchArguments_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.StepMatchArgument>();
        /// <summary>
        /// All the arguments from the match (if derived from a PickleStep and there was exactly 1 StepDefinition)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Io.Cucumber.Messages.StepMatchArgument> StepMatchArguments {
          get { return stepMatchArguments_; }
        }

        /// <summary>Field number for the "hookId" field.</summary>
        public const int HookIdFieldNumber = 5;
        private string hookId_ = "";
        /// <summary>
        /// Pointer to the Hook (if derived from a Hook)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string HookId {
          get { return hookId_; }
          set {
            hookId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TestStep);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TestStep other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (PickleStepId != other.PickleStepId) return false;
          if(!stepDefinitionIds_.Equals(other.stepDefinitionIds_)) return false;
          if(!stepMatchArguments_.Equals(other.stepMatchArguments_)) return false;
          if (HookId != other.HookId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (PickleStepId.Length != 0) hash ^= PickleStepId.GetHashCode();
          hash ^= stepDefinitionIds_.GetHashCode();
          hash ^= stepMatchArguments_.GetHashCode();
          if (HookId.Length != 0) hash ^= HookId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (PickleStepId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(PickleStepId);
          }
          stepDefinitionIds_.WriteTo(output, _repeated_stepDefinitionIds_codec);
          stepMatchArguments_.WriteTo(output, _repeated_stepMatchArguments_codec);
          if (HookId.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(HookId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (PickleStepId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PickleStepId);
          }
          size += stepDefinitionIds_.CalculateSize(_repeated_stepDefinitionIds_codec);
          size += stepMatchArguments_.CalculateSize(_repeated_stepMatchArguments_codec);
          if (HookId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(HookId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TestStep other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.PickleStepId.Length != 0) {
            PickleStepId = other.PickleStepId;
          }
          stepDefinitionIds_.Add(other.stepDefinitionIds_);
          stepMatchArguments_.Add(other.stepMatchArguments_);
          if (other.HookId.Length != 0) {
            HookId = other.HookId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                PickleStepId = input.ReadString();
                break;
              }
              case 26: {
                stepDefinitionIds_.AddEntriesFrom(input, _repeated_stepDefinitionIds_codec);
                break;
              }
              case 34: {
                stepMatchArguments_.AddEntriesFrom(input, _repeated_stepMatchArguments_codec);
                break;
              }
              case 42: {
                HookId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class PickleAccepted : pb::IMessage<PickleAccepted> {
    private static readonly pb::MessageParser<PickleAccepted> _parser = new pb::MessageParser<PickleAccepted>(() => new PickleAccepted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickleAccepted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickleAccepted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickleAccepted(PickleAccepted other) : this() {
      pickleId_ = other.pickleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickleAccepted Clone() {
      return new PickleAccepted(this);
    }

    /// <summary>Field number for the "pickle_id" field.</summary>
    public const int PickleIdFieldNumber = 1;
    private string pickleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PickleId {
      get { return pickleId_; }
      set {
        pickleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickleAccepted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickleAccepted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PickleId != other.PickleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PickleId.Length != 0) hash ^= PickleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PickleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PickleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PickleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PickleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickleAccepted other) {
      if (other == null) {
        return;
      }
      if (other.PickleId.Length != 0) {
        PickleId = other.PickleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PickleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PickleRejected : pb::IMessage<PickleRejected> {
    private static readonly pb::MessageParser<PickleRejected> _parser = new pb::MessageParser<PickleRejected>(() => new PickleRejected());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickleRejected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickleRejected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickleRejected(PickleRejected other) : this() {
      pickleId_ = other.pickleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickleRejected Clone() {
      return new PickleRejected(this);
    }

    /// <summary>Field number for the "pickle_id" field.</summary>
    public const int PickleIdFieldNumber = 2;
    private string pickleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PickleId {
      get { return pickleId_; }
      set {
        pickleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickleRejected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickleRejected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PickleId != other.PickleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PickleId.Length != 0) hash ^= PickleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PickleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PickleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PickleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PickleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickleRejected other) {
      if (other == null) {
        return;
      }
      if (other.PickleId.Length != 0) {
        PickleId = other.PickleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            PickleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestRunStarted : pb::IMessage<TestRunStarted> {
    private static readonly pb::MessageParser<TestRunStarted> _parser = new pb::MessageParser<TestRunStarted>(() => new TestRunStarted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestRunStarted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRunStarted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRunStarted(TestRunStarted other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRunStarted Clone() {
      return new TestRunStarted(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Io.Cucumber.Messages.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestRunStarted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestRunStarted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestRunStarted other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Io.Cucumber.Messages.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              timestamp_ = new global::Io.Cucumber.Messages.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DEPRECATED. Use TestCase.TestStep
  /// </summary>
  public sealed partial class TestCasePreparedStep : pb::IMessage<TestCasePreparedStep> {
    private static readonly pb::MessageParser<TestCasePreparedStep> _parser = new pb::MessageParser<TestCasePreparedStep>(() => new TestCasePreparedStep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestCasePreparedStep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCasePreparedStep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCasePreparedStep(TestCasePreparedStep other) : this() {
      sourceLocation_ = other.sourceLocation_ != null ? other.sourceLocation_.Clone() : null;
      actionLocation_ = other.actionLocation_ != null ? other.actionLocation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCasePreparedStep Clone() {
      return new TestCasePreparedStep(this);
    }

    /// <summary>Field number for the "source_location" field.</summary>
    public const int SourceLocationFieldNumber = 1;
    private global::Io.Cucumber.Messages.SourceReference sourceLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.SourceReference SourceLocation {
      get { return sourceLocation_; }
      set {
        sourceLocation_ = value;
      }
    }

    /// <summary>Field number for the "action_location" field.</summary>
    public const int ActionLocationFieldNumber = 2;
    private global::Io.Cucumber.Messages.SourceReference actionLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.SourceReference ActionLocation {
      get { return actionLocation_; }
      set {
        actionLocation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestCasePreparedStep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestCasePreparedStep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SourceLocation, other.SourceLocation)) return false;
      if (!object.Equals(ActionLocation, other.ActionLocation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sourceLocation_ != null) hash ^= SourceLocation.GetHashCode();
      if (actionLocation_ != null) hash ^= ActionLocation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sourceLocation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SourceLocation);
      }
      if (actionLocation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ActionLocation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sourceLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceLocation);
      }
      if (actionLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionLocation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestCasePreparedStep other) {
      if (other == null) {
        return;
      }
      if (other.sourceLocation_ != null) {
        if (sourceLocation_ == null) {
          sourceLocation_ = new global::Io.Cucumber.Messages.SourceReference();
        }
        SourceLocation.MergeFrom(other.SourceLocation);
      }
      if (other.actionLocation_ != null) {
        if (actionLocation_ == null) {
          actionLocation_ = new global::Io.Cucumber.Messages.SourceReference();
        }
        ActionLocation.MergeFrom(other.ActionLocation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sourceLocation_ == null) {
              sourceLocation_ = new global::Io.Cucumber.Messages.SourceReference();
            }
            input.ReadMessage(sourceLocation_);
            break;
          }
          case 18: {
            if (actionLocation_ == null) {
              actionLocation_ = new global::Io.Cucumber.Messages.SourceReference();
            }
            input.ReadMessage(actionLocation_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DEPRECATED. Use TestCase
  /// </summary>
  public sealed partial class TestCasePrepared : pb::IMessage<TestCasePrepared> {
    private static readonly pb::MessageParser<TestCasePrepared> _parser = new pb::MessageParser<TestCasePrepared>(() => new TestCasePrepared());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestCasePrepared> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCasePrepared() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCasePrepared(TestCasePrepared other) : this() {
      pickleId_ = other.pickleId_;
      steps_ = other.steps_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCasePrepared Clone() {
      return new TestCasePrepared(this);
    }

    /// <summary>Field number for the "pickle_id" field.</summary>
    public const int PickleIdFieldNumber = 1;
    private string pickleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PickleId {
      get { return pickleId_; }
      set {
        pickleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steps" field.</summary>
    public const int StepsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.TestCasePreparedStep> _repeated_steps_codec
        = pb::FieldCodec.ForMessage(18, global::Io.Cucumber.Messages.TestCasePreparedStep.Parser);
    private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.TestCasePreparedStep> steps_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.TestCasePreparedStep>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Io.Cucumber.Messages.TestCasePreparedStep> Steps {
      get { return steps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestCasePrepared);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestCasePrepared other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PickleId != other.PickleId) return false;
      if(!steps_.Equals(other.steps_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PickleId.Length != 0) hash ^= PickleId.GetHashCode();
      hash ^= steps_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PickleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PickleId);
      }
      steps_.WriteTo(output, _repeated_steps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PickleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PickleId);
      }
      size += steps_.CalculateSize(_repeated_steps_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestCasePrepared other) {
      if (other == null) {
        return;
      }
      if (other.PickleId.Length != 0) {
        PickleId = other.PickleId;
      }
      steps_.Add(other.steps_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PickleId = input.ReadString();
            break;
          }
          case 18: {
            steps_.AddEntriesFrom(input, _repeated_steps_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestCaseStarted : pb::IMessage<TestCaseStarted> {
    private static readonly pb::MessageParser<TestCaseStarted> _parser = new pb::MessageParser<TestCaseStarted>(() => new TestCaseStarted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestCaseStarted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCaseStarted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCaseStarted(TestCaseStarted other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      platform_ = other.platform_ != null ? other.platform_.Clone() : null;
      attempt_ = other.attempt_;
      testCaseId_ = other.testCaseId_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCaseStarted Clone() {
      return new TestCaseStarted(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Io.Cucumber.Messages.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 2;
    private global::Io.Cucumber.Messages.TestCaseStarted.Types.Platform platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.TestCaseStarted.Types.Platform Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "attempt" field.</summary>
    public const int AttemptFieldNumber = 3;
    private uint attempt_;
    /// <summary>
    ///*
    /// The first attempt should have value 0, and for each retry the value
    /// should increase by 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Attempt {
      get { return attempt_; }
      set {
        attempt_ = value;
      }
    }

    /// <summary>Field number for the "test_case_id" field.</summary>
    public const int TestCaseIdFieldNumber = 4;
    private string testCaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestCaseId {
      get { return testCaseId_; }
      set {
        testCaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 5;
    private string id_ = "";
    /// <summary>
    ///*
    /// Because a `TestCase` can be run multiple times (in case of a retry),
    /// we use this field to group messages relating to the same attempt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestCaseStarted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestCaseStarted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(Platform, other.Platform)) return false;
      if (Attempt != other.Attempt) return false;
      if (TestCaseId != other.TestCaseId) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (platform_ != null) hash ^= Platform.GetHashCode();
      if (Attempt != 0) hash ^= Attempt.GetHashCode();
      if (TestCaseId.Length != 0) hash ^= TestCaseId.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (platform_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Platform);
      }
      if (Attempt != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Attempt);
      }
      if (TestCaseId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TestCaseId);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (platform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Platform);
      }
      if (Attempt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Attempt);
      }
      if (TestCaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestCaseId);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestCaseStarted other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Io.Cucumber.Messages.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.platform_ != null) {
        if (platform_ == null) {
          platform_ = new global::Io.Cucumber.Messages.TestCaseStarted.Types.Platform();
        }
        Platform.MergeFrom(other.Platform);
      }
      if (other.Attempt != 0) {
        Attempt = other.Attempt;
      }
      if (other.TestCaseId.Length != 0) {
        TestCaseId = other.TestCaseId;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              timestamp_ = new global::Io.Cucumber.Messages.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 18: {
            if (platform_ == null) {
              platform_ = new global::Io.Cucumber.Messages.TestCaseStarted.Types.Platform();
            }
            input.ReadMessage(platform_);
            break;
          }
          case 24: {
            Attempt = input.ReadUInt32();
            break;
          }
          case 34: {
            TestCaseId = input.ReadString();
            break;
          }
          case 42: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TestCaseStarted message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Platform : pb::IMessage<Platform> {
        private static readonly pb::MessageParser<Platform> _parser = new pb::MessageParser<Platform>(() => new Platform());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Platform> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Io.Cucumber.Messages.TestCaseStarted.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Platform() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Platform(Platform other) : this() {
          implementation_ = other.implementation_;
          version_ = other.version_;
          os_ = other.os_;
          cpu_ = other.cpu_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Platform Clone() {
          return new Platform(this);
        }

        /// <summary>Field number for the "implementation" field.</summary>
        public const int ImplementationFieldNumber = 1;
        private string implementation_ = "";
        /// <summary>
        /// The runner implementation. For example "SpecFlow", "Cucumber-JVM", "Behat" etc.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Implementation {
          get { return implementation_; }
          set {
            implementation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 2;
        private string version_ = "";
        /// <summary>
        /// The version of the runner
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version {
          get { return version_; }
          set {
            version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "os" field.</summary>
        public const int OsFieldNumber = 3;
        private string os_ = "";
        /// <summary>
        /// The operating system
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Os {
          get { return os_; }
          set {
            os_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "cpu" field.</summary>
        public const int CpuFieldNumber = 4;
        private string cpu_ = "";
        /// <summary>
        /// The CPU architecture
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Cpu {
          get { return cpu_; }
          set {
            cpu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Platform);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Platform other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Implementation != other.Implementation) return false;
          if (Version != other.Version) return false;
          if (Os != other.Os) return false;
          if (Cpu != other.Cpu) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Implementation.Length != 0) hash ^= Implementation.GetHashCode();
          if (Version.Length != 0) hash ^= Version.GetHashCode();
          if (Os.Length != 0) hash ^= Os.GetHashCode();
          if (Cpu.Length != 0) hash ^= Cpu.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Implementation.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Implementation);
          }
          if (Version.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Version);
          }
          if (Os.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Os);
          }
          if (Cpu.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Cpu);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Implementation.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Implementation);
          }
          if (Version.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
          }
          if (Os.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Os);
          }
          if (Cpu.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Cpu);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Platform other) {
          if (other == null) {
            return;
          }
          if (other.Implementation.Length != 0) {
            Implementation = other.Implementation;
          }
          if (other.Version.Length != 0) {
            Version = other.Version;
          }
          if (other.Os.Length != 0) {
            Os = other.Os;
          }
          if (other.Cpu.Length != 0) {
            Cpu = other.Cpu;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Implementation = input.ReadString();
                break;
              }
              case 18: {
                Version = input.ReadString();
                break;
              }
              case 26: {
                Os = input.ReadString();
                break;
              }
              case 34: {
                Cpu = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TestCaseFinished : pb::IMessage<TestCaseFinished> {
    private static readonly pb::MessageParser<TestCaseFinished> _parser = new pb::MessageParser<TestCaseFinished>(() => new TestCaseFinished());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestCaseFinished> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCaseFinished() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCaseFinished(TestCaseFinished other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      testResult_ = other.testResult_ != null ? other.testResult_.Clone() : null;
      testCaseStartedId_ = other.testCaseStartedId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestCaseFinished Clone() {
      return new TestCaseFinished(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Io.Cucumber.Messages.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "test_result" field.</summary>
    public const int TestResultFieldNumber = 2;
    private global::Io.Cucumber.Messages.TestResult testResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.TestResult TestResult {
      get { return testResult_; }
      set {
        testResult_ = value;
      }
    }

    /// <summary>Field number for the "test_case_started_id" field.</summary>
    public const int TestCaseStartedIdFieldNumber = 3;
    private string testCaseStartedId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestCaseStartedId {
      get { return testCaseStartedId_; }
      set {
        testCaseStartedId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestCaseFinished);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestCaseFinished other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(TestResult, other.TestResult)) return false;
      if (TestCaseStartedId != other.TestCaseStartedId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (testResult_ != null) hash ^= TestResult.GetHashCode();
      if (TestCaseStartedId.Length != 0) hash ^= TestCaseStartedId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (testResult_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TestResult);
      }
      if (TestCaseStartedId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TestCaseStartedId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (testResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestResult);
      }
      if (TestCaseStartedId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestCaseStartedId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestCaseFinished other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Io.Cucumber.Messages.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.testResult_ != null) {
        if (testResult_ == null) {
          testResult_ = new global::Io.Cucumber.Messages.TestResult();
        }
        TestResult.MergeFrom(other.TestResult);
      }
      if (other.TestCaseStartedId.Length != 0) {
        TestCaseStartedId = other.TestCaseStartedId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              timestamp_ = new global::Io.Cucumber.Messages.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 18: {
            if (testResult_ == null) {
              testResult_ = new global::Io.Cucumber.Messages.TestResult();
            }
            input.ReadMessage(testResult_);
            break;
          }
          case 26: {
            TestCaseStartedId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestStepStarted : pb::IMessage<TestStepStarted> {
    private static readonly pb::MessageParser<TestStepStarted> _parser = new pb::MessageParser<TestStepStarted>(() => new TestStepStarted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestStepStarted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestStepStarted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestStepStarted(TestStepStarted other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      testStepId_ = other.testStepId_;
      testCaseStartedId_ = other.testCaseStartedId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestStepStarted Clone() {
      return new TestStepStarted(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Io.Cucumber.Messages.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "test_step_id" field.</summary>
    public const int TestStepIdFieldNumber = 2;
    private string testStepId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestStepId {
      get { return testStepId_; }
      set {
        testStepId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "test_case_started_id" field.</summary>
    public const int TestCaseStartedIdFieldNumber = 3;
    private string testCaseStartedId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestCaseStartedId {
      get { return testCaseStartedId_; }
      set {
        testCaseStartedId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestStepStarted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestStepStarted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (TestStepId != other.TestStepId) return false;
      if (TestCaseStartedId != other.TestCaseStartedId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (TestStepId.Length != 0) hash ^= TestStepId.GetHashCode();
      if (TestCaseStartedId.Length != 0) hash ^= TestCaseStartedId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (TestStepId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TestStepId);
      }
      if (TestCaseStartedId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TestCaseStartedId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (TestStepId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestStepId);
      }
      if (TestCaseStartedId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestCaseStartedId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestStepStarted other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Io.Cucumber.Messages.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.TestStepId.Length != 0) {
        TestStepId = other.TestStepId;
      }
      if (other.TestCaseStartedId.Length != 0) {
        TestCaseStartedId = other.TestCaseStartedId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              timestamp_ = new global::Io.Cucumber.Messages.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 18: {
            TestStepId = input.ReadString();
            break;
          }
          case 26: {
            TestCaseStartedId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestStepFinished : pb::IMessage<TestStepFinished> {
    private static readonly pb::MessageParser<TestStepFinished> _parser = new pb::MessageParser<TestStepFinished>(() => new TestStepFinished());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestStepFinished> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestStepFinished() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestStepFinished(TestStepFinished other) : this() {
      testResult_ = other.testResult_ != null ? other.testResult_.Clone() : null;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      testStepId_ = other.testStepId_;
      testCaseStartedId_ = other.testCaseStartedId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestStepFinished Clone() {
      return new TestStepFinished(this);
    }

    /// <summary>Field number for the "test_result" field.</summary>
    public const int TestResultFieldNumber = 1;
    private global::Io.Cucumber.Messages.TestResult testResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.TestResult TestResult {
      get { return testResult_; }
      set {
        testResult_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Io.Cucumber.Messages.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "test_step_id" field.</summary>
    public const int TestStepIdFieldNumber = 3;
    private string testStepId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestStepId {
      get { return testStepId_; }
      set {
        testStepId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "test_case_started_id" field.</summary>
    public const int TestCaseStartedIdFieldNumber = 4;
    private string testCaseStartedId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestCaseStartedId {
      get { return testCaseStartedId_; }
      set {
        testCaseStartedId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestStepFinished);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestStepFinished other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TestResult, other.TestResult)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (TestStepId != other.TestStepId) return false;
      if (TestCaseStartedId != other.TestCaseStartedId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (testResult_ != null) hash ^= TestResult.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (TestStepId.Length != 0) hash ^= TestStepId.GetHashCode();
      if (TestCaseStartedId.Length != 0) hash ^= TestCaseStartedId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (testResult_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TestResult);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (TestStepId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TestStepId);
      }
      if (TestCaseStartedId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TestCaseStartedId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (testResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestResult);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (TestStepId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestStepId);
      }
      if (TestCaseStartedId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestCaseStartedId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestStepFinished other) {
      if (other == null) {
        return;
      }
      if (other.testResult_ != null) {
        if (testResult_ == null) {
          testResult_ = new global::Io.Cucumber.Messages.TestResult();
        }
        TestResult.MergeFrom(other.TestResult);
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Io.Cucumber.Messages.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.TestStepId.Length != 0) {
        TestStepId = other.TestStepId;
      }
      if (other.TestCaseStartedId.Length != 0) {
        TestCaseStartedId = other.TestCaseStartedId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (testResult_ == null) {
              testResult_ = new global::Io.Cucumber.Messages.TestResult();
            }
            input.ReadMessage(testResult_);
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              timestamp_ = new global::Io.Cucumber.Messages.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 26: {
            TestStepId = input.ReadString();
            break;
          }
          case 34: {
            TestCaseStartedId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestResult : pb::IMessage<TestResult> {
    private static readonly pb::MessageParser<TestResult> _parser = new pb::MessageParser<TestResult>(() => new TestResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestResult(TestResult other) : this() {
      status_ = other.status_;
      message_ = other.message_;
      duration_ = other.duration_ != null ? other.duration_.Clone() : null;
      willBeRetried_ = other.willBeRetried_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestResult Clone() {
      return new TestResult(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Io.Cucumber.Messages.TestResult.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.TestResult.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private global::Io.Cucumber.Messages.Duration duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.Duration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "will_be_retried" field.</summary>
    public const int WillBeRetriedFieldNumber = 4;
    private bool willBeRetried_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WillBeRetried {
      get { return willBeRetried_; }
      set {
        willBeRetried_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Message != other.Message) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      if (WillBeRetried != other.WillBeRetried) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (duration_ != null) hash ^= Duration.GetHashCode();
      if (WillBeRetried != false) hash ^= WillBeRetried.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (duration_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Duration);
      }
      if (WillBeRetried != false) {
        output.WriteRawTag(32);
        output.WriteBool(WillBeRetried);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (duration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (WillBeRetried != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestResult other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.duration_ != null) {
        if (duration_ == null) {
          duration_ = new global::Io.Cucumber.Messages.Duration();
        }
        Duration.MergeFrom(other.Duration);
      }
      if (other.WillBeRetried != false) {
        WillBeRetried = other.WillBeRetried;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Io.Cucumber.Messages.TestResult.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            if (duration_ == null) {
              duration_ = new global::Io.Cucumber.Messages.Duration();
            }
            input.ReadMessage(duration_);
            break;
          }
          case 32: {
            WillBeRetried = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TestResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///*
      /// Status of a step. Can also represent status of a Pickle (aggregated
      /// from the status of its steps).
      ///
      /// The ordinal values of statuses are significant. The status of a Pickle
      /// is determined by the union of statuses of its steps. The
      /// status of the Pickle is the status with the highest ordinal
      /// in the enum.
      ///
      /// For example, if a pickle has steps with statuses passed, undefined and skipped,
      /// then the pickle's status is undefined.
      /// </summary>
      public enum Status {
        /// <summary>
        /// The step hasn't been matched or executed.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The step matched one step definition and passed execution.
        /// </summary>
        [pbr::OriginalName("PASSED")] Passed = 1,
        /// <summary>
        /// The step matched one step definition but was not executed because the
        /// previous step was not PASSED.
        /// </summary>
        [pbr::OriginalName("SKIPPED")] Skipped = 2,
        /// <summary>
        /// The step matched one step definition and signalled pending during execution.
        /// This is the default behaviour of generated step definitions, which either
        /// throw a special PendingException, or return a special value indicating that it's
        /// pending. How to signal the pending status depends on the Cucumber implementation.
        /// </summary>
        [pbr::OriginalName("PENDING")] Pending = 3,
        /// <summary>
        /// The step matched no step definitions.
        /// </summary>
        [pbr::OriginalName("UNDEFINED")] Undefined = 4,
        /// <summary>
        /// The step matched two or more step definitions.
        /// </summary>
        [pbr::OriginalName("AMBIGUOUS")] Ambiguous = 5,
        /// <summary>
        /// The step matched one step definition and failed execution.
        /// </summary>
        [pbr::OriginalName("FAILED")] Failed = 6,
      }

    }
    #endregion

  }

  public sealed partial class TestRunFinished : pb::IMessage<TestRunFinished> {
    private static readonly pb::MessageParser<TestRunFinished> _parser = new pb::MessageParser<TestRunFinished>(() => new TestRunFinished());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestRunFinished> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRunFinished() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRunFinished(TestRunFinished other) : this() {
      success_ = other.success_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRunFinished Clone() {
      return new TestRunFinished(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    /// success = StrictModeEnabled ? (failed_count == 0 &amp;&amp; ambiguous_count == 0 &amp;&amp; undefined_count == 0 &amp;&amp; pending_count == 0) : (failed_count == 0 &amp;&amp; ambiguous_count == 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Io.Cucumber.Messages.Timestamp timestamp_;
    /// <summary>
    /// Timestamp when the TestRun is finished
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestRunFinished);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestRunFinished other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestRunFinished other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Io.Cucumber.Messages.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              timestamp_ = new global::Io.Cucumber.Messages.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandStart : pb::IMessage<CommandStart> {
    private static readonly pb::MessageParser<CommandStart> _parser = new pb::MessageParser<CommandStart>(() => new CommandStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandStart(CommandStart other) : this() {
      baseDirectory_ = other.baseDirectory_;
      sourcesConfig_ = other.sourcesConfig_ != null ? other.sourcesConfig_.Clone() : null;
      runtimeConfig_ = other.runtimeConfig_ != null ? other.runtimeConfig_.Clone() : null;
      supportCodeConfig_ = other.supportCodeConfig_ != null ? other.supportCodeConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandStart Clone() {
      return new CommandStart(this);
    }

    /// <summary>Field number for the "base_directory" field.</summary>
    public const int BaseDirectoryFieldNumber = 2;
    private string baseDirectory_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseDirectory {
      get { return baseDirectory_; }
      set {
        baseDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sources_config" field.</summary>
    public const int SourcesConfigFieldNumber = 3;
    private global::Io.Cucumber.Messages.SourcesConfig sourcesConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.SourcesConfig SourcesConfig {
      get { return sourcesConfig_; }
      set {
        sourcesConfig_ = value;
      }
    }

    /// <summary>Field number for the "runtime_config" field.</summary>
    public const int RuntimeConfigFieldNumber = 4;
    private global::Io.Cucumber.Messages.RuntimeConfig runtimeConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.RuntimeConfig RuntimeConfig {
      get { return runtimeConfig_; }
      set {
        runtimeConfig_ = value;
      }
    }

    /// <summary>Field number for the "support_code_config" field.</summary>
    public const int SupportCodeConfigFieldNumber = 5;
    private global::Io.Cucumber.Messages.SupportCodeConfig supportCodeConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.SupportCodeConfig SupportCodeConfig {
      get { return supportCodeConfig_; }
      set {
        supportCodeConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseDirectory != other.BaseDirectory) return false;
      if (!object.Equals(SourcesConfig, other.SourcesConfig)) return false;
      if (!object.Equals(RuntimeConfig, other.RuntimeConfig)) return false;
      if (!object.Equals(SupportCodeConfig, other.SupportCodeConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseDirectory.Length != 0) hash ^= BaseDirectory.GetHashCode();
      if (sourcesConfig_ != null) hash ^= SourcesConfig.GetHashCode();
      if (runtimeConfig_ != null) hash ^= RuntimeConfig.GetHashCode();
      if (supportCodeConfig_ != null) hash ^= SupportCodeConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseDirectory.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BaseDirectory);
      }
      if (sourcesConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SourcesConfig);
      }
      if (runtimeConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RuntimeConfig);
      }
      if (supportCodeConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SupportCodeConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseDirectory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseDirectory);
      }
      if (sourcesConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourcesConfig);
      }
      if (runtimeConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RuntimeConfig);
      }
      if (supportCodeConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SupportCodeConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandStart other) {
      if (other == null) {
        return;
      }
      if (other.BaseDirectory.Length != 0) {
        BaseDirectory = other.BaseDirectory;
      }
      if (other.sourcesConfig_ != null) {
        if (sourcesConfig_ == null) {
          sourcesConfig_ = new global::Io.Cucumber.Messages.SourcesConfig();
        }
        SourcesConfig.MergeFrom(other.SourcesConfig);
      }
      if (other.runtimeConfig_ != null) {
        if (runtimeConfig_ == null) {
          runtimeConfig_ = new global::Io.Cucumber.Messages.RuntimeConfig();
        }
        RuntimeConfig.MergeFrom(other.RuntimeConfig);
      }
      if (other.supportCodeConfig_ != null) {
        if (supportCodeConfig_ == null) {
          supportCodeConfig_ = new global::Io.Cucumber.Messages.SupportCodeConfig();
        }
        SupportCodeConfig.MergeFrom(other.SupportCodeConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            BaseDirectory = input.ReadString();
            break;
          }
          case 26: {
            if (sourcesConfig_ == null) {
              sourcesConfig_ = new global::Io.Cucumber.Messages.SourcesConfig();
            }
            input.ReadMessage(sourcesConfig_);
            break;
          }
          case 34: {
            if (runtimeConfig_ == null) {
              runtimeConfig_ = new global::Io.Cucumber.Messages.RuntimeConfig();
            }
            input.ReadMessage(runtimeConfig_);
            break;
          }
          case 42: {
            if (supportCodeConfig_ == null) {
              supportCodeConfig_ = new global::Io.Cucumber.Messages.SupportCodeConfig();
            }
            input.ReadMessage(supportCodeConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SourcesConfig : pb::IMessage<SourcesConfig> {
    private static readonly pb::MessageParser<SourcesConfig> _parser = new pb::MessageParser<SourcesConfig>(() => new SourcesConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SourcesConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourcesConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourcesConfig(SourcesConfig other) : this() {
      absolutePaths_ = other.absolutePaths_.Clone();
      language_ = other.language_;
      filters_ = other.filters_ != null ? other.filters_.Clone() : null;
      order_ = other.order_ != null ? other.order_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourcesConfig Clone() {
      return new SourcesConfig(this);
    }

    /// <summary>Field number for the "absolute_paths" field.</summary>
    public const int AbsolutePathsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_absolutePaths_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> absolutePaths_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AbsolutePaths {
      get { return absolutePaths_; }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 3;
    private global::Io.Cucumber.Messages.SourcesFilterConfig filters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.SourcesFilterConfig Filters {
      get { return filters_; }
      set {
        filters_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 4;
    private global::Io.Cucumber.Messages.SourcesOrder order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.SourcesOrder Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SourcesConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SourcesConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!absolutePaths_.Equals(other.absolutePaths_)) return false;
      if (Language != other.Language) return false;
      if (!object.Equals(Filters, other.Filters)) return false;
      if (!object.Equals(Order, other.Order)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= absolutePaths_.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (filters_ != null) hash ^= Filters.GetHashCode();
      if (order_ != null) hash ^= Order.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      absolutePaths_.WriteTo(output, _repeated_absolutePaths_codec);
      if (Language.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Language);
      }
      if (filters_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Filters);
      }
      if (order_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Order);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += absolutePaths_.CalculateSize(_repeated_absolutePaths_codec);
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (filters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filters);
      }
      if (order_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Order);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SourcesConfig other) {
      if (other == null) {
        return;
      }
      absolutePaths_.Add(other.absolutePaths_);
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.filters_ != null) {
        if (filters_ == null) {
          filters_ = new global::Io.Cucumber.Messages.SourcesFilterConfig();
        }
        Filters.MergeFrom(other.Filters);
      }
      if (other.order_ != null) {
        if (order_ == null) {
          order_ = new global::Io.Cucumber.Messages.SourcesOrder();
        }
        Order.MergeFrom(other.Order);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            absolutePaths_.AddEntriesFrom(input, _repeated_absolutePaths_codec);
            break;
          }
          case 18: {
            Language = input.ReadString();
            break;
          }
          case 26: {
            if (filters_ == null) {
              filters_ = new global::Io.Cucumber.Messages.SourcesFilterConfig();
            }
            input.ReadMessage(filters_);
            break;
          }
          case 34: {
            if (order_ == null) {
              order_ = new global::Io.Cucumber.Messages.SourcesOrder();
            }
            input.ReadMessage(order_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SourcesFilterConfig : pb::IMessage<SourcesFilterConfig> {
    private static readonly pb::MessageParser<SourcesFilterConfig> _parser = new pb::MessageParser<SourcesFilterConfig>(() => new SourcesFilterConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SourcesFilterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourcesFilterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourcesFilterConfig(SourcesFilterConfig other) : this() {
      tagExpression_ = other.tagExpression_;
      nameRegularExpressions_ = other.nameRegularExpressions_.Clone();
      uriToLinesMapping_ = other.uriToLinesMapping_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourcesFilterConfig Clone() {
      return new SourcesFilterConfig(this);
    }

    /// <summary>Field number for the "tag_expression" field.</summary>
    public const int TagExpressionFieldNumber = 1;
    private string tagExpression_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TagExpression {
      get { return tagExpression_; }
      set {
        tagExpression_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_regular_expressions" field.</summary>
    public const int NameRegularExpressionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_nameRegularExpressions_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> nameRegularExpressions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NameRegularExpressions {
      get { return nameRegularExpressions_; }
    }

    /// <summary>Field number for the "uri_to_lines_mapping" field.</summary>
    public const int UriToLinesMappingFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.UriToLinesMapping> _repeated_uriToLinesMapping_codec
        = pb::FieldCodec.ForMessage(26, global::Io.Cucumber.Messages.UriToLinesMapping.Parser);
    private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.UriToLinesMapping> uriToLinesMapping_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.UriToLinesMapping>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Io.Cucumber.Messages.UriToLinesMapping> UriToLinesMapping {
      get { return uriToLinesMapping_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SourcesFilterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SourcesFilterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TagExpression != other.TagExpression) return false;
      if(!nameRegularExpressions_.Equals(other.nameRegularExpressions_)) return false;
      if(!uriToLinesMapping_.Equals(other.uriToLinesMapping_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TagExpression.Length != 0) hash ^= TagExpression.GetHashCode();
      hash ^= nameRegularExpressions_.GetHashCode();
      hash ^= uriToLinesMapping_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TagExpression.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TagExpression);
      }
      nameRegularExpressions_.WriteTo(output, _repeated_nameRegularExpressions_codec);
      uriToLinesMapping_.WriteTo(output, _repeated_uriToLinesMapping_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TagExpression.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TagExpression);
      }
      size += nameRegularExpressions_.CalculateSize(_repeated_nameRegularExpressions_codec);
      size += uriToLinesMapping_.CalculateSize(_repeated_uriToLinesMapping_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SourcesFilterConfig other) {
      if (other == null) {
        return;
      }
      if (other.TagExpression.Length != 0) {
        TagExpression = other.TagExpression;
      }
      nameRegularExpressions_.Add(other.nameRegularExpressions_);
      uriToLinesMapping_.Add(other.uriToLinesMapping_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TagExpression = input.ReadString();
            break;
          }
          case 18: {
            nameRegularExpressions_.AddEntriesFrom(input, _repeated_nameRegularExpressions_codec);
            break;
          }
          case 26: {
            uriToLinesMapping_.AddEntriesFrom(input, _repeated_uriToLinesMapping_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UriToLinesMapping : pb::IMessage<UriToLinesMapping> {
    private static readonly pb::MessageParser<UriToLinesMapping> _parser = new pb::MessageParser<UriToLinesMapping>(() => new UriToLinesMapping());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UriToLinesMapping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UriToLinesMapping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UriToLinesMapping(UriToLinesMapping other) : this() {
      absolutePath_ = other.absolutePath_;
      lines_ = other.lines_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UriToLinesMapping Clone() {
      return new UriToLinesMapping(this);
    }

    /// <summary>Field number for the "absolute_path" field.</summary>
    public const int AbsolutePathFieldNumber = 1;
    private string absolutePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AbsolutePath {
      get { return absolutePath_; }
      set {
        absolutePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lines" field.</summary>
    public const int LinesFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_lines_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> lines_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Lines {
      get { return lines_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UriToLinesMapping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UriToLinesMapping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbsolutePath != other.AbsolutePath) return false;
      if(!lines_.Equals(other.lines_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbsolutePath.Length != 0) hash ^= AbsolutePath.GetHashCode();
      hash ^= lines_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbsolutePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AbsolutePath);
      }
      lines_.WriteTo(output, _repeated_lines_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbsolutePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AbsolutePath);
      }
      size += lines_.CalculateSize(_repeated_lines_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UriToLinesMapping other) {
      if (other == null) {
        return;
      }
      if (other.AbsolutePath.Length != 0) {
        AbsolutePath = other.AbsolutePath;
      }
      lines_.Add(other.lines_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AbsolutePath = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            lines_.AddEntriesFrom(input, _repeated_lines_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SourcesOrder : pb::IMessage<SourcesOrder> {
    private static readonly pb::MessageParser<SourcesOrder> _parser = new pb::MessageParser<SourcesOrder>(() => new SourcesOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SourcesOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourcesOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourcesOrder(SourcesOrder other) : this() {
      type_ = other.type_;
      seed_ = other.seed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourcesOrder Clone() {
      return new SourcesOrder(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Io.Cucumber.Messages.SourcesOrderType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.SourcesOrderType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 2;
    private ulong seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SourcesOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SourcesOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Seed != other.Seed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Seed != 0UL) hash ^= Seed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Seed != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Seed != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Seed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SourcesOrder other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Seed != 0UL) {
        Seed = other.Seed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Io.Cucumber.Messages.SourcesOrderType) input.ReadEnum();
            break;
          }
          case 16: {
            Seed = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RuntimeConfig : pb::IMessage<RuntimeConfig> {
    private static readonly pb::MessageParser<RuntimeConfig> _parser = new pb::MessageParser<RuntimeConfig>(() => new RuntimeConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuntimeConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeConfig(RuntimeConfig other) : this() {
      isFailFast_ = other.isFailFast_;
      isDryRun_ = other.isDryRun_;
      isStrict_ = other.isStrict_;
      maxParallel_ = other.maxParallel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeConfig Clone() {
      return new RuntimeConfig(this);
    }

    /// <summary>Field number for the "is_fail_fast" field.</summary>
    public const int IsFailFastFieldNumber = 1;
    private bool isFailFast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFailFast {
      get { return isFailFast_; }
      set {
        isFailFast_ = value;
      }
    }

    /// <summary>Field number for the "is_dry_run" field.</summary>
    public const int IsDryRunFieldNumber = 2;
    private bool isDryRun_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDryRun {
      get { return isDryRun_; }
      set {
        isDryRun_ = value;
      }
    }

    /// <summary>Field number for the "is_strict" field.</summary>
    public const int IsStrictFieldNumber = 3;
    private bool isStrict_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStrict {
      get { return isStrict_; }
      set {
        isStrict_ = value;
      }
    }

    /// <summary>Field number for the "max_parallel" field.</summary>
    public const int MaxParallelFieldNumber = 4;
    private ulong maxParallel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxParallel {
      get { return maxParallel_; }
      set {
        maxParallel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuntimeConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuntimeConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFailFast != other.IsFailFast) return false;
      if (IsDryRun != other.IsDryRun) return false;
      if (IsStrict != other.IsStrict) return false;
      if (MaxParallel != other.MaxParallel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFailFast != false) hash ^= IsFailFast.GetHashCode();
      if (IsDryRun != false) hash ^= IsDryRun.GetHashCode();
      if (IsStrict != false) hash ^= IsStrict.GetHashCode();
      if (MaxParallel != 0UL) hash ^= MaxParallel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFailFast != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsFailFast);
      }
      if (IsDryRun != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDryRun);
      }
      if (IsStrict != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsStrict);
      }
      if (MaxParallel != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MaxParallel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFailFast != false) {
        size += 1 + 1;
      }
      if (IsDryRun != false) {
        size += 1 + 1;
      }
      if (IsStrict != false) {
        size += 1 + 1;
      }
      if (MaxParallel != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxParallel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuntimeConfig other) {
      if (other == null) {
        return;
      }
      if (other.IsFailFast != false) {
        IsFailFast = other.IsFailFast;
      }
      if (other.IsDryRun != false) {
        IsDryRun = other.IsDryRun;
      }
      if (other.IsStrict != false) {
        IsStrict = other.IsStrict;
      }
      if (other.MaxParallel != 0UL) {
        MaxParallel = other.MaxParallel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsFailFast = input.ReadBool();
            break;
          }
          case 16: {
            IsDryRun = input.ReadBool();
            break;
          }
          case 24: {
            IsStrict = input.ReadBool();
            break;
          }
          case 32: {
            MaxParallel = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SupportCodeConfig : pb::IMessage<SupportCodeConfig> {
    private static readonly pb::MessageParser<SupportCodeConfig> _parser = new pb::MessageParser<SupportCodeConfig>(() => new SupportCodeConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SupportCodeConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportCodeConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportCodeConfig(SupportCodeConfig other) : this() {
      beforeTestCaseHooks_ = other.beforeTestCaseHooks_.Clone();
      afterTestCaseHooks_ = other.afterTestCaseHooks_.Clone();
      stepDefinitions_ = other.stepDefinitions_.Clone();
      parameterTypes_ = other.parameterTypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportCodeConfig Clone() {
      return new SupportCodeConfig(this);
    }

    /// <summary>Field number for the "before_test_case_hooks" field.</summary>
    public const int BeforeTestCaseHooksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.Hook> _repeated_beforeTestCaseHooks_codec
        = pb::FieldCodec.ForMessage(10, global::Io.Cucumber.Messages.Hook.Parser);
    private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.Hook> beforeTestCaseHooks_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.Hook>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Io.Cucumber.Messages.Hook> BeforeTestCaseHooks {
      get { return beforeTestCaseHooks_; }
    }

    /// <summary>Field number for the "after_test_case_hooks" field.</summary>
    public const int AfterTestCaseHooksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.Hook> _repeated_afterTestCaseHooks_codec
        = pb::FieldCodec.ForMessage(18, global::Io.Cucumber.Messages.Hook.Parser);
    private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.Hook> afterTestCaseHooks_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.Hook>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Io.Cucumber.Messages.Hook> AfterTestCaseHooks {
      get { return afterTestCaseHooks_; }
    }

    /// <summary>Field number for the "step_definitions" field.</summary>
    public const int StepDefinitionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.StepDefinition> _repeated_stepDefinitions_codec
        = pb::FieldCodec.ForMessage(26, global::Io.Cucumber.Messages.StepDefinition.Parser);
    private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.StepDefinition> stepDefinitions_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.StepDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Io.Cucumber.Messages.StepDefinition> StepDefinitions {
      get { return stepDefinitions_; }
    }

    /// <summary>Field number for the "parameter_types" field.</summary>
    public const int ParameterTypesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.ParameterType> _repeated_parameterTypes_codec
        = pb::FieldCodec.ForMessage(34, global::Io.Cucumber.Messages.ParameterType.Parser);
    private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.ParameterType> parameterTypes_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.ParameterType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Io.Cucumber.Messages.ParameterType> ParameterTypes {
      get { return parameterTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SupportCodeConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SupportCodeConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!beforeTestCaseHooks_.Equals(other.beforeTestCaseHooks_)) return false;
      if(!afterTestCaseHooks_.Equals(other.afterTestCaseHooks_)) return false;
      if(!stepDefinitions_.Equals(other.stepDefinitions_)) return false;
      if(!parameterTypes_.Equals(other.parameterTypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= beforeTestCaseHooks_.GetHashCode();
      hash ^= afterTestCaseHooks_.GetHashCode();
      hash ^= stepDefinitions_.GetHashCode();
      hash ^= parameterTypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      beforeTestCaseHooks_.WriteTo(output, _repeated_beforeTestCaseHooks_codec);
      afterTestCaseHooks_.WriteTo(output, _repeated_afterTestCaseHooks_codec);
      stepDefinitions_.WriteTo(output, _repeated_stepDefinitions_codec);
      parameterTypes_.WriteTo(output, _repeated_parameterTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += beforeTestCaseHooks_.CalculateSize(_repeated_beforeTestCaseHooks_codec);
      size += afterTestCaseHooks_.CalculateSize(_repeated_afterTestCaseHooks_codec);
      size += stepDefinitions_.CalculateSize(_repeated_stepDefinitions_codec);
      size += parameterTypes_.CalculateSize(_repeated_parameterTypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SupportCodeConfig other) {
      if (other == null) {
        return;
      }
      beforeTestCaseHooks_.Add(other.beforeTestCaseHooks_);
      afterTestCaseHooks_.Add(other.afterTestCaseHooks_);
      stepDefinitions_.Add(other.stepDefinitions_);
      parameterTypes_.Add(other.parameterTypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            beforeTestCaseHooks_.AddEntriesFrom(input, _repeated_beforeTestCaseHooks_codec);
            break;
          }
          case 18: {
            afterTestCaseHooks_.AddEntriesFrom(input, _repeated_afterTestCaseHooks_codec);
            break;
          }
          case 26: {
            stepDefinitions_.AddEntriesFrom(input, _repeated_stepDefinitions_codec);
            break;
          }
          case 34: {
            parameterTypes_.AddEntriesFrom(input, _repeated_parameterTypes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hook : pb::IMessage<Hook> {
    private static readonly pb::MessageParser<Hook> _parser = new pb::MessageParser<Hook>(() => new Hook());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hook> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hook() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hook(Hook other) : this() {
      id_ = other.id_;
      tagExpression_ = other.tagExpression_;
      sourceReference_ = other.sourceReference_ != null ? other.sourceReference_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hook Clone() {
      return new Hook(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag_expression" field.</summary>
    public const int TagExpressionFieldNumber = 2;
    private string tagExpression_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TagExpression {
      get { return tagExpression_; }
      set {
        tagExpression_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_reference" field.</summary>
    public const int SourceReferenceFieldNumber = 3;
    private global::Io.Cucumber.Messages.SourceReference sourceReference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.SourceReference SourceReference {
      get { return sourceReference_; }
      set {
        sourceReference_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hook);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hook other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TagExpression != other.TagExpression) return false;
      if (!object.Equals(SourceReference, other.SourceReference)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TagExpression.Length != 0) hash ^= TagExpression.GetHashCode();
      if (sourceReference_ != null) hash ^= SourceReference.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TagExpression.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TagExpression);
      }
      if (sourceReference_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SourceReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (TagExpression.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TagExpression);
      }
      if (sourceReference_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceReference);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hook other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TagExpression.Length != 0) {
        TagExpression = other.TagExpression;
      }
      if (other.sourceReference_ != null) {
        if (sourceReference_ == null) {
          sourceReference_ = new global::Io.Cucumber.Messages.SourceReference();
        }
        SourceReference.MergeFrom(other.SourceReference);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TagExpression = input.ReadString();
            break;
          }
          case 26: {
            if (sourceReference_ == null) {
              sourceReference_ = new global::Io.Cucumber.Messages.SourceReference();
            }
            input.ReadMessage(sourceReference_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StepDefinition : pb::IMessage<StepDefinition> {
    private static readonly pb::MessageParser<StepDefinition> _parser = new pb::MessageParser<StepDefinition>(() => new StepDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StepDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepDefinition(StepDefinition other) : this() {
      id_ = other.id_;
      pattern_ = other.pattern_ != null ? other.pattern_.Clone() : null;
      sourceReference_ = other.sourceReference_ != null ? other.sourceReference_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepDefinition Clone() {
      return new StepDefinition(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 2;
    private global::Io.Cucumber.Messages.StepDefinitionPattern pattern_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.StepDefinitionPattern Pattern {
      get { return pattern_; }
      set {
        pattern_ = value;
      }
    }

    /// <summary>Field number for the "source_reference" field.</summary>
    public const int SourceReferenceFieldNumber = 3;
    private global::Io.Cucumber.Messages.SourceReference sourceReference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.SourceReference SourceReference {
      get { return sourceReference_; }
      set {
        sourceReference_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StepDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StepDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Pattern, other.Pattern)) return false;
      if (!object.Equals(SourceReference, other.SourceReference)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (pattern_ != null) hash ^= Pattern.GetHashCode();
      if (sourceReference_ != null) hash ^= SourceReference.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (pattern_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pattern);
      }
      if (sourceReference_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SourceReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (pattern_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pattern);
      }
      if (sourceReference_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceReference);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StepDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.pattern_ != null) {
        if (pattern_ == null) {
          pattern_ = new global::Io.Cucumber.Messages.StepDefinitionPattern();
        }
        Pattern.MergeFrom(other.Pattern);
      }
      if (other.sourceReference_ != null) {
        if (sourceReference_ == null) {
          sourceReference_ = new global::Io.Cucumber.Messages.SourceReference();
        }
        SourceReference.MergeFrom(other.SourceReference);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (pattern_ == null) {
              pattern_ = new global::Io.Cucumber.Messages.StepDefinitionPattern();
            }
            input.ReadMessage(pattern_);
            break;
          }
          case 26: {
            if (sourceReference_ == null) {
              sourceReference_ = new global::Io.Cucumber.Messages.SourceReference();
            }
            input.ReadMessage(sourceReference_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StepDefinitionPattern : pb::IMessage<StepDefinitionPattern> {
    private static readonly pb::MessageParser<StepDefinitionPattern> _parser = new pb::MessageParser<StepDefinitionPattern>(() => new StepDefinitionPattern());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StepDefinitionPattern> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepDefinitionPattern() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepDefinitionPattern(StepDefinitionPattern other) : this() {
      source_ = other.source_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepDefinitionPattern Clone() {
      return new StepDefinitionPattern(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Io.Cucumber.Messages.StepDefinitionPatternType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.StepDefinitionPatternType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StepDefinitionPattern);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StepDefinitionPattern other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StepDefinitionPattern other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Io.Cucumber.Messages.StepDefinitionPatternType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParameterType : pb::IMessage<ParameterType> {
    private static readonly pb::MessageParser<ParameterType> _parser = new pb::MessageParser<ParameterType>(() => new ParameterType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParameterType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterType(ParameterType other) : this() {
      name_ = other.name_;
      regularExpressions_ = other.regularExpressions_.Clone();
      preferForRegularExpressionMatch_ = other.preferForRegularExpressionMatch_;
      useForSnippets_ = other.useForSnippets_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterType Clone() {
      return new ParameterType(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name is unique, so we don't need an id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "regular_expressions" field.</summary>
    public const int RegularExpressionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_regularExpressions_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> regularExpressions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RegularExpressions {
      get { return regularExpressions_; }
    }

    /// <summary>Field number for the "prefer_for_regular_expression_match" field.</summary>
    public const int PreferForRegularExpressionMatchFieldNumber = 3;
    private bool preferForRegularExpressionMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PreferForRegularExpressionMatch {
      get { return preferForRegularExpressionMatch_; }
      set {
        preferForRegularExpressionMatch_ = value;
      }
    }

    /// <summary>Field number for the "use_for_snippets" field.</summary>
    public const int UseForSnippetsFieldNumber = 4;
    private bool useForSnippets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseForSnippets {
      get { return useForSnippets_; }
      set {
        useForSnippets_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParameterType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParameterType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!regularExpressions_.Equals(other.regularExpressions_)) return false;
      if (PreferForRegularExpressionMatch != other.PreferForRegularExpressionMatch) return false;
      if (UseForSnippets != other.UseForSnippets) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= regularExpressions_.GetHashCode();
      if (PreferForRegularExpressionMatch != false) hash ^= PreferForRegularExpressionMatch.GetHashCode();
      if (UseForSnippets != false) hash ^= UseForSnippets.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      regularExpressions_.WriteTo(output, _repeated_regularExpressions_codec);
      if (PreferForRegularExpressionMatch != false) {
        output.WriteRawTag(24);
        output.WriteBool(PreferForRegularExpressionMatch);
      }
      if (UseForSnippets != false) {
        output.WriteRawTag(32);
        output.WriteBool(UseForSnippets);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += regularExpressions_.CalculateSize(_repeated_regularExpressions_codec);
      if (PreferForRegularExpressionMatch != false) {
        size += 1 + 1;
      }
      if (UseForSnippets != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParameterType other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      regularExpressions_.Add(other.regularExpressions_);
      if (other.PreferForRegularExpressionMatch != false) {
        PreferForRegularExpressionMatch = other.PreferForRegularExpressionMatch;
      }
      if (other.UseForSnippets != false) {
        UseForSnippets = other.UseForSnippets;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            regularExpressions_.AddEntriesFrom(input, _repeated_regularExpressions_codec);
            break;
          }
          case 24: {
            PreferForRegularExpressionMatch = input.ReadBool();
            break;
          }
          case 32: {
            UseForSnippets = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandActionComplete : pb::IMessage<CommandActionComplete> {
    private static readonly pb::MessageParser<CommandActionComplete> _parser = new pb::MessageParser<CommandActionComplete>(() => new CommandActionComplete());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandActionComplete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandActionComplete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandActionComplete(CommandActionComplete other) : this() {
      completedId_ = other.completedId_;
      switch (other.ResultCase) {
        case ResultOneofCase.TestResult:
          TestResult = other.TestResult.Clone();
          break;
        case ResultOneofCase.Snippet:
          Snippet = other.Snippet;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandActionComplete Clone() {
      return new CommandActionComplete(this);
    }

    /// <summary>Field number for the "completed_id" field.</summary>
    public const int CompletedIdFieldNumber = 1;
    private string completedId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompletedId {
      get { return completedId_; }
      set {
        completedId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "test_result" field.</summary>
    public const int TestResultFieldNumber = 2;
    /// <summary>
    /// Used for responses to CommandRunBeforeTestCaseHook / CommandRunTestStep / CommandRunAfterTestCaseHook
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.TestResult TestResult {
      get { return resultCase_ == ResultOneofCase.TestResult ? (global::Io.Cucumber.Messages.TestResult) result_ : null; }
      set {
        result_ = value;
        resultCase_ = value == null ? ResultOneofCase.None : ResultOneofCase.TestResult;
      }
    }

    /// <summary>Field number for the "snippet" field.</summary>
    public const int SnippetFieldNumber = 3;
    /// <summary>
    /// Used for response to CommandGenerateSnippet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Snippet {
      get { return resultCase_ == ResultOneofCase.Snippet ? (string) result_ : ""; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        resultCase_ = ResultOneofCase.Snippet;
      }
    }

    private object result_;
    /// <summary>Enum of possible cases for the "result" oneof.</summary>
    public enum ResultOneofCase {
      None = 0,
      TestResult = 2,
      Snippet = 3,
    }
    private ResultOneofCase resultCase_ = ResultOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultOneofCase ResultCase {
      get { return resultCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResult() {
      resultCase_ = ResultOneofCase.None;
      result_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandActionComplete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandActionComplete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompletedId != other.CompletedId) return false;
      if (!object.Equals(TestResult, other.TestResult)) return false;
      if (Snippet != other.Snippet) return false;
      if (ResultCase != other.ResultCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompletedId.Length != 0) hash ^= CompletedId.GetHashCode();
      if (resultCase_ == ResultOneofCase.TestResult) hash ^= TestResult.GetHashCode();
      if (resultCase_ == ResultOneofCase.Snippet) hash ^= Snippet.GetHashCode();
      hash ^= (int) resultCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompletedId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CompletedId);
      }
      if (resultCase_ == ResultOneofCase.TestResult) {
        output.WriteRawTag(18);
        output.WriteMessage(TestResult);
      }
      if (resultCase_ == ResultOneofCase.Snippet) {
        output.WriteRawTag(26);
        output.WriteString(Snippet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompletedId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompletedId);
      }
      if (resultCase_ == ResultOneofCase.TestResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestResult);
      }
      if (resultCase_ == ResultOneofCase.Snippet) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Snippet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandActionComplete other) {
      if (other == null) {
        return;
      }
      if (other.CompletedId.Length != 0) {
        CompletedId = other.CompletedId;
      }
      switch (other.ResultCase) {
        case ResultOneofCase.TestResult:
          if (TestResult == null) {
            TestResult = new global::Io.Cucumber.Messages.TestResult();
          }
          TestResult.MergeFrom(other.TestResult);
          break;
        case ResultOneofCase.Snippet:
          Snippet = other.Snippet;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CompletedId = input.ReadString();
            break;
          }
          case 18: {
            global::Io.Cucumber.Messages.TestResult subBuilder = new global::Io.Cucumber.Messages.TestResult();
            if (resultCase_ == ResultOneofCase.TestResult) {
              subBuilder.MergeFrom(TestResult);
            }
            input.ReadMessage(subBuilder);
            TestResult = subBuilder;
            break;
          }
          case 26: {
            Snippet = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandRunBeforeTestRunHooks : pb::IMessage<CommandRunBeforeTestRunHooks> {
    private static readonly pb::MessageParser<CommandRunBeforeTestRunHooks> _parser = new pb::MessageParser<CommandRunBeforeTestRunHooks>(() => new CommandRunBeforeTestRunHooks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandRunBeforeTestRunHooks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunBeforeTestRunHooks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunBeforeTestRunHooks(CommandRunBeforeTestRunHooks other) : this() {
      actionId_ = other.actionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunBeforeTestRunHooks Clone() {
      return new CommandRunBeforeTestRunHooks(this);
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 1;
    private string actionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionId {
      get { return actionId_; }
      set {
        actionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandRunBeforeTestRunHooks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandRunBeforeTestRunHooks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionId != other.ActionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionId.Length != 0) hash ^= ActionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandRunBeforeTestRunHooks other) {
      if (other == null) {
        return;
      }
      if (other.ActionId.Length != 0) {
        ActionId = other.ActionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ActionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandRunAfterTestRunHooks : pb::IMessage<CommandRunAfterTestRunHooks> {
    private static readonly pb::MessageParser<CommandRunAfterTestRunHooks> _parser = new pb::MessageParser<CommandRunAfterTestRunHooks>(() => new CommandRunAfterTestRunHooks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandRunAfterTestRunHooks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunAfterTestRunHooks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunAfterTestRunHooks(CommandRunAfterTestRunHooks other) : this() {
      actionId_ = other.actionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunAfterTestRunHooks Clone() {
      return new CommandRunAfterTestRunHooks(this);
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 1;
    private string actionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionId {
      get { return actionId_; }
      set {
        actionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandRunAfterTestRunHooks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandRunAfterTestRunHooks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionId != other.ActionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionId.Length != 0) hash ^= ActionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandRunAfterTestRunHooks other) {
      if (other == null) {
        return;
      }
      if (other.ActionId.Length != 0) {
        ActionId = other.ActionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ActionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandInitializeTestCase : pb::IMessage<CommandInitializeTestCase> {
    private static readonly pb::MessageParser<CommandInitializeTestCase> _parser = new pb::MessageParser<CommandInitializeTestCase>(() => new CommandInitializeTestCase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandInitializeTestCase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandInitializeTestCase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandInitializeTestCase(CommandInitializeTestCase other) : this() {
      actionId_ = other.actionId_;
      pickle_ = other.pickle_ != null ? other.pickle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandInitializeTestCase Clone() {
      return new CommandInitializeTestCase(this);
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 1;
    private string actionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionId {
      get { return actionId_; }
      set {
        actionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pickle" field.</summary>
    public const int PickleFieldNumber = 2;
    private global::Io.Cucumber.Messages.Pickle pickle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.Pickle Pickle {
      get { return pickle_; }
      set {
        pickle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandInitializeTestCase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandInitializeTestCase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionId != other.ActionId) return false;
      if (!object.Equals(Pickle, other.Pickle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionId.Length != 0) hash ^= ActionId.GetHashCode();
      if (pickle_ != null) hash ^= Pickle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActionId);
      }
      if (pickle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pickle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionId);
      }
      if (pickle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pickle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandInitializeTestCase other) {
      if (other == null) {
        return;
      }
      if (other.ActionId.Length != 0) {
        ActionId = other.ActionId;
      }
      if (other.pickle_ != null) {
        if (pickle_ == null) {
          pickle_ = new global::Io.Cucumber.Messages.Pickle();
        }
        Pickle.MergeFrom(other.Pickle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ActionId = input.ReadString();
            break;
          }
          case 18: {
            if (pickle_ == null) {
              pickle_ = new global::Io.Cucumber.Messages.Pickle();
            }
            input.ReadMessage(pickle_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandRunBeforeTestCaseHook : pb::IMessage<CommandRunBeforeTestCaseHook> {
    private static readonly pb::MessageParser<CommandRunBeforeTestCaseHook> _parser = new pb::MessageParser<CommandRunBeforeTestCaseHook>(() => new CommandRunBeforeTestCaseHook());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandRunBeforeTestCaseHook> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunBeforeTestCaseHook() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunBeforeTestCaseHook(CommandRunBeforeTestCaseHook other) : this() {
      actionId_ = other.actionId_;
      hookId_ = other.hookId_;
      testCaseId_ = other.testCaseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunBeforeTestCaseHook Clone() {
      return new CommandRunBeforeTestCaseHook(this);
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 1;
    private string actionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionId {
      get { return actionId_; }
      set {
        actionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hook_id" field.</summary>
    public const int HookIdFieldNumber = 2;
    private string hookId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HookId {
      get { return hookId_; }
      set {
        hookId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "test_case_id" field.</summary>
    public const int TestCaseIdFieldNumber = 3;
    private string testCaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestCaseId {
      get { return testCaseId_; }
      set {
        testCaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandRunBeforeTestCaseHook);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandRunBeforeTestCaseHook other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionId != other.ActionId) return false;
      if (HookId != other.HookId) return false;
      if (TestCaseId != other.TestCaseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionId.Length != 0) hash ^= ActionId.GetHashCode();
      if (HookId.Length != 0) hash ^= HookId.GetHashCode();
      if (TestCaseId.Length != 0) hash ^= TestCaseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActionId);
      }
      if (HookId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HookId);
      }
      if (TestCaseId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TestCaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionId);
      }
      if (HookId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HookId);
      }
      if (TestCaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestCaseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandRunBeforeTestCaseHook other) {
      if (other == null) {
        return;
      }
      if (other.ActionId.Length != 0) {
        ActionId = other.ActionId;
      }
      if (other.HookId.Length != 0) {
        HookId = other.HookId;
      }
      if (other.TestCaseId.Length != 0) {
        TestCaseId = other.TestCaseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ActionId = input.ReadString();
            break;
          }
          case 18: {
            HookId = input.ReadString();
            break;
          }
          case 26: {
            TestCaseId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandRunAfterTestCaseHook : pb::IMessage<CommandRunAfterTestCaseHook> {
    private static readonly pb::MessageParser<CommandRunAfterTestCaseHook> _parser = new pb::MessageParser<CommandRunAfterTestCaseHook>(() => new CommandRunAfterTestCaseHook());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandRunAfterTestCaseHook> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunAfterTestCaseHook() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunAfterTestCaseHook(CommandRunAfterTestCaseHook other) : this() {
      actionId_ = other.actionId_;
      hookId_ = other.hookId_;
      testCaseId_ = other.testCaseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunAfterTestCaseHook Clone() {
      return new CommandRunAfterTestCaseHook(this);
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 1;
    private string actionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionId {
      get { return actionId_; }
      set {
        actionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hook_id" field.</summary>
    public const int HookIdFieldNumber = 2;
    private string hookId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HookId {
      get { return hookId_; }
      set {
        hookId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "test_case_id" field.</summary>
    public const int TestCaseIdFieldNumber = 3;
    private string testCaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestCaseId {
      get { return testCaseId_; }
      set {
        testCaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandRunAfterTestCaseHook);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandRunAfterTestCaseHook other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionId != other.ActionId) return false;
      if (HookId != other.HookId) return false;
      if (TestCaseId != other.TestCaseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionId.Length != 0) hash ^= ActionId.GetHashCode();
      if (HookId.Length != 0) hash ^= HookId.GetHashCode();
      if (TestCaseId.Length != 0) hash ^= TestCaseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActionId);
      }
      if (HookId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HookId);
      }
      if (TestCaseId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TestCaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionId);
      }
      if (HookId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HookId);
      }
      if (TestCaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestCaseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandRunAfterTestCaseHook other) {
      if (other == null) {
        return;
      }
      if (other.ActionId.Length != 0) {
        ActionId = other.ActionId;
      }
      if (other.HookId.Length != 0) {
        HookId = other.HookId;
      }
      if (other.TestCaseId.Length != 0) {
        TestCaseId = other.TestCaseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ActionId = input.ReadString();
            break;
          }
          case 18: {
            HookId = input.ReadString();
            break;
          }
          case 26: {
            TestCaseId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandRunTestStep : pb::IMessage<CommandRunTestStep> {
    private static readonly pb::MessageParser<CommandRunTestStep> _parser = new pb::MessageParser<CommandRunTestStep>(() => new CommandRunTestStep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandRunTestStep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunTestStep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunTestStep(CommandRunTestStep other) : this() {
      actionId_ = other.actionId_;
      stepDefinitionId_ = other.stepDefinitionId_;
      stepMatchArguments_ = other.stepMatchArguments_.Clone();
      pickleStepArgument_ = other.pickleStepArgument_ != null ? other.pickleStepArgument_.Clone() : null;
      testCaseId_ = other.testCaseId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRunTestStep Clone() {
      return new CommandRunTestStep(this);
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 1;
    private string actionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionId {
      get { return actionId_; }
      set {
        actionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "step_definition_id" field.</summary>
    public const int StepDefinitionIdFieldNumber = 2;
    private string stepDefinitionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StepDefinitionId {
      get { return stepDefinitionId_; }
      set {
        stepDefinitionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "step_match_arguments" field.</summary>
    public const int StepMatchArgumentsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.StepMatchArgument> _repeated_stepMatchArguments_codec
        = pb::FieldCodec.ForMessage(26, global::Io.Cucumber.Messages.StepMatchArgument.Parser);
    private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.StepMatchArgument> stepMatchArguments_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.StepMatchArgument>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Io.Cucumber.Messages.StepMatchArgument> StepMatchArguments {
      get { return stepMatchArguments_; }
    }

    /// <summary>Field number for the "pickle_step_argument" field.</summary>
    public const int PickleStepArgumentFieldNumber = 4;
    private global::Io.Cucumber.Messages.PickleStepArgument pickleStepArgument_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.PickleStepArgument PickleStepArgument {
      get { return pickleStepArgument_; }
      set {
        pickleStepArgument_ = value;
      }
    }

    /// <summary>Field number for the "test_case_id" field.</summary>
    public const int TestCaseIdFieldNumber = 5;
    private string testCaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestCaseId {
      get { return testCaseId_; }
      set {
        testCaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandRunTestStep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandRunTestStep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionId != other.ActionId) return false;
      if (StepDefinitionId != other.StepDefinitionId) return false;
      if(!stepMatchArguments_.Equals(other.stepMatchArguments_)) return false;
      if (!object.Equals(PickleStepArgument, other.PickleStepArgument)) return false;
      if (TestCaseId != other.TestCaseId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionId.Length != 0) hash ^= ActionId.GetHashCode();
      if (StepDefinitionId.Length != 0) hash ^= StepDefinitionId.GetHashCode();
      hash ^= stepMatchArguments_.GetHashCode();
      if (pickleStepArgument_ != null) hash ^= PickleStepArgument.GetHashCode();
      if (TestCaseId.Length != 0) hash ^= TestCaseId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActionId);
      }
      if (StepDefinitionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StepDefinitionId);
      }
      stepMatchArguments_.WriteTo(output, _repeated_stepMatchArguments_codec);
      if (pickleStepArgument_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PickleStepArgument);
      }
      if (TestCaseId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TestCaseId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionId);
      }
      if (StepDefinitionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StepDefinitionId);
      }
      size += stepMatchArguments_.CalculateSize(_repeated_stepMatchArguments_codec);
      if (pickleStepArgument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PickleStepArgument);
      }
      if (TestCaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestCaseId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandRunTestStep other) {
      if (other == null) {
        return;
      }
      if (other.ActionId.Length != 0) {
        ActionId = other.ActionId;
      }
      if (other.StepDefinitionId.Length != 0) {
        StepDefinitionId = other.StepDefinitionId;
      }
      stepMatchArguments_.Add(other.stepMatchArguments_);
      if (other.pickleStepArgument_ != null) {
        if (pickleStepArgument_ == null) {
          pickleStepArgument_ = new global::Io.Cucumber.Messages.PickleStepArgument();
        }
        PickleStepArgument.MergeFrom(other.PickleStepArgument);
      }
      if (other.TestCaseId.Length != 0) {
        TestCaseId = other.TestCaseId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ActionId = input.ReadString();
            break;
          }
          case 18: {
            StepDefinitionId = input.ReadString();
            break;
          }
          case 26: {
            stepMatchArguments_.AddEntriesFrom(input, _repeated_stepMatchArguments_codec);
            break;
          }
          case 34: {
            if (pickleStepArgument_ == null) {
              pickleStepArgument_ = new global::Io.Cucumber.Messages.PickleStepArgument();
            }
            input.ReadMessage(pickleStepArgument_);
            break;
          }
          case 42: {
            TestCaseId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Represents a single argument extracted from a step match and passed to a step definition.
  /// This is used for the following purposes:
  /// - Construct an argument to pass to a step definition (possibly through a parameter type transform)
  /// - Highlight the matched parameter in rich formatters such as the HTML formatter
  ///
  /// This message closely matches the `Argument` class in the `cucumber-expressions` library.
  /// </summary>
  public sealed partial class StepMatchArgument : pb::IMessage<StepMatchArgument> {
    private static readonly pb::MessageParser<StepMatchArgument> _parser = new pb::MessageParser<StepMatchArgument>(() => new StepMatchArgument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StepMatchArgument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepMatchArgument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepMatchArgument(StepMatchArgument other) : this() {
      parameterTypeName_ = other.parameterTypeName_;
      group_ = other.group_ != null ? other.group_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepMatchArgument Clone() {
      return new StepMatchArgument(this);
    }

    /// <summary>Field number for the "parameter_type_name" field.</summary>
    public const int ParameterTypeNameFieldNumber = 1;
    private string parameterTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParameterTypeName {
      get { return parameterTypeName_; }
      set {
        parameterTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    private global::Io.Cucumber.Messages.StepMatchArgument.Types.Group group_;
    /// <summary>
    ///*
    /// Represents the outermost capture group of an argument. This message closely matches the
    /// `Group` class in the `cucumber-expressions` library.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.StepMatchArgument.Types.Group Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StepMatchArgument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StepMatchArgument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParameterTypeName != other.ParameterTypeName) return false;
      if (!object.Equals(Group, other.Group)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ParameterTypeName.Length != 0) hash ^= ParameterTypeName.GetHashCode();
      if (group_ != null) hash ^= Group.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ParameterTypeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ParameterTypeName);
      }
      if (group_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Group);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ParameterTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParameterTypeName);
      }
      if (group_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StepMatchArgument other) {
      if (other == null) {
        return;
      }
      if (other.ParameterTypeName.Length != 0) {
        ParameterTypeName = other.ParameterTypeName;
      }
      if (other.group_ != null) {
        if (group_ == null) {
          group_ = new global::Io.Cucumber.Messages.StepMatchArgument.Types.Group();
        }
        Group.MergeFrom(other.Group);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ParameterTypeName = input.ReadString();
            break;
          }
          case 18: {
            if (group_ == null) {
              group_ = new global::Io.Cucumber.Messages.StepMatchArgument.Types.Group();
            }
            input.ReadMessage(group_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StepMatchArgument message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Group : pb::IMessage<Group> {
        private static readonly pb::MessageParser<Group> _parser = new pb::MessageParser<Group>(() => new Group());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Group> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Io.Cucumber.Messages.StepMatchArgument.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group(Group other) : this() {
          start_ = other.start_;
          value_ = other.value_;
          children_ = other.children_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group Clone() {
          return new Group(this);
        }

        /// <summary>Field number for the "start" field.</summary>
        public const int StartFieldNumber = 1;
        private uint start_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Start {
          get { return start_; }
          set {
            start_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private string value_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "children" field.</summary>
        public const int ChildrenFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.StepMatchArgument.Types.Group> _repeated_children_codec
            = pb::FieldCodec.ForMessage(26, global::Io.Cucumber.Messages.StepMatchArgument.Types.Group.Parser);
        private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.StepMatchArgument.Types.Group> children_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.StepMatchArgument.Types.Group>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Io.Cucumber.Messages.StepMatchArgument.Types.Group> Children {
          get { return children_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Group);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Group other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Start != other.Start) return false;
          if (Value != other.Value) return false;
          if(!children_.Equals(other.children_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Start != 0) hash ^= Start.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          hash ^= children_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Start != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Start);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Value);
          }
          children_.WriteTo(output, _repeated_children_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Start != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Start);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          size += children_.CalculateSize(_repeated_children_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Group other) {
          if (other == null) {
            return;
          }
          if (other.Start != 0) {
            Start = other.Start;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          children_.Add(other.children_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Start = input.ReadUInt32();
                break;
              }
              case 18: {
                Value = input.ReadString();
                break;
              }
              case 26: {
                children_.AddEntriesFrom(input, _repeated_children_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CommandGenerateSnippet : pb::IMessage<CommandGenerateSnippet> {
    private static readonly pb::MessageParser<CommandGenerateSnippet> _parser = new pb::MessageParser<CommandGenerateSnippet>(() => new CommandGenerateSnippet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandGenerateSnippet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGenerateSnippet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGenerateSnippet(CommandGenerateSnippet other) : this() {
      actionId_ = other.actionId_;
      generatedExpressions_ = other.generatedExpressions_.Clone();
      pickleStepArgument_ = other.pickleStepArgument_ != null ? other.pickleStepArgument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGenerateSnippet Clone() {
      return new CommandGenerateSnippet(this);
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 1;
    private string actionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionId {
      get { return actionId_; }
      set {
        actionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "generated_expressions" field.</summary>
    public const int GeneratedExpressionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Io.Cucumber.Messages.GeneratedExpression> _repeated_generatedExpressions_codec
        = pb::FieldCodec.ForMessage(18, global::Io.Cucumber.Messages.GeneratedExpression.Parser);
    private readonly pbc::RepeatedField<global::Io.Cucumber.Messages.GeneratedExpression> generatedExpressions_ = new pbc::RepeatedField<global::Io.Cucumber.Messages.GeneratedExpression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Io.Cucumber.Messages.GeneratedExpression> GeneratedExpressions {
      get { return generatedExpressions_; }
    }

    /// <summary>Field number for the "pickle_step_argument" field.</summary>
    public const int PickleStepArgumentFieldNumber = 3;
    private global::Io.Cucumber.Messages.PickleStepArgument pickleStepArgument_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Io.Cucumber.Messages.PickleStepArgument PickleStepArgument {
      get { return pickleStepArgument_; }
      set {
        pickleStepArgument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandGenerateSnippet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandGenerateSnippet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionId != other.ActionId) return false;
      if(!generatedExpressions_.Equals(other.generatedExpressions_)) return false;
      if (!object.Equals(PickleStepArgument, other.PickleStepArgument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionId.Length != 0) hash ^= ActionId.GetHashCode();
      hash ^= generatedExpressions_.GetHashCode();
      if (pickleStepArgument_ != null) hash ^= PickleStepArgument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActionId);
      }
      generatedExpressions_.WriteTo(output, _repeated_generatedExpressions_codec);
      if (pickleStepArgument_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PickleStepArgument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionId);
      }
      size += generatedExpressions_.CalculateSize(_repeated_generatedExpressions_codec);
      if (pickleStepArgument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PickleStepArgument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandGenerateSnippet other) {
      if (other == null) {
        return;
      }
      if (other.ActionId.Length != 0) {
        ActionId = other.ActionId;
      }
      generatedExpressions_.Add(other.generatedExpressions_);
      if (other.pickleStepArgument_ != null) {
        if (pickleStepArgument_ == null) {
          pickleStepArgument_ = new global::Io.Cucumber.Messages.PickleStepArgument();
        }
        PickleStepArgument.MergeFrom(other.PickleStepArgument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ActionId = input.ReadString();
            break;
          }
          case 18: {
            generatedExpressions_.AddEntriesFrom(input, _repeated_generatedExpressions_codec);
            break;
          }
          case 26: {
            if (pickleStepArgument_ == null) {
              pickleStepArgument_ = new global::Io.Cucumber.Messages.PickleStepArgument();
            }
            input.ReadMessage(pickleStepArgument_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeneratedExpression : pb::IMessage<GeneratedExpression> {
    private static readonly pb::MessageParser<GeneratedExpression> _parser = new pb::MessageParser<GeneratedExpression>(() => new GeneratedExpression());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeneratedExpression> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Io.Cucumber.Messages.MessagesReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneratedExpression() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneratedExpression(GeneratedExpression other) : this() {
      text_ = other.text_;
      parameterTypeNames_ = other.parameterTypeNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneratedExpression Clone() {
      return new GeneratedExpression(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameter_type_names" field.</summary>
    public const int ParameterTypeNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_parameterTypeNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> parameterTypeNames_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ParameterTypeNames {
      get { return parameterTypeNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeneratedExpression);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeneratedExpression other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if(!parameterTypeNames_.Equals(other.parameterTypeNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      hash ^= parameterTypeNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      parameterTypeNames_.WriteTo(output, _repeated_parameterTypeNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      size += parameterTypeNames_.CalculateSize(_repeated_parameterTypeNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeneratedExpression other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      parameterTypeNames_.Add(other.parameterTypeNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 18: {
            parameterTypeNames_.AddEntriesFrom(input, _repeated_parameterTypeNames_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
