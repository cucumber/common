# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: messages.proto

require 'google/protobuf'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_message "io.cucumber.messages.Timestamp" do
    optional :seconds, :int64, 1
    optional :nanos, :int32, 2
  end
  add_message "io.cucumber.messages.Duration" do
    optional :seconds, :int64, 1
    optional :nanos, :int32, 2
  end
  add_message "io.cucumber.messages.Envelope" do
    oneof :message do
      optional :source, :message, 1, "io.cucumber.messages.Source"
      optional :gherkin_document, :message, 2, "io.cucumber.messages.GherkinDocument"
      optional :pickle, :message, 3, "io.cucumber.messages.Pickle"
      optional :attachment, :message, 4, "io.cucumber.messages.Attachment"
      optional :test_case_started, :message, 5, "io.cucumber.messages.TestCaseStarted"
      optional :test_step_started, :message, 6, "io.cucumber.messages.TestStepStarted"
      optional :test_step_finished, :message, 7, "io.cucumber.messages.TestStepFinished"
      optional :test_case_finished, :message, 8, "io.cucumber.messages.TestCaseFinished"
      optional :pickle_accepted, :message, 9, "io.cucumber.messages.PickleAccepted"
      optional :pickle_rejected, :message, 10, "io.cucumber.messages.PickleRejected"
      optional :test_case_prepared, :message, 11, "io.cucumber.messages.TestCasePrepared"
      optional :test_run_started, :message, 12, "io.cucumber.messages.TestRunStarted"
      optional :test_run_finished, :message, 13, "io.cucumber.messages.TestRunFinished"
      optional :command_start, :message, 14, "io.cucumber.messages.CommandStart"
      optional :command_action_complete, :message, 15, "io.cucumber.messages.CommandActionComplete"
      optional :command_run_before_test_run_hooks, :message, 16, "io.cucumber.messages.CommandRunBeforeTestRunHooks"
      optional :command_initialize_test_case, :message, 17, "io.cucumber.messages.CommandInitializeTestCase"
      optional :command_run_before_test_case_hook, :message, 18, "io.cucumber.messages.CommandRunBeforeTestCaseHook"
      optional :command_run_test_step, :message, 19, "io.cucumber.messages.CommandRunTestStep"
      optional :command_run_after_test_case_hook, :message, 20, "io.cucumber.messages.CommandRunAfterTestCaseHook"
      optional :command_run_after_test_run_hooks, :message, 21, "io.cucumber.messages.CommandRunAfterTestRunHooks"
      optional :command_generate_snippet, :message, 22, "io.cucumber.messages.CommandGenerateSnippet"
      optional :command_error, :string, 23
      optional :test_case, :message, 24, "io.cucumber.messages.TestCase"
      optional :step_definition, :message, 25, "io.cucumber.messages.StepDefinition"
      optional :hook, :message, 26, "io.cucumber.messages.Hook"
    end
  end
  add_message "io.cucumber.messages.Location" do
    optional :line, :uint32, 1
    optional :column, :uint32, 2
  end
  add_message "io.cucumber.messages.SourceReference" do
    optional :uri, :string, 1
    optional :location, :message, 2, "io.cucumber.messages.Location"
  end
  add_message "io.cucumber.messages.Source" do
    optional :uri, :string, 1
    optional :data, :string, 2
    optional :media_type, :string, 4
  end
  add_message "io.cucumber.messages.GherkinDocument" do
    optional :uri, :string, 1
    optional :feature, :message, 2, "io.cucumber.messages.GherkinDocument.Feature"
    repeated :comments, :message, 3, "io.cucumber.messages.GherkinDocument.Comment"
  end
  add_message "io.cucumber.messages.GherkinDocument.Comment" do
    optional :location, :message, 1, "io.cucumber.messages.Location"
    optional :text, :string, 2
  end
  add_message "io.cucumber.messages.GherkinDocument.Feature" do
    optional :location, :message, 1, "io.cucumber.messages.Location"
    repeated :tags, :message, 2, "io.cucumber.messages.GherkinDocument.Feature.Tag"
    optional :language, :string, 3
    optional :keyword, :string, 4
    optional :name, :string, 5
    optional :description, :string, 6
    repeated :children, :message, 7, "io.cucumber.messages.GherkinDocument.Feature.FeatureChild"
  end
  add_message "io.cucumber.messages.GherkinDocument.Feature.Tag" do
    optional :location, :message, 1, "io.cucumber.messages.Location"
    optional :name, :string, 2
    optional :id, :string, 3
  end
  add_message "io.cucumber.messages.GherkinDocument.Feature.FeatureChild" do
    oneof :value do
      optional :rule, :message, 1, "io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule"
      optional :background, :message, 2, "io.cucumber.messages.GherkinDocument.Feature.Background"
      optional :scenario, :message, 3, "io.cucumber.messages.GherkinDocument.Feature.Scenario"
    end
  end
  add_message "io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule" do
    optional :location, :message, 1, "io.cucumber.messages.Location"
    optional :keyword, :string, 2
    optional :name, :string, 3
    optional :description, :string, 4
    repeated :children, :message, 5, "io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild"
  end
  add_message "io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild" do
    oneof :value do
      optional :background, :message, 1, "io.cucumber.messages.GherkinDocument.Feature.Background"
      optional :scenario, :message, 2, "io.cucumber.messages.GherkinDocument.Feature.Scenario"
    end
  end
  add_message "io.cucumber.messages.GherkinDocument.Feature.Background" do
    optional :location, :message, 1, "io.cucumber.messages.Location"
    optional :keyword, :string, 2
    optional :name, :string, 3
    optional :description, :string, 4
    repeated :steps, :message, 5, "io.cucumber.messages.GherkinDocument.Feature.Step"
  end
  add_message "io.cucumber.messages.GherkinDocument.Feature.Scenario" do
    optional :location, :message, 1, "io.cucumber.messages.Location"
    repeated :tags, :message, 2, "io.cucumber.messages.GherkinDocument.Feature.Tag"
    optional :keyword, :string, 3
    optional :name, :string, 4
    optional :description, :string, 5
    repeated :steps, :message, 6, "io.cucumber.messages.GherkinDocument.Feature.Step"
    repeated :examples, :message, 7, "io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples"
    optional :id, :string, 8
  end
  add_message "io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples" do
    optional :location, :message, 1, "io.cucumber.messages.Location"
    repeated :tags, :message, 2, "io.cucumber.messages.GherkinDocument.Feature.Tag"
    optional :keyword, :string, 3
    optional :name, :string, 4
    optional :description, :string, 5
    optional :table_header, :message, 6, "io.cucumber.messages.GherkinDocument.Feature.TableRow"
    repeated :table_body, :message, 7, "io.cucumber.messages.GherkinDocument.Feature.TableRow"
  end
  add_message "io.cucumber.messages.GherkinDocument.Feature.TableRow" do
    optional :location, :message, 1, "io.cucumber.messages.Location"
    repeated :cells, :message, 2, "io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell"
    optional :id, :string, 3
  end
  add_message "io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell" do
    optional :location, :message, 1, "io.cucumber.messages.Location"
    optional :value, :string, 2
  end
  add_message "io.cucumber.messages.GherkinDocument.Feature.Step" do
    optional :location, :message, 1, "io.cucumber.messages.Location"
    optional :keyword, :string, 2
    optional :text, :string, 3
    optional :id, :string, 7
    oneof :argument do
      optional :doc_string, :message, 5, "io.cucumber.messages.GherkinDocument.Feature.Step.DocString"
      optional :data_table, :message, 6, "io.cucumber.messages.GherkinDocument.Feature.Step.DataTable"
    end
  end
  add_message "io.cucumber.messages.GherkinDocument.Feature.Step.DataTable" do
    optional :location, :message, 1, "io.cucumber.messages.Location"
    repeated :rows, :message, 2, "io.cucumber.messages.GherkinDocument.Feature.TableRow"
  end
  add_message "io.cucumber.messages.GherkinDocument.Feature.Step.DocString" do
    optional :location, :message, 1, "io.cucumber.messages.Location"
    optional :media_type, :string, 2
    optional :content, :string, 3
    optional :delimiter, :string, 4
  end
  add_message "io.cucumber.messages.Attachment" do
    optional :source, :message, 1, "io.cucumber.messages.SourceReference"
    optional :test_step_id, :string, 4
    optional :test_case_started_id, :string, 5
    optional :media_type, :string, 8
    oneof :body do
      optional :text, :string, 6
      optional :binary, :bytes, 7
    end
  end
  add_message "io.cucumber.messages.Pickle" do
    optional :id, :string, 1
    optional :uri, :string, 2
    optional :name, :string, 3
    optional :language, :string, 4
    repeated :steps, :message, 5, "io.cucumber.messages.Pickle.PickleStep"
    repeated :tags, :message, 6, "io.cucumber.messages.Pickle.PickleTag"
    repeated :ast_node_ids, :string, 7
  end
  add_message "io.cucumber.messages.Pickle.PickleTag" do
    optional :name, :string, 1
    optional :ast_node_id, :string, 2
  end
  add_message "io.cucumber.messages.Pickle.PickleStep" do
    optional :text, :string, 1
    optional :argument, :message, 2, "io.cucumber.messages.PickleStepArgument"
    optional :id, :string, 3
    repeated :ast_node_ids, :string, 4
  end
  add_message "io.cucumber.messages.PickleStepArgument" do
    oneof :message do
      optional :doc_string, :message, 1, "io.cucumber.messages.PickleStepArgument.PickleDocString"
      optional :data_table, :message, 2, "io.cucumber.messages.PickleStepArgument.PickleTable"
    end
  end
  add_message "io.cucumber.messages.PickleStepArgument.PickleDocString" do
    optional :media_type, :string, 1
    optional :content, :string, 2
  end
  add_message "io.cucumber.messages.PickleStepArgument.PickleTable" do
    repeated :rows, :message, 1, "io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow"
  end
  add_message "io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow" do
    repeated :cells, :message, 1, "io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell"
  end
  add_message "io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell" do
    optional :value, :string, 1
  end
  add_message "io.cucumber.messages.TestCase" do
    optional :id, :string, 1
    optional :pickle_id, :string, 2
    repeated :test_steps, :message, 3, "io.cucumber.messages.TestCase.TestStep"
  end
  add_message "io.cucumber.messages.TestCase.TestStep" do
    optional :id, :string, 1
    optional :pickle_step_id, :string, 2
    repeated :step_definition_ids, :string, 3
    repeated :step_match_arguments, :message, 4, "io.cucumber.messages.StepMatchArgument"
    optional :hookId, :string, 5
  end
  add_message "io.cucumber.messages.PickleAccepted" do
    optional :pickle_id, :string, 1
  end
  add_message "io.cucumber.messages.PickleRejected" do
    optional :pickle_id, :string, 2
  end
  add_message "io.cucumber.messages.TestRunStarted" do
    optional :timestamp, :message, 1, "io.cucumber.messages.Timestamp"
  end
  add_message "io.cucumber.messages.TestCasePreparedStep" do
    optional :source_location, :message, 1, "io.cucumber.messages.SourceReference"
    optional :action_location, :message, 2, "io.cucumber.messages.SourceReference"
  end
  add_message "io.cucumber.messages.TestCasePrepared" do
    optional :pickle_id, :string, 1
    repeated :steps, :message, 2, "io.cucumber.messages.TestCasePreparedStep"
  end
  add_message "io.cucumber.messages.TestCaseStarted" do
    optional :timestamp, :message, 1, "io.cucumber.messages.Timestamp"
    optional :platform, :message, 2, "io.cucumber.messages.TestCaseStarted.Platform"
    optional :attempt, :uint32, 3
    optional :test_case_id, :string, 4
    optional :id, :string, 5
  end
  add_message "io.cucumber.messages.TestCaseStarted.Platform" do
    optional :implementation, :string, 1
    optional :version, :string, 2
    optional :os, :string, 3
    optional :cpu, :string, 4
  end
  add_message "io.cucumber.messages.TestCaseFinished" do
    optional :timestamp, :message, 1, "io.cucumber.messages.Timestamp"
    optional :test_result, :message, 2, "io.cucumber.messages.TestResult"
    optional :test_case_started_id, :string, 3
  end
  add_message "io.cucumber.messages.TestStepStarted" do
    optional :timestamp, :message, 1, "io.cucumber.messages.Timestamp"
    optional :test_step_id, :string, 2
    optional :test_case_started_id, :string, 3
  end
  add_message "io.cucumber.messages.TestStepFinished" do
    optional :test_result, :message, 1, "io.cucumber.messages.TestResult"
    optional :timestamp, :message, 2, "io.cucumber.messages.Timestamp"
    optional :test_step_id, :string, 3
    optional :test_case_started_id, :string, 4
  end
  add_message "io.cucumber.messages.TestResult" do
    optional :status, :enum, 1, "io.cucumber.messages.TestResult.Status"
    optional :message, :string, 2
    optional :duration, :message, 3, "io.cucumber.messages.Duration"
    optional :will_be_retried, :bool, 4
  end
  add_enum "io.cucumber.messages.TestResult.Status" do
    value :UNKNOWN, 0
    value :PASSED, 1
    value :SKIPPED, 2
    value :PENDING, 3
    value :UNDEFINED, 4
    value :AMBIGUOUS, 5
    value :FAILED, 6
  end
  add_message "io.cucumber.messages.TestRunFinished" do
    optional :success, :bool, 1
    optional :timestamp, :message, 2, "io.cucumber.messages.Timestamp"
  end
  add_message "io.cucumber.messages.CommandStart" do
    optional :base_directory, :string, 2
    optional :sources_config, :message, 3, "io.cucumber.messages.SourcesConfig"
    optional :runtime_config, :message, 4, "io.cucumber.messages.RuntimeConfig"
    optional :support_code_config, :message, 5, "io.cucumber.messages.SupportCodeConfig"
  end
  add_message "io.cucumber.messages.SourcesConfig" do
    repeated :absolute_paths, :string, 1
    optional :language, :string, 2
    optional :filters, :message, 3, "io.cucumber.messages.SourcesFilterConfig"
    optional :order, :message, 4, "io.cucumber.messages.SourcesOrder"
  end
  add_message "io.cucumber.messages.SourcesFilterConfig" do
    optional :tag_expression, :string, 1
    repeated :name_regular_expressions, :string, 2
    repeated :uri_to_lines_mapping, :message, 3, "io.cucumber.messages.UriToLinesMapping"
  end
  add_message "io.cucumber.messages.UriToLinesMapping" do
    optional :absolute_path, :string, 1
    repeated :lines, :uint64, 2
  end
  add_message "io.cucumber.messages.SourcesOrder" do
    optional :type, :enum, 1, "io.cucumber.messages.SourcesOrderType"
    optional :seed, :uint64, 2
  end
  add_message "io.cucumber.messages.RuntimeConfig" do
    optional :is_fail_fast, :bool, 1
    optional :is_dry_run, :bool, 2
    optional :is_strict, :bool, 3
    optional :max_parallel, :uint64, 4
  end
  add_message "io.cucumber.messages.SupportCodeConfig" do
    repeated :before_test_case_hooks, :message, 1, "io.cucumber.messages.Hook"
    repeated :after_test_case_hooks, :message, 2, "io.cucumber.messages.Hook"
    repeated :step_definitions, :message, 3, "io.cucumber.messages.StepDefinition"
    repeated :parameter_types, :message, 4, "io.cucumber.messages.ParameterType"
  end
  add_message "io.cucumber.messages.Hook" do
    optional :id, :string, 1
    optional :tag_expression, :string, 2
    optional :source_reference, :message, 3, "io.cucumber.messages.SourceReference"
  end
  add_message "io.cucumber.messages.StepDefinition" do
    optional :id, :string, 1
    optional :pattern, :message, 2, "io.cucumber.messages.StepDefinitionPattern"
    optional :source_reference, :message, 3, "io.cucumber.messages.SourceReference"
  end
  add_message "io.cucumber.messages.StepDefinitionPattern" do
    optional :source, :string, 1
    optional :type, :enum, 2, "io.cucumber.messages.StepDefinitionPatternType"
  end
  add_message "io.cucumber.messages.ParameterType" do
    optional :name, :string, 1
    repeated :regular_expressions, :string, 2
    optional :prefer_for_regular_expression_match, :bool, 3
    optional :use_for_snippets, :bool, 4
  end
  add_message "io.cucumber.messages.CommandActionComplete" do
    optional :completed_id, :string, 1
    oneof :result do
      optional :test_result, :message, 2, "io.cucumber.messages.TestResult"
      optional :snippet, :string, 3
    end
  end
  add_message "io.cucumber.messages.CommandRunBeforeTestRunHooks" do
    optional :action_id, :string, 1
  end
  add_message "io.cucumber.messages.CommandRunAfterTestRunHooks" do
    optional :action_id, :string, 1
  end
  add_message "io.cucumber.messages.CommandInitializeTestCase" do
    optional :action_id, :string, 1
    optional :pickle, :message, 2, "io.cucumber.messages.Pickle"
  end
  add_message "io.cucumber.messages.CommandRunBeforeTestCaseHook" do
    optional :action_id, :string, 1
    optional :hook_id, :string, 2
    optional :test_case_id, :string, 3
  end
  add_message "io.cucumber.messages.CommandRunAfterTestCaseHook" do
    optional :action_id, :string, 1
    optional :hook_id, :string, 2
    optional :test_case_id, :string, 3
  end
  add_message "io.cucumber.messages.CommandRunTestStep" do
    optional :action_id, :string, 1
    optional :step_definition_id, :string, 2
    repeated :step_match_arguments, :message, 3, "io.cucumber.messages.StepMatchArgument"
    optional :pickle_step_argument, :message, 4, "io.cucumber.messages.PickleStepArgument"
    optional :test_case_id, :string, 5
  end
  add_message "io.cucumber.messages.StepMatchArgument" do
    optional :parameter_type_name, :string, 1
    optional :group, :message, 2, "io.cucumber.messages.StepMatchArgument.Group"
  end
  add_message "io.cucumber.messages.StepMatchArgument.Group" do
    optional :start, :uint32, 1
    optional :value, :string, 2
    repeated :children, :message, 3, "io.cucumber.messages.StepMatchArgument.Group"
  end
  add_message "io.cucumber.messages.CommandGenerateSnippet" do
    optional :action_id, :string, 1
    repeated :generated_expressions, :message, 2, "io.cucumber.messages.GeneratedExpression"
    optional :pickle_step_argument, :message, 3, "io.cucumber.messages.PickleStepArgument"
  end
  add_message "io.cucumber.messages.GeneratedExpression" do
    optional :text, :string, 1
    repeated :parameter_type_names, :string, 2
  end
  add_enum "io.cucumber.messages.SourcesOrderType" do
    value :ORDER_OF_DEFINITION, 0
    value :RANDOM, 1
  end
  add_enum "io.cucumber.messages.StepDefinitionPatternType" do
    value :CUCUMBER_EXPRESSION, 0
    value :REGULAR_EXPRESSION, 1
  end
end

module Cucumber::Messages
  Timestamp = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.Timestamp").msgclass
  Duration = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.Duration").msgclass
  Envelope = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.Envelope").msgclass
  Location = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.Location").msgclass
  SourceReference = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.SourceReference").msgclass
  Source = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.Source").msgclass
  GherkinDocument = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument").msgclass
  GherkinDocument::Comment = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Comment").msgclass
  GherkinDocument::Feature = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Feature").msgclass
  GherkinDocument::Feature::Tag = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Feature.Tag").msgclass
  GherkinDocument::Feature::FeatureChild = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Feature.FeatureChild").msgclass
  GherkinDocument::Feature::FeatureChild::Rule = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule").msgclass
  GherkinDocument::Feature::FeatureChild::RuleChild = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild").msgclass
  GherkinDocument::Feature::Background = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Feature.Background").msgclass
  GherkinDocument::Feature::Scenario = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Feature.Scenario").msgclass
  GherkinDocument::Feature::Scenario::Examples = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples").msgclass
  GherkinDocument::Feature::TableRow = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Feature.TableRow").msgclass
  GherkinDocument::Feature::TableRow::TableCell = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell").msgclass
  GherkinDocument::Feature::Step = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Feature.Step").msgclass
  GherkinDocument::Feature::Step::DataTable = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Feature.Step.DataTable").msgclass
  GherkinDocument::Feature::Step::DocString = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GherkinDocument.Feature.Step.DocString").msgclass
  Attachment = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.Attachment").msgclass
  Pickle = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.Pickle").msgclass
  Pickle::PickleTag = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.Pickle.PickleTag").msgclass
  Pickle::PickleStep = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.Pickle.PickleStep").msgclass
  PickleStepArgument = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.PickleStepArgument").msgclass
  PickleStepArgument::PickleDocString = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.PickleStepArgument.PickleDocString").msgclass
  PickleStepArgument::PickleTable = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.PickleStepArgument.PickleTable").msgclass
  PickleStepArgument::PickleTable::PickleTableRow = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow").msgclass
  PickleStepArgument::PickleTable::PickleTableRow::PickleTableCell = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell").msgclass
  TestCase = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.TestCase").msgclass
  TestCase::TestStep = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.TestCase.TestStep").msgclass
  PickleAccepted = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.PickleAccepted").msgclass
  PickleRejected = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.PickleRejected").msgclass
  TestRunStarted = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.TestRunStarted").msgclass
  TestCasePreparedStep = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.TestCasePreparedStep").msgclass
  TestCasePrepared = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.TestCasePrepared").msgclass
  TestCaseStarted = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.TestCaseStarted").msgclass
  TestCaseStarted::Platform = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.TestCaseStarted.Platform").msgclass
  TestCaseFinished = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.TestCaseFinished").msgclass
  TestStepStarted = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.TestStepStarted").msgclass
  TestStepFinished = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.TestStepFinished").msgclass
  TestResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.TestResult").msgclass
  TestResult::Status = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.TestResult.Status").enummodule
  TestRunFinished = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.TestRunFinished").msgclass
  CommandStart = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.CommandStart").msgclass
  SourcesConfig = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.SourcesConfig").msgclass
  SourcesFilterConfig = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.SourcesFilterConfig").msgclass
  UriToLinesMapping = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.UriToLinesMapping").msgclass
  SourcesOrder = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.SourcesOrder").msgclass
  RuntimeConfig = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.RuntimeConfig").msgclass
  SupportCodeConfig = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.SupportCodeConfig").msgclass
  Hook = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.Hook").msgclass
  StepDefinition = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.StepDefinition").msgclass
  StepDefinitionPattern = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.StepDefinitionPattern").msgclass
  ParameterType = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.ParameterType").msgclass
  CommandActionComplete = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.CommandActionComplete").msgclass
  CommandRunBeforeTestRunHooks = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.CommandRunBeforeTestRunHooks").msgclass
  CommandRunAfterTestRunHooks = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.CommandRunAfterTestRunHooks").msgclass
  CommandInitializeTestCase = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.CommandInitializeTestCase").msgclass
  CommandRunBeforeTestCaseHook = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.CommandRunBeforeTestCaseHook").msgclass
  CommandRunAfterTestCaseHook = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.CommandRunAfterTestCaseHook").msgclass
  CommandRunTestStep = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.CommandRunTestStep").msgclass
  StepMatchArgument = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.StepMatchArgument").msgclass
  StepMatchArgument::Group = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.StepMatchArgument.Group").msgclass
  CommandGenerateSnippet = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.CommandGenerateSnippet").msgclass
  GeneratedExpression = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.GeneratedExpression").msgclass
  SourcesOrderType = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.SourcesOrderType").enummodule
  StepDefinitionPatternType = Google::Protobuf::DescriptorPool.generated_pool.lookup("io.cucumber.messages.StepDefinitionPatternType").enummodule
end
